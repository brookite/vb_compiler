#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 196
#define YY_END_OF_BUFFER 197
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[767] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  197,  196,  193,  195,  156,  172,  196,  153,
      196,  196,  167,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  196,  196,  157,  164,  166,
      196,  154,  155,  190,  173,  190,  187,  177,  174,  181,
      190,  190,  180,  188,  179,  178,  189,  186,  182,  183,
      196,  196,  193,    0,  195,    0,    0,    0,  167,  170,
        0,    0,  167,  167,  167,    0,  192,  192,  192,  192,
      192,   40,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,   49,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,   54,  192,   18,   19,  192,
      192,  192,  133,  192,  192,  192,  192,  192,  192,  192,
      136,   25,  192,   26,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  109,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,    0,  157,  163,  165,  162,  159,  160,  161,  158,
      154,  190,  173,  186,  174,  175,  176,  180,  178,  182,
      184,  185,    0,  168,  169,  171,    0,  170,    0,  170,

      167,  167,  167,  192,  192,  114,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  123,  192,  192,
      192,  192,   87,  192,  192,  192,  192,  192,  192,  192,
      127,  192,  192,   89,  192,  192,  192,  192,  192,  192,
      192,  192,   94,  132,  192,  192,  192,   21,  192,  192,
      192,  192,  192,   23,  192,   98,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  104,  192,
      192,  192,  192,   31,  192,  192,  192,  192,  192,  192,

      192,  108,  192,  192,  192,  192,   35,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  149,
      194,  168,  168,  168,    0,  169,  169,  169,    0,    0,
      170,    0,  192,  192,  192,  192,  192,  192,    3,  192,
       78,  116,  192,  192,  192,  192,  192,   43,   80,  118,
        6,  192,   81,  119,  192,  192,  192,  192,    8,   46,
      192,  192,  192,  192,   84,  192,  192,  192,  192,  192,
      192,  124,   12,  192,   13,  192,  192,  192,   14,  192,
      192,  192,  192,  192,  192,  192,  192,  129,  192,  192,
      192,  192,  192,  192,   20,   57,   95,  192,  192,  192,

      192,  192,  192,   60,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  107,  144,  192,  192,  192,   34,  192,  151,  192,
      192,  192,  192,  192,  192,  192,   37,   74,  192,  192,
       38,  192,  168,  168,  168,  169,  169,  169,    0,  170,
      192,  192,   76,  192,  192,  115,   41,    4,   42,   79,
      117,    5,   44,    7,  192,  192,  192,   83,  121,    9,
      192,  192,  192,  192,  192,  192,  192,  192,  125,   51,
       88,  126,  152,  192,  192,  192,  192,  192,  192,   91,

      192,  192,  192,  192,  192,  192,   56,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,   66,  192,  192,  192,  105,  192,  192,  192,  143,
      192,  192,  192,  192,  192,   71,  192,  192,  192,   36,
      192,  111,  192,  112,  192,  192,  192,  192,  192,  192,
      192,  192,   82,  120,  192,  192,  192,  192,  192,  192,
       86,   50,  192,   15,  192,  192,  192,   53,  192,  192,
      192,  192,  192,  192,   58,  192,  192,   22,  192,  192,
      192,  192,  192,  192,   99,  192,  100,   63,  192,  192,

      192,  192,  192,  192,  192,  103,  192,  192,  192,   30,
       67,  142,  192,  106,   32,   69,   33,  192,  192,  192,
      110,  192,   73,  192,  192,  192,  192,  192,  192,    2,
       77,  192,   47,  122,   10,   48,  192,  192,   90,  192,
      128,  192,   17,  192,  130,  192,   93,  192,  192,  192,
       59,  192,  192,  150,  192,  192,  192,  192,  192,  192,
      192,  102,  139,  192,  192,  192,  192,  192,   68,  192,
      192,   72,  192,  147,  192,  192,  192,  192,  192,   45,
       85,  192,   52,  192,  192,   55,  192,  192,  192,  192,
      192,  192,  192,   62,  137,  192,  192,  192,  192,   28,

      192,  192,   29,  192,  192,  145,  146,  148,  192,  192,
      192,   39,  192,  192,  192,  131,  192,  192,   97,  135,
      192,  192,  101,  192,   27,  192,   65,  192,  192,   70,
      192,  113,    1,   11,  192,   92,  192,  192,  192,  192,
      192,   64,  140,  192,   75,  192,   96,  192,  192,  192,
      138,  192,  192,  134,  192,  192,  192,  192,  192,  192,
      141,  192,   24,   61,   16,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    4,    4,    7,    8,    1,
        1,    1,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   14,   15,    1,    1,
        1,    1,    1,    4,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   32,
       41,   42,   43,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   32,   61,   62,   63,   64,   65,   66,   67,
       68,   32,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    6,    4,    1,    1,    2,
        1,    2,    7,    7,    2,    8,    8,    8,    8,    8,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    5,    4,    9,    8,    8,    8,    8,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9
    } ;

static const flex_int16_t yy_base[777] =
    {   0,
        0,    0,   66,   67,  214,  212,  108,  167,   71,   76,
       81,  130,  211, 5902,   72,  205, 5902, 5902,   75, 5902,
       88,   62,  217,  278,  148,  337,  398,  454,  506,  173,
      131,  567,  124,  189,  614,  190,  679,  253,  284,  728,
      777,  403,  156,  842,  288,  152,   66,    0, 5902,  101,
      471,    0, 5902,    0,  190,    0, 5902,  103,   90, 5902,
       72,  128,  182, 5902, 5902,  119, 5902,  139,  144, 5902,
      137,  138,  169,  162,  156,    0,  137,  173,    0,  289,
      210,  254, 5902, 5902, 5902,  289,   82,  268,  372,  425,
      419,  391, 5902,  446,  521,  542,  583,  488,  615,  429,

      633,  668,  688,  900,  664,  778,  537,  772,  714,  473,
      602,  782,  850,  854,  870,  877,  556,  695,  904,  918,
      766,  927,  934,  944,  953,  755,  949,  962,  969,  995,
      977, 1011,  846, 1029, 1022, 1043, 1038, 1069, 1076, 1090,
     1081, 1094, 1110, 1098, 1122, 1142, 1148, 1162, 1156, 1206,
     1177, 1217, 1188, 1232, 1246, 1183, 1277, 1281, 1249, 1296,
     1290, 1305, 1311, 1322, 1345, 1351, 1362, 1377, 1355, 1383,
     1393,  232,    0, 5902, 5902, 5902, 5902, 5902, 5902, 5902,
        0,    0,  115,  192,  241,    0,    0,  105,  248,  263,
     5902, 5902,  317, 1368, 1414, 5902,  349, 1432,  311, 1441,

     5902, 5902, 5902, 1452, 1480, 1493, 1465, 1499, 1508, 1523,
     1527, 1539, 1543, 1549, 1556, 1568, 1574, 1589, 1596, 1614,
     1618, 1622, 1627, 1634, 1648, 1656, 1644, 1686, 1662, 1700,
     1709, 1713, 1721, 1726, 1741, 1747, 1773, 1755, 1781, 1796,
     1800, 1805, 1813, 1822, 1827, 1834, 1840, 1851, 1856, 1868,
     1874, 1881, 1898, 1903, 1915, 1919, 1929, 1933, 1944, 1971,
     1978, 1950, 1961, 1988, 1995, 2004, 2018, 2026, 2030, 2036,
     2044, 2052, 2070, 2076, 2082, 2098, 2090, 2105, 2120, 2128,
     2136, 2158, 2152, 2171, 2181, 2176, 2192, 2209, 2216, 2221,
     2235, 2241, 2247, 2254, 2262, 2273, 2266, 2285, 2294, 2307,

     2315, 2320, 2326, 2349, 2353, 2368, 2358, 2378, 2383, 2387,
     2393, 2418, 2425, 2431, 2437, 2450, 2465, 2458, 2480, 2484,
       89, 5902, 5902, 5902,  653, 5902, 5902, 5902,  777,  335,
     2483,  356, 2505, 2518, 2513, 2522, 2533, 2548, 2528, 2553,
     2577, 2581, 2588, 2595, 2599, 2606, 2610, 2619, 2628, 2637,
     2648, 2654, 2659, 2666, 2670, 2675, 2679, 2686, 2694, 2700,
     2719, 2728, 2734, 2744, 2751, 2769, 2763, 2774, 2782, 2789,
     2794, 2809, 2816, 2823, 2835, 2841, 2849, 2856, 2861, 2868,
     2873, 2879, 2889, 2899, 2908, 2914, 2927, 2919, 2934, 2943,
     2939, 2962, 2974, 2981, 2987, 2995, 3002, 3006, 3022, 3014,

     3035, 3030, 3052, 3062, 3079, 3083, 3087, 3092, 3100, 3114,
     3121, 3142, 3152, 3147, 3156, 3127, 3161, 3182, 3187, 3207,
     3211, 3215, 3220, 3227, 3236, 3255, 3265, 3277, 3286, 3300,
     3307, 3311, 3326, 3330, 3334, 3340, 3351, 3357, 3364, 3368,
     3372, 3383, 3402, 3413, 3421, 3432, 3443, 3448, 3453, 3461,
     3472, 3477, 5902, 5902, 5902, 5902, 5902, 5902,  361, 3474,
     3494, 3499, 3504, 3510, 3523, 3534, 3539, 3544, 3550, 3556,
     3563, 3567, 3572, 3577, 3582, 3588, 3598, 3610, 3615, 3620,
     3632, 3628, 3639, 3643, 3653, 3648, 3660, 3681, 3670, 3700,
     3708, 3712, 3716, 3721, 3726, 3730, 3735, 3743, 3754, 3761,

     3778, 3783, 3787, 3796, 3808, 3802, 3812, 3827, 3831, 3855,
     3859, 3837, 3878, 3884, 3871, 3889, 3897, 3909, 3919, 3927,
     3941, 3951, 3959, 3970, 3985, 3989, 3993, 3999, 4015, 4031,
     4041, 4049, 4053, 4057, 4061, 4065, 4072, 4079, 4091, 4087,
     4105, 4114, 4120, 4134, 4140, 4145, 4152, 4158, 4168, 4174,
     4178, 4185, 4196, 4200, 4216, 4220, 4225, 4229, 4240, 4245,
     4258, 4254, 4272, 4285, 4289, 4299, 4305, 4315, 4327, 4333,
     4323, 4339, 4353, 4357, 4361, 4365, 4380, 4388, 4399, 4406,
     4411, 4421, 4433, 4437, 4428, 4444, 4468, 4456, 4479, 4485,
     4491, 4496, 4500, 4517, 4525, 4529, 4547, 4551, 4558, 4563,

     4569, 4573, 4577, 4589, 4601, 4611, 4631, 4615, 4627, 4639,
     4649, 4655, 4659, 4669, 4674, 4679, 4683, 4693, 4697, 4702,
     4707, 4712, 4721, 4727, 4742, 4752, 4762, 4769, 4773, 4735,
     4780, 4802, 4807, 4811, 4820, 4824, 4829, 4836, 4840, 4851,
     4855, 4869, 4862, 4882, 4886, 4893, 4900, 4913, 4926, 4909,
     4931, 4941, 4947, 4957, 4961, 4973, 4985, 4992, 5004, 5020,
     5025, 5008, 5035, 5049, 5053, 5060, 5068, 5075, 5081, 5094,
     5106, 5100, 5115, 5119, 5124, 5134, 5138, 5146, 5150, 5166,
     5176, 5180, 5184, 5192, 5197, 5201, 5209, 5218, 5224, 5239,
     5232, 5249, 5262, 5258, 5270, 5274, 5283, 5287, 5300, 5291,

     5305, 5321, 5316, 5331, 5335, 5340, 5350, 5359, 5363, 5369,
     5381, 5388, 5393, 5397, 5401, 5409, 5414, 5423, 5444, 5454,
     5458, 5464, 5468, 5473, 5482, 5488, 5492, 5498, 5511, 5502,
     5530, 5520, 5536, 5540, 5544, 5551, 5561, 5565, 5582, 5593,
     5608, 5612, 5616, 5625, 5633, 5639, 5643, 5654, 5658, 5673,
     5665, 5685, 5705, 5681, 5711, 5716, 5723, 5689, 5733, 5738,
     5745, 5757, 5764, 5779, 5785, 5902, 5828, 5837, 5846, 5855,
     5861, 5863, 5872, 5881, 5890, 5893
    } ;

static const flex_int16_t yy_def[777] =
    {   0,
      766,    1,  767,  767,  768,  768,  769,  769,  770,  770,
      770,  770,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  771,  771,  771,  771,  771,   27,   27,
      771,  771,  771,   27,   27,   27,  771,  771,  771,   35,
       35,  771,  771,  771,  771,  772,  772,  773,  766,  766,
      766,  774,  766,  775,  766,  775,  766,  766,  766,  766,
      775,  775,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  776,  766,  766,   23,  766,
      766,  766,  766,  766,  766,  766,  766,  771,  771,  771,
      771,  771,  766,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,   27,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  772,  773,  766,  766,  766,  766,  766,  766,  766,
      774,  775,  766,  766,  766,  775,  775,  766,  766,  766,
      766,  766,  766,  776,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  766,  766,  766,  766,  766,  766,  766,  766,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,    0,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766
    } ;

static const flex_int16_t yy_nxt[5971] =
    {   0,
       14,   15,   16,   14,   17,   18,   19,   20,   21,   21,
       22,   14,   23,   23,   14,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   33,   34,   35,   36,   37,
       38,   33,   39,   40,   41,   42,   43,   44,   45,   33,
       46,   14,   14,   47,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   33,   49,   49,
       50,   50,   63,   73,   80,   80,   64,   63,  171,  171,
       65,   64,   65,   66,   66,   65,   67,   65,   66,   66,
       68,  321,   68,   69,   69,   70,   71,   76,   78,  186,

       79,   79,  185,  185,   77,  174,  188,   51,   51,   55,
       56,   72,  184,   57,  184,   74,  183,   58,  175,   58,
       59,   59,   60,   61,   93,   71,   76,   87,  186,   87,
       87,  189,  189,   77,   87,   67,   87,   87,   62,   68,
       72,   68,   69,   69,   70,   71,  125,  175,  184,  195,
      184,   87,   61,   87,   87,  187,  190,  190,   75,   87,
       72,   87,   87,  193,  191,  192,   93,   62,   55,   56,
       73,  165,   57,   93,   71,  125,   58,   94,   58,   59,
       59,   60,   61,  188,  187,   80,   80,   95,   88,   72,
       93,  183,  122,  191,  192,  172,   88,   62,   93,  123,

      165,  184,  124,  184,   88,  137,   94,   75,  130,  138,
      766,   61,  131,   88,   53,   95,   53,   88,  132,  139,
      766,  122,  198,  198,  766,   88,   62,   81,  123,   79,
       79,  124,  766,   88,  137,  766,   82,  130,  138,  766,
       83,  131,   88,   84,  171,  171,  766,  132,  139,  766,
       85,  766,   86,  185,  185,  766,   87,  766,   87,   87,
      189,  189,  199,  199,  766,   82,  200,  200,  146,   83,
      766,   87,   84,   87,   87,  190,  190,  766,   85,  766,
       86,   87,  766,   87,   87,  147,  766,   87,  148,   87,
       87,   87,  766,   87,   87,   93,   89,  146,  766,  149,

      766,   80,   80,  150,   90,  766,   91,  196,  197,  196,
       93,   92,  201,  147,  766,  202,  148,  170,  193,  321,
       93,  196,  203,  200,  200,   89,   93,  766,  149,  766,
       93,  766,  150,   90,  766,   91,  196,  197,  196,   92,
       87,  201,   87,   87,  202,  766,  170,  331,  331,  196,
      203,  766,   96,   97,   98,   99,  766,  330,  330,  100,
      101,  331,  331,  102,  459,  459,  103,  766,  460,  460,
      104,  105,  106,  460,  460,   87,  766,   87,   87,   93,
      766,   96,   97,   98,   99,  766,  766,  766,  100,  101,
      204,  766,  102,  766,   87,  103,   87,   87,  104,  105,

      106,   87,  766,   87,   87,  766,   87,  766,   87,   87,
      766,  766,  766,  107,   93,  766,  766,  108,  766,  204,
      766,  109,   87,  766,   87,   87,  162,  110,   87,  163,
       87,   87,   87,   93,   87,   87,  164,  206,  766,  766,
       93,  766,  107,  766,  220,   93,  108,  766,  205,   87,
      109,   87,   87,  766,  766,  162,  110,   87,  163,   87,
       87,   93,  766,  766,  164,  766,  206,   93,  766,  111,
      766,   93,  766,  220,  766,  207,   87,  205,   87,   87,
      112,  766,  113,  766,  766,  766,  114,  176,   93,  766,
      115,   87,  116,   87,   87,  766,   93,  766,  111,  177,

      766,  766,  766,  178,  207,  179,  766,  766,  240,  112,
      216,  113,  180,  766,  114,   93,  176,  766,  115,  766,
      116,  117,  766,  766,   87,   88,   87,   87,  177,  118,
       93,  178,  766,  179,  766,  119,  240,  766,  120,  216,
       87,  121,   87,   87,  766,   87,  766,   87,   87,  766,
      117,  766,  766,  208,   88,  209,  766,  210,  118,   87,
      766,   87,   87,   93,  119,  766,  120,  766,  211,  121,
       87,  234,   87,   87,  766,  212,  213,  766,  766,   93,
      766,  208,  249,  209,   93,  210,   87,  126,   87,   87,
      766,  766,  766,  766,  127,  128,  766,  211,   93,  234,

      129,  766,  766,  212,  213,   87,  766,   87,   87,   93,
      766,  249,  214,  766,  766,  766,  126,  766,   87,  241,
       87,   87,  215,  127,  128,   93,  766,  766,  129,   88,
      217,  218,  766,  133,  219,  766,   87,   88,   87,   87,
      766,  214,  766,  134,   93,  766,  766,  766,  241,  135,
      215,  766,  766,  136,  766,  766,  766,   93,   88,  217,
      218,  221,  133,  219,  766,  766,   88,   87,  766,   87,
       87,   87,  134,   87,   87,   93,  453,  135,  766,  454,
      766,  136,   87,  222,   87,   87,  455,  766,  766,  766,
      221,   87,  766,   87,   87,  140,  223,  766,   87,  141,

       87,   87,  766,  230,  224,  453,   93,  142,  454,  143,
       93,  144,  222,  766,  455,  145,  225,   87,  766,   87,
       87,   93,  766,  250,  140,  223,  766,  766,  141,  766,
       93,  230,  766,  224,  766,  766,  142,   93,  143,  144,
      766,  238,  766,  145,  151,  225,  239,  152,  766,  766,
      153,  154,  250,  766,  766,  766,   93,   88,   87,  766,
       87,   87,  155,  156,  766,  766,  766,  157,  766,   87,
      238,   87,   87,  151,  239,   87,  152,   87,   87,  153,
      154,   87,  766,   87,   87,   87,   88,   87,   87,  235,
      155,  156,  236,  766,  253,  157,   88,   93,  237,  158,

      456,  231,  766,  457,  232,  766,  159,  766,   93,  160,
      458,  233,   88,  766,   93,  242,  161,  766,  235,  766,
       93,  236,  766,  253,   93,   88,  766,  237,  158,  456,
      231,  766,  457,  232,  766,  159,  766,  160,  458,  233,
       88,  766,  766,  242,  161,   87,  766,   87,   87,   87,
      766,   87,   87,   87,  766,   87,   87,   87,  766,   87,
       87,  166,  766,  766,  167,  168,  766,  766,  243,  245,
      766,  766,  766,   87,  169,   87,   87,  766,  766,  766,
       87,  766,   87,   87,   93,  244,  246,  766,   93,  247,
      166,  766,   93,  167,  168,  766,   93,  243,  245,  766,

      248,  766,  169,   87,  766,   87,   87,   87,  766,   87,
       87,  766,   93,  244,  246,  766,  226,  766,  247,   93,
      766,   87,  227,   87,   87,  766,  766,  766,  228,  248,
       87,  766,   87,   87,  229,  766,  251,   87,  766,   87,
       87,  252,   93,  766,  766,  226,   93,   87,  766,   87,
       87,  227,   87,  766,   87,   87,   87,  228,   87,   87,
       93,  254,  229,  255,  251,   87,  766,   87,   87,   93,
      252,  766,   87,  766,   87,   87,   93,  256,  257,  259,
       87,  258,   87,   87,  260,  766,   93,  766,  766,  254,
      766,   93,  255,  264,  766,   93,  261,  262,   87,  766,

       87,   87,  265,  766,   93,  256,  257,  766,  259,  766,
      258,   93,  766,  260,   87,  766,   87,   87,  766,   93,
      766,  766,  264,  766,  261,   87,  262,   87,   87,  263,
      766,  265,   87,  766,   87,   87,  766,   93,  766,  266,
      267,   87,  766,   87,   87,  766,   87,  268,   87,   87,
      766,  766,  766,   93,  766,  269,  766,  263,  766,  270,
      271,  766,  766,  766,   93,  272,  766,  766,  266,  267,
      273,   93,   87,  766,   87,   87,  268,  766,  766,   87,
       93,   87,   87,  269,   87,   93,   87,   87,  270,  271,
      766,  766,  766,   87,  272,   87,   87,   87,  273,   87,

       87,   87,  766,   87,   87,  766,  274,  275,  766,  766,
      276,   93,  766,   87,  277,   87,   87,  280,   93,  766,
      766,  766,  766,   93,  766,   87,  766,   87,   87,  278,
      766,  766,   93,  766,  274,  275,   93,  766,  276,  766,
       93,  281,  766,  277,  279,   87,  280,   87,   87,  766,
      766,   87,   93,   87,   87,  766,  766,  766,  278,   87,
      766,   87,   87,  766,   93,   87,  766,   87,   87,  766,
      281,  283,  279,  766,  282,  766,  766,  284,  285,  286,
       87,  766,   87,   87,   93,  766,   87,  766,   87,   87,
       93,   87,  766,   87,   87,  766,  766,  766,   93,  302,

      283,  766,  282,  295,   93,  766,  284,  285,  286,   87,
      766,   87,   87,  766,  766,  766,  292,  296,  766,   93,
       87,  287,   87,   87,  288,   93,  766,  766,  302,  766,
       93,  766,  295,  289,  766,   87,  766,   87,   87,  290,
      291,  766,  766,  293,  292,  766,  296,  766,   93,  766,
      287,  294,   87,  288,   87,   87,  766,  766,  766,   93,
      297,  298,  289,  766,  766,  299,  766,  290,  291,   88,
      766,  766,  293,  766,   93,  300,  766,  766,  301,  294,
       87,  766,   87,   87,   87,  766,   87,   87,  766,  297,
      298,   93,  766,   87,  299,   87,   87,  766,   88,   87,

      304,   87,   87,  766,  300,  303,  301,  766,   87,  766,
       87,   87,  766,  305,   87,  766,   87,   87,  766,   93,
      308,  766,  766,   93,  766,   87,  766,   87,   87,  304,
      766,  306,   93,  309,  303,  307,  766,  766,   93,  766,
      310,  305,  766,  766,  311,  312,  766,   93,   87,  308,
       87,   87,  766,   93,   87,  766,   87,   87,   87,  306,
       87,   87,  309,  307,   93,   87,  766,   87,   87,  310,
      766,  766,  766,  311,  312,  766,  766,  313,  319,  314,
       87,  315,   87,   87,  766,  316,   87,   93,   87,   87,
      766,  322,  766,   93,  323,  317,   87,   93,   87,   87,

      766,  324,  766,  325,   93,  313,  766,  319,  314,  766,
      315,  318,  766,  766,  316,  320,  766,  766,  766,   93,
      322,  766,  766,  323,  317,   93,  195,  766,  766,  324,
      766,  325,  766,  766,  766,   93,  766,  326,  766,  318,
      327,  766,  766,  320,  198,  198,  766,  328,  766,  329,
      196,  332,  196,  200,  200,   87,  766,   87,   87,  196,
      766,  196,  766,  766,  196,  766,  326,  766,   87,  327,
       87,   87,  766,  196,  333,  328,  766,  329,  766,  196,
      332,  196,  766,   87,  334,   87,   87,  766,  196,  766,
      196,  337,  196,  766,   93,  335,   87,  766,   87,   87,

      766,  196,   87,  333,   87,   87,  766,   93,  336,  766,
      766,   87,  334,   87,   87,  766,  766,  766,  338,  766,
      337,  766,   93,  766,  335,  766,   87,  339,   87,   87,
       87,  766,   87,   87,  766,   93,  766,  336,  340,  766,
      766,   93,   87,  766,   87,   87,   87,  338,   87,   87,
       93,  766,   87,  341,   87,   87,  339,  766,  342,   87,
      343,   87,   87,  766,  766,   93,  766,  340,  766,   93,
      766,   87,  766,   87,   87,  766,  766,   87,  344,   87,
       87,   93,  341,  346,  766,   93,  766,  342,  766,  343,
      345,   93,   87,  766,   87,   87,  766,  766,   93,   87,

      766,   87,   87,  766,  766,  766,  766,  344,  347,  766,
       93,  766,  346,  349,  766,  348,   93,   87,  345,   87,
       87,   87,  766,   87,   87,   87,  766,   87,   87,  766,
       87,   93,   87,   87,  766,  766,  347,   87,   93,   87,
       87,  766,  349,  766,  348,  766,  350,   87,  353,   87,
       87,   87,  351,   87,   87,  352,   93,  766,  354,   87,
       93,   87,   87,  766,   93,   87,  766,   87,   87,   93,
      766,  766,  766,  358,  350,  766,   93,  353,  766,  766,
      351,  355,  356,  352,  766,  766,   93,  354,  766,   87,
       93,   87,   87,  766,  360,  357,  766,  766,   93,  766,

      766,  766,  358,   87,   93,   87,   87,  359,  766,  355,
      356,  766,   87,  766,   87,   87,   87,  766,   87,   87,
      766,  766,  360,  357,   87,  766,   87,   87,   93,   87,
      361,   87,   87,  766,  766,  766,  359,  362,  766,  766,
      766,  363,   93,  364,   87,  365,   87,   87,  766,  766,
       87,   93,   87,   87,  766,   93,  766,  766,   87,  361,
       87,   87,  368,   93,  366,  766,  362,  367,   93,  766,
      363,  766,  364,  766,  365,  766,   87,  766,   87,   87,
      766,  766,  766,   93,   87,  766,   87,   87,  766,   93,
      766,  368,  369,  366,  766,  766,  367,   93,  766,   87,

      370,   87,   87,   87,  766,   87,   87,  766,   87,  766,
       87,   87,  371,  766,  766,   93,   87,  766,   87,   87,
      766,  369,  372,   93,  373,   87,  766,   87,   87,  370,
       87,  766,   87,   87,  766,  766,  374,   87,   93,   87,
       87,  371,   93,   87,  766,   87,   87,   93,  766,  375,
      766,  372,  766,  373,   87,   93,   87,   87,  766,   87,
      376,   87,   87,  377,   93,  374,  766,  766,  378,   93,
      766,   87,  766,   87,   87,  766,   93,   87,  375,   87,
       87,  766,   93,  381,   87,  379,   87,   87,  376,  380,
      766,  766,  377,   93,  766,  766,  766,  378,   93,  766,

      382,   87,  766,   87,   87,  766,   87,  766,   87,   87,
       93,  766,  381,  379,  766,  383,   93,  380,   87,  766,
       87,   87,   87,   93,   87,   87,  766,  766,  766,  382,
      766,  386,   87,  766,   87,   87,   87,  384,   87,   87,
       93,  385,  766,  766,  383,   93,  766,   87,  766,   87,
       87,  389,  766,   87,  387,   87,   87,   93,  388,  766,
      386,   93,  766,  766,   87,  384,   87,   87,  766,  385,
      390,   93,  766,  391,   87,   93,   87,   87,  766,  394,
      389,   87,  387,   87,   87,  766,   93,  388,  766,  766,
      392,   87,   93,   87,   87,  766,  766,  393,   87,  390,

       87,   87,  391,   93,  766,  766,  766,   87,  394,   87,
       87,  766,  766,   93,  395,  766,  766,  766,  766,  392,
       93,   87,  766,   87,   87,  396,  393,  766,  766,   87,
       93,   87,   87,   87,  766,   87,   87,   93,  766,   87,
      766,   87,   87,  395,  766,  766,   93,   87,  397,   87,
       87,  400,  766,  766,  396,   87,  766,   87,   87,  766,
       93,  398,  766,  766,  399,  766,  766,  766,   93,  766,
      401,  402,   93,   87,  766,   87,   87,  397,   93,   87,
      400,   87,   87,  766,  766,   87,   93,   87,   87,  398,
      766,  766,  399,   87,   93,   87,   87,  766,  766,  401,

      402,   87,  403,   87,   87,  766,  766,  766,   87,  408,
       87,   87,   93,  766,  766,  766,  404,  766,   93,  766,
      405,  406,  766,   87,   93,   87,   87,  407,  766,  766,
      403,   87,   93,   87,   87,  766,  766,  409,  408,   87,
       93,   87,   87,  410,  404,  766,  766,   93,  766,  405,
      406,  766,  766,  766,  411,   87,  407,   87,   87,  766,
      766,   87,   93,   87,   87,  409,  766,  766,  412,  766,
       93,  766,  410,  413,   87,  766,   87,   87,   93,   87,
      766,   87,   87,  411,   87,  766,   87,   87,  415,  766,
      766,  766,  414,  766,   93,   87,  412,   87,   87,  766,

       93,  416,  413,  766,  766,  417,  766,  418,  766,  419,
      420,  766,   87,   93,   87,   87,  415,  766,   93,   87,
      414,   87,   87,   93,   87,  766,   87,   87,  766,  766,
      416,  766,  421,  417,   93,  766,  418,  419,   87,  420,
       87,   87,  766,  766,   87,  422,   87,   87,  766,  766,
       87,   93,   87,   87,  766,  766,  423,   87,   93,   87,
       87,  421,  766,   93,  766,   87,  426,   87,   87,   87,
      424,   87,   87,  766,  422,  425,   87,   93,   87,   87,
      427,  766,  766,   93,  423,  766,  766,  430,   87,   93,
       87,   87,  766,  766,  428,  426,   93,   87,  424,   87,

       87,  766,  766,  425,   93,  429,  766,  766,   93,  427,
       87,  766,   87,   87,  766,   93,  430,  766,   87,  431,
       87,   87,  428,   87,  432,   87,   87,   93,  766,   87,
      766,   87,   87,  429,  766,  766,   93,  433,  434,  766,
      766,  766,  766,  436,  766,  766,  766,  431,  766,   93,
      435,  766,   87,  432,   87,   87,   87,   93,   87,   87,
      766,   87,   93,   87,   87,  766,  433,  434,   93,  766,
      766,   87,  436,   87,   87,  440,  766,  437,  435,  766,
      766,   87,  438,   87,   87,  766,   87,  439,   87,   87,
       87,   93,   87,   87,  766,   93,   87,  441,   87,   87,

       93,  766,  766,  766,  440,  766,  437,  766,  766,  766,
       93,  438,  766,  766,  766,  443,  439,  442,  766,  766,
       93,   87,  444,   87,   87,   93,  441,  766,   87,   93,
       87,   87,  766,  766,   87,   93,   87,   87,  766,  766,
       87,  766,   87,   87,  443,  442,  445,  766,  446,  447,
      766,  444,  766,   87,  766,   87,   87,  766,  766,  766,
       93,   87,  766,   87,   87,  448,  766,   93,   87,  766,
       87,   87,  766,   93,  766,  445,  449,  446,  447,   93,
      451,  766,  766,   87,  450,   87,   87,   87,  766,   87,
       87,  766,   93,  766,  448,  331,  331,  766,  766,  766,

       93,  196,  766,  196,  766,  449,  766,   93,   87,  451,
       87,   87,  766,  450,  452,  196,   87,  766,   87,   87,
      461,   87,   93,   87,   87,   87,   93,   87,   87,  766,
      196,   87,  196,   87,   87,  766,   87,  462,   87,   87,
      766,  766,  452,  196,  766,  766,  463,   93,  464,  461,
      766,   87,  465,   87,   87,   93,   87,  766,   87,   87,
       93,  766,  766,  766,   93,  766,  462,  766,  466,  766,
       93,  766,  766,  766,  463,   93,  766,  464,  766,  467,
       87,  465,   87,   87,   87,  766,   87,   87,  766,  766,
       93,   87,  766,   87,   87,   93,  766,  466,   87,  766,

       87,   87,   87,  766,   87,   87,  766,  766,  467,   87,
      468,   87,   87,   87,  766,   87,   87,  766,  470,   93,
      766,  469,   87,   93,   87,   87,  766,  766,  766,  472,
       93,   87,  766,   87,   87,  766,  766,   93,  471,  468,
       87,   93,   87,   87,  766,  766,  766,  470,   93,  766,
      469,   87,   93,   87,   87,  766,  766,   87,  472,   87,
       87,   93,   87,  766,   87,   87,  471,  766,  766,   87,
       93,   87,   87,   87,  766,   87,   87,  766,   87,   93,
       87,   87,   87,  766,   87,   87,  766,  473,  766,   87,
       93,   87,   87,  766,  766,  766,   93,   87,  475,   87,

       87,   93,  766,   87,  474,   87,   87,  766,   93,  766,
      766,  766,   93,  476,  766,  473,  766,   93,  477,  766,
      766,   93,   87,  766,   87,   87,  766,  475,   93,  766,
      766,   87,  474,   87,   87,  766,   93,   87,  478,   87,
       87,  476,   93,  766,  766,  766,  477,   87,  766,   87,
       87,  766,  766,  766,   87,  480,   87,   87,  766,  766,
      766,   93,  479,  766,  766,  766,   87,  478,   87,   87,
       93,  766,   87,  481,   87,   87,   93,   87,  483,   87,
       87,  766,  766,  766,  480,   87,   93,   87,   87,  766,
      479,  766,   87,   93,   87,   87,  482,   87,  766,   87,

       87,  766,  481,  485,  766,   93,  486,  483,  766,  484,
      766,   93,   87,  766,   87,   87,   93,  766,  766,   87,
      487,   87,   87,  766,   93,  482,   87,  766,   87,   87,
      766,   93,  485,  766,  766,  486,   93,  484,   87,  488,
       87,   87,  766,  489,   87,  766,   87,   87,  766,  487,
      766,   93,   87,  766,   87,   87,  766,  766,   93,   87,
      490,   87,   87,  766,   87,   93,   87,   87,  488,  766,
      766,   87,  489,   87,   87,  766,   87,   93,   87,   87,
      766,  491,   87,   93,   87,   87,  766,  493,  766,  490,
      492,   93,   87,  766,   87,   87,  766,  766,   93,  494,

      766,  766,   87,   93,   87,   87,  766,  495,  766,  491,
       93,   87,  766,   87,   87,   93,  493,   87,  492,   87,
       87,   93,   87,  496,   87,   87,  766,  766,  494,  499,
       87,   93,   87,   87,  766,  498,  495,   87,  497,   87,
       87,   93,   87,  500,   87,   87,   87,  766,   87,   87,
       93,  496,  766,  766,  766,  766,   93,  766,  499,  766,
      501,   93,  502,  766,  498,   87,  497,   87,   87,   93,
      766,  503,  500,  766,  766,  766,   93,   87,  766,   87,
       87,   93,  766,  766,   87,   93,   87,   87,  766,  501,
       87,  502,   87,   87,  504,  505,  766,  766,   87,  503,

       87,   87,  766,  766,   93,   87,  506,   87,   87,   87,
      766,   87,   87,  766,  766,  507,   93,   87,  766,   87,
       87,  766,  504,   93,  505,   87,  766,   87,   87,   93,
      766,  766,  508,   87,  506,   87,   87,   93,   87,  766,
       87,   87,  766,  507,   93,  509,  766,  511,   93,  766,
      512,  510,  766,  766,  766,   87,   93,   87,   87,  766,
      766,  508,  766,  513,   93,   87,  766,   87,   87,  766,
      766,  766,   93,  766,  509,  511,  766,   93,  766,  512,
      510,  514,   87,  766,   87,   87,   87,  766,   87,   87,
       87,  513,   87,   87,   93,   87,  766,   87,   87,  766,

      766,  766,  515,   87,   93,   87,   87,  766,  766,  518,
      514,  516,  766,  766,  766,  519,  766,   87,  766,   87,
       87,   93,  766,  517,   87,   93,   87,   87,  766,   93,
       87,  515,   87,   87,   93,  766,  766,  766,  518,  766,
      516,  766,   93,  520,  519,   87,  527,   87,   87,  766,
       87,  517,   87,   87,  521,   87,   93,   87,   87,   87,
      766,   87,   87,   93,   87,  766,   87,   87,  522,   93,
      525,  526,  520,  766,  523,  527,  766,  766,  766,  524,
      528,  766,  521,  766,   93,   87,  766,   87,   87,   93,
       87,  766,   87,   87,   93,  766,  766,  522,   93,  525,

      526,  766,  523,   93,  766,  529,  530,  766,  524,  528,
       87,  766,   87,   87,   87,  766,   87,   87,   87,  766,
       87,   87,  766,   87,   93,   87,   87,  766,  766,   93,
       87,  766,   87,   87,  529,  530,  531,  766,  532,   87,
      766,   87,   87,  766,  766,  766,  766,  534,  766,   93,
      766,  533,  766,   93,  766,  536,  766,   93,   87,  535,
       87,   87,   93,  766,  766,  531,  766,  532,   87,   93,
       87,   87,  537,  766,  766,  766,  534,  766,   93,  533,
       87,  766,   87,   87,  536,  766,  766,  535,  766,   87,
      766,   87,   87,  766,  538,  766,  539,   93,  766,  766,

      766,  537,  766,   87,  766,   87,   87,   93,  766,  766,
       87,  766,   87,   87,   87,  766,   87,   87,  766,   93,
      540,  766,  766,  538,  766,  539,  541,  766,   93,   87,
      542,   87,   87,   87,  766,   87,   87,   87,  766,   87,
       87,  766,   93,   87,  766,   87,   87,  766,  540,   93,
      766,  544,  766,   93,   87,  541,   87,   87,  543,  542,
       87,  766,   87,   87,  766,  766,  545,   87,   93,   87,
       87,   87,   93,   87,   87,   87,   93,   87,   87,  766,
      544,  766,   93,  547,  766,  766,   87,  543,   87,   87,
      766,  766,  766,   93,  546,  545,  766,  766,  766,   93,

      766,  548,  549,  766,  766,   87,   93,   87,   87,  766,
       93,  766,  547,  766,   93,  766,   87,  766,   87,   87,
      766,  766,  546,  550,   87,   93,   87,   87,  766,  766,
      548,  549,  766,  766,  766,   87,  766,   87,   87,  766,
      766,  766,  552,  766,   93,  551,   87,  553,   87,   87,
      766,   87,  550,   87,   87,   93,   87,  766,   87,   87,
      766,  766,  766,   93,   87,  766,   87,   87,  766,  766,
      766,  552,  554,  551,   93,   87,  553,   87,   87,  766,
       87,  766,   87,   87,  766,   93,  460,  460,  766,  555,
       93,  556,  196,  766,  196,   93,  557,   87,  766,   87,

       87,  554,   87,   93,   87,   87,  196,   87,  766,   87,
       87,  766,  766,   87,   93,   87,   87,  766,  555,   93,
      556,  196,  558,  196,  766,  557,   87,  766,   87,   87,
      766,  766,  559,  766,  196,  766,   93,   87,  561,   87,
       87,   93,   87,  560,   87,   87,   93,   87,  766,   87,
       87,  558,   93,   87,  766,   87,   87,  766,  766,   87,
      559,   87,   87,  766,  766,   93,   87,  561,   87,   87,
       87,  560,   87,   87,  766,   87,   93,   87,   87,  766,
       87,   93,   87,   87,  766,   87,   93,   87,   87,  766,
      766,   87,   93,   87,   87,  766,  766,  766,   93,  766,

      766,   87,  766,   87,   87,   93,  766,  563,  766,   93,
      562,  766,  766,   87,   93,   87,   87,  766,   87,   93,
       87,   87,  766,   87,   93,   87,   87,  766,  766,  766,
       93,   87,  564,   87,   87,   87,  563,   87,   87,  562,
       93,  766,   87,  566,   87,   87,   87,  766,   87,   87,
      766,   87,   93,   87,   87,  766,   87,   93,   87,   87,
      564,  766,   93,   87,  565,   87,   87,  766,  569,  568,
       93,  567,  566,   87,   93,   87,   87,  766,  766,  571,
      766,   93,  570,  766,   87,   93,   87,   87,  766,  766,
       93,  766,  565,  766,  766,   93,  766,  569,  568,  567,

      766,  572,   93,   87,  766,   87,   87,  766,  571,  766,
      570,   87,   93,   87,   87,   87,  766,   87,   87,   87,
      766,   87,   87,   93,   87,  766,   87,   87,  766,   87,
      572,   87,   87,   87,  766,   87,   87,  766,   87,  766,
       87,   87,   93,  766,  574,  766,   87,  573,   87,   87,
       93,  766,  766,  575,   93,  766,  766,   87,   93,   87,
       87,  766,  766,   93,   87,  576,   87,   87,   93,  577,
      766,  766,   93,  574,  766,  766,  573,   93,  766,  766,
      578,   87,  575,   87,   87,   93,   87,  766,   87,   87,
       87,  766,   87,   87,  576,  766,   93,  579,  577,   87,

      766,   87,   87,   93,  766,   87,  766,   87,   87,  578,
      580,   87,  766,   87,   87,   87,  766,   87,   87,  582,
       93,  581,  584,  766,  766,   93,  579,  583,  766,   93,
       87,  766,   87,   87,   87,  766,   87,   87,   93,  580,
       87,  766,   87,   87,   93,  766,  585,  766,  582,  581,
       93,  584,  766,  766,   93,  766,  583,  766,   87,  586,
       87,   87,   87,  766,   87,   87,  766,  766,  766,   93,
      589,  766,  766,   93,   87,  585,   87,   87,  588,   93,
      766,   87,  766,   87,   87,  766,  766,   87,  586,   87,
       87,  587,   87,  766,   87,   87,  766,   93,  589,  592,

       87,   93,   87,   87,  766,  766,  766,  588,  590,  766,
      766,  593,   87,   93,   87,   87,  594,  766,  766,  587,
       93,  591,   87,  766,   87,   87,   93,  766,  592,  766,
       87,   93,   87,   87,  766,  766,  766,  590,  766,   93,
      593,  766,  766,  595,   87,  594,   87,   87,  766,  591,
      766,   93,  766,  596,   87,  597,   87,   87,  766,  766,
      598,   93,   87,  766,   87,   87,  766,  766,  766,   93,
      766,  595,  766,   87,  766,   87,   87,  766,  766,  766,
      599,  596,  600,   93,  597,  601,  766,  766,   87,  598,
       87,   87,   87,   93,   87,   87,   87,  766,   87,   87,

      602,   93,   87,  766,   87,   87,  766,  766,  766,  599,
      766,  600,   93,  766,  601,  766,  605,  766,   87,  766,
       87,   87,  766,  603,  766,  604,  766,   93,  766,  602,
      766,   93,  606,  766,   87,   93,   87,   87,  766,  766,
      766,   93,  766,  766,   87,  605,   87,   87,  766,  766,
      607,  603,   87,  604,   87,   87,   87,   93,   87,   87,
       87,  606,   87,   87,   87,  766,   87,   87,   87,  608,
       87,   87,  609,   93,  766,   87,  610,   87,   87,  607,
      766,  766,   87,   93,   87,   87,  766,  766,  766,  611,
       87,   93,   87,   87,   87,   93,   87,   87,  608,   93,

      766,  609,  766,   93,  766,  610,  612,   93,   87,  614,
       87,   87,  766,  766,   93,  766,  613,   87,  611,   87,
       87,   93,  766,   87,  615,   87,   87,  766,  766,   93,
      766,  616,  766,   93,  612,  766,  766,   87,  614,   87,
       87,  617,  766,   87,  613,   87,   87,   93,   87,  766,
       87,   87,  766,  615,  766,   87,   93,   87,   87,  766,
      616,   87,   93,   87,   87,  766,  766,  766,  618,  619,
      617,   87,  766,   87,   87,  766,   93,   87,  621,   87,
       87,   87,   93,   87,   87,  620,  766,   93,   87,  622,
       87,   87,  766,  766,   93,  766,  618,  766,  619,   87,

       93,   87,   87,   87,  766,   87,   87,  621,  766,  766,
       93,  766,  623,  620,  766,  766,   93,  766,  622,   87,
       93,   87,   87,   87,  624,   87,   87,   93,   87,  766,
       87,   87,   87,  766,   87,   87,  766,  766,   93,  625,
      623,  766,   93,   87,  766,   87,   87,  628,   87,  766,
       87,   87,  766,  624,  627,  766,  626,   87,   93,   87,
       87,   87,   93,   87,   87,  766,  766,   93,  625,  766,
      766,   93,  766,  629,  630,   87,  628,   87,   87,  766,
      766,  766,   93,  627,  626,  766,  631,   93,   87,  632,
       87,   87,   87,  766,   87,   87,   93,  766,  766,  766,

       93,  629,   87,  630,   87,   87,  766,  766,   87,  766,
       87,   87,  766,  766,   93,  631,  766,  632,   87,  766,
       87,   87,  766,  633,  635,  634,   87,   93,   87,   87,
       87,   93,   87,   87,  766,  766,   87,  766,   87,   87,
      766,   93,   87,  766,   87,   87,  766,   93,  766,  636,
      638,  633,  766,  635,  634,  766,   87,   93,   87,   87,
       87,  637,   87,   87,   87,   93,   87,   87,   87,   93,
       87,   87,  766,  766,  766,   93,  766,  636,  766,  638,
      766,   93,  766,   87,  641,   87,   87,  766,  766,  637,
      640,   87,  639,   87,   87,   93,  766,  766,  766,   93,

      766,  766,   87,   93,   87,   87,  766,   93,  642,   87,
      766,   87,   87,  641,   87,  766,   87,   87,  766,  640,
      639,  766,   93,  766,   87,  644,   87,   87,  766,  766,
       93,   87,  643,   87,   87,  766,   87,  642,   87,   87,
       87,   93,   87,   87,  645,  766,  766,   87,   93,   87,
       87,  766,  648,   93,  644,  646,  766,  766,  766,   87,
      643,   87,   87,   93,  766,  647,  649,  766,  766,  766,
       93,   87,  645,   87,   87,   93,  766,  766,  766,   93,
      766,  648,   87,  646,   87,   87,   93,  650,   87,  766,
       87,   87,  766,  647,   87,  649,   87,   87,   93,   87,

      652,   87,   87,   87,  766,   87,   87,  766,  766,  766,
       93,  766,  651,  766,  653,  766,  650,  654,  766,  655,
       87,   93,   87,   87,  766,  766,  766,   93,   87,  652,
       87,   87,   87,   93,   87,   87,  766,  766,   93,  766,
      651,  766,   93,  653,  766,  766,  654,  766,  655,  656,
       87,  766,   87,   87,   87,  766,   87,   87,  657,   93,
      766,   87,  658,   87,   87,  766,   87,   93,   87,   87,
      766,   93,   87,  659,   87,   87,   87,  656,   87,   87,
       87,  660,   87,   87,  766,  766,  766,  657,  766,   93,
      766,  658,   87,   93,   87,   87,  663,  766,  766,  662,

       93,  661,  659,  766,   87,   93,   87,   87,  766,  766,
      660,   93,  766,  766,   87,   93,   87,   87,   87,   93,
       87,   87,  766,  664,  766,  663,  766,  766,  662,  661,
       87,   93,   87,   87,   87,  665,   87,   87,  766,  766,
      766,  667,   87,   93,   87,   87,  766,  766,  766,  668,
      766,  664,   87,   93,   87,   87,  766,   93,   87,  766,
       87,   87,   87,  665,   87,   87,  766,  666,  766,   93,
      667,  766,   87,   93,   87,   87,  766,   87,  668,   87,
       87,   93,   87,  766,   87,   87,   87,  766,   87,   87,
      766,   93,  669,  766,  766,  666,   87,   93,   87,   87,

       87,   93,   87,   87,  766,   87,  766,   87,   87,  766,
       87,   93,   87,   87,  671,   87,   93,   87,   87,  766,
      669,   93,  766,  766,   87,   93,   87,   87,  670,  766,
       87,  673,   87,   87,  766,   93,  672,  766,   87,   93,
       87,   87,  766,  671,   93,   87,  766,   87,   87,   93,
      766,  766,  766,  766,   93,   87,  670,   87,   87,  766,
      673,  674,  766,   93,  672,   87,  766,   87,   87,   93,
      675,  676,   87,  766,   87,   87,   87,   93,   87,   87,
      766,  766,  766,   87,   93,   87,   87,  766,  766,  674,
      677,  766,  766,  766,   93,  678,  766,  766,  766,  675,

      676,  766,  679,  766,   93,   87,  766,   87,   87,  766,
       87,   93,   87,   87,   87,   93,   87,   87,  766,  677,
      766,  680,   93,   87,  678,   87,   87,   87,  766,   87,
       87,  679,   87,  766,   87,   87,  766,  766,  766,   87,
      766,   87,   87,   87,   93,   87,   87,  766,  681,   93,
      680,  682,  766,   93,   87,  766,   87,   87,   87,  766,
       87,   87,   93,  766,  766,   87,   93,   87,   87,  766,
      766,   93,   87,  766,   87,   87,  766,  681,   93,  683,
      682,  766,   93,  766,  684,   87,  766,   87,   87,   87,
      766,   87,   87,   93,  766,  766,   87,   93,   87,   87,

      766,  766,  766,   87,   93,   87,   87,  766,  683,  766,
      685,   93,   87,  684,   87,   87,   87,  766,   87,   87,
      766,  766,  766,  766,   93,  766,  686,  766,   93,   87,
      687,   87,   87,  766,   87,   93,   87,   87,  766,  685,
      766,  689,   93,  766,   87,  688,   87,   87,  766,  766,
       87,   93,   87,   87,  686,   93,  766,  766,  690,  687,
       87,  766,   87,   87,   87,  766,   87,   87,   93,  689,
      766,  766,  766,   93,  688,  691,   87,  766,   87,   87,
      766,  766,  766,   93,  766,  766,  766,  690,   87,   93,
       87,   87,  766,  692,  766,   87,  766,   87,   87,   93,

      766,  766,  766,   93,  691,  693,  766,   87,  766,   87,
       87,   87,  766,   87,   87,   93,  766,  694,  695,  766,
      766,  692,  696,   87,  766,   87,   87,   93,   87,  766,
       87,   87,  766,  693,   93,  697,  766,  766,   87,  698,
       87,   87,  766,  766,  766,  694,   93,  695,  766,  766,
       93,  696,   87,  766,   87,   87,   87,  699,   87,   87,
      766,  766,   93,   87,  697,   87,   87,   93,  698,  766,
      766,   87,  701,   87,   87,  766,  766,   93,   87,  702,
       87,   87,  766,  766,   87,  699,   87,   87,  700,  766,
      704,   93,  766,  766,  766,   93,  766,   87,  766,   87,

       87,  701,   93,   87,  766,   87,   87,  703,  702,   87,
       93,   87,   87,  766,  766,  766,  700,   93,   87,  704,
       87,   87,   87,   93,   87,   87,  705,   87,  766,   87,
       87,  706,  766,  766,  766,  703,   93,   87,  766,   87,
       87,   87,   93,   87,   87,  708,  766,  707,   93,   87,
      766,   87,   87,   87,  705,   87,   87,   93,  766,  766,
      706,   93,  709,  766,  710,  711,   93,  766,  766,   87,
      712,   87,   87,  766,  708,  707,   93,  766,  766,   87,
       93,   87,   87,   87,  766,   87,   87,   87,   93,   87,
       87,  709,   93,  710,  711,   87,  766,   87,   87,  712,

       87,  766,   87,   87,   87,  766,   87,   87,   93,  766,
      766,  766,   87,  713,   87,   87,  766,  766,   93,  714,
      766,   87,   93,   87,   87,  766,   93,   87,  716,   87,
       87,  715,  766,  766,   93,   87,  766,   87,   87,   93,
      766,  713,   87,   93,   87,   87,  766,  766,  714,  766,
      717,   93,   87,  720,   87,   87,  718,  716,  719,  715,
       93,   87,  766,   87,   87,   87,   93,   87,   87,  766,
      766,  766,  721,   87,   93,   87,   87,   87,  717,   87,
       87,   93,  720,  766,  718,  722,   87,  719,   87,   87,
       87,   93,   87,   87,   87,  766,   87,   87,  766,  724,

       93,  721,  766,   87,   93,   87,   87,  723,   87,  766,
       87,   87,   93,  766,  722,  726,   93,  766,  766,   87,
      725,   87,   87,  727,   87,   93,   87,   87,  724,   93,
      766,  766,  766,   93,   87,  723,   87,   87,   87,  766,
       87,   87,   93,   87,  726,   87,   87,   93,  725,  728,
      766,  766,  727,   87,  730,   87,   87,  766,   93,  729,
      766,  766,   87,   93,   87,   87,   87,  766,   87,   87,
      766,  766,   87,   93,   87,   87,  766,   93,  728,  766,
      766,  766,   93,  730,   87,  766,   87,   87,  729,  766,
      766,   87,   93,   87,   87,  766,   87,  731,   87,   87,

       87,   93,   87,   87,   87,   93,   87,   87,  732,  766,
      766,   93,   87,  733,   87,   87,  735,   87,  766,   87,
       87,  766,  766,   93,  766,  731,   87,  734,   87,   87,
       93,  766,  766,  766,  736,   93,  732,  737,  766,   93,
      766,  733,  766,   93,  766,  735,  738,   87,  766,   87,
       87,   93,  766,  766,  766,  734,   93,   87,  766,   87,
       87,   87,  736,   87,   87,   93,  737,   87,  766,   87,
       87,   87,  766,   87,   87,  738,   87,  766,   87,   87,
      766,  766,  740,  766,  766,   87,   93,   87,   87,  766,
      766,   87,  739,   87,   87,   87,   93,   87,   87,  741,

       93,   87,  766,   87,   87,   87,   93,   87,   87,  766,
       93,  740,  766,  766,   87,   93,   87,   87,  766,  766,
      739,  766,  766,   87,   93,   87,   87,  742,  741,  744,
       93,  766,  743,   87,   93,   87,   87,  766,  766,   87,
       93,   87,   87,   87,   93,   87,   87,   87,  766,   87,
       87,  766,  766,   93,   87,  742,   87,   87,  744,  766,
      743,  766,   93,  745,   87,  766,   87,   87,   87,  766,
       87,   87,   93,  766,  766,  766,  766,  746,   93,  766,
      766,  766,   93,  748,  766,   87,   93,   87,   87,  766,
      766,  745,  766,   93,  766,  747,   87,  749,   87,   87,

      766,  766,  766,   93,  766,  746,  766,   93,  750,  766,
      766,   87,  748,   87,   87,   87,  766,   87,   87,   87,
      766,   87,   87,  747,   93,  766,  749,  751,   87,  766,
       87,   87,  766,  766,  766,   93,   87,  750,   87,   87,
      766,  766,   87,  766,   87,   87,   87,  766,   87,   87,
       93,  752,  766,  766,   93,  766,  751,   87,   93,   87,
       87,   87,  766,   87,   87,  766,  766,   93,   87,  753,
       87,   87,  766,  754,  755,   93,   87,  766,   87,   87,
      752,   93,  766,  766,   87,   93,   87,   87,   87,  756,
       87,   87,   87,  766,   87,   87,   93,  766,  753,  766,

       93,  766,  754,  755,  757,  766,  762,   93,   87,  766,
       87,   87,  766,  766,   87,   93,   87,   87,  756,   87,
      758,   87,   87,   93,  766,  766,   87,   93,   87,   87,
      766,   93,  766,  757,  766,  762,   87,  759,   87,   87,
      766,   87,  760,   87,   87,  766,  766,   93,   87,  758,
       87,   87,  763,   93,  766,  761,  766,  764,   93,  766,
       87,  766,   87,   87,  766,   93,  759,   87,  766,   87,
       87,  760,  766,  766,  766,   93,  765,  766,  766,  766,
       93,  763,   87,  761,   87,   87,  764,   93,   87,  766,
       87,   87,  766,  766,  766,  766,  766,  766,  766,   93,

      766,  766,  766,  766,  766,  765,   93,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,   93,  766,  766,  766,  766,  766,   93,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   88,  766,   88,   88,   88,   88,
      171,  171,  173,  173,  766,  173,  766,  173,  173,  173,
      173,  181,  181,  766,  181,  181,  181,  181,  181,  181,
      182,  766,  182,  182,  182,  766,  766,  182,  182,  194,

      194,   13,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766
    } ;

static const flex_int16_t yy_chk[5971] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        3,    4,    9,   15,   22,   22,    9,   10,   47,   47,
        9,   10,    9,    9,    9,   10,   11,   10,   10,   10,
       11,  321,   11,   11,   11,   11,   11,   19,   21,   61,

       21,   21,   59,   59,   19,   50,  188,    3,    4,    7,
        7,   11,   58,    7,   58,   15,  183,    7,   50,    7,
        7,    7,    7,    7,   87,   11,   19,   33,   61,   33,
       33,   66,   66,   19,   31,   12,   31,   31,    7,   12,
       11,   12,   12,   12,   12,   12,   31,   50,   68,   77,
       68,   25,    7,   25,   25,   62,   69,   69,   75,   43,
       12,   43,   43,   74,   71,   72,   33,    7,    8,    8,
       73,   43,    8,   31,   12,   31,    8,   25,    8,    8,
        8,    8,    8,   63,   62,   78,   78,   25,   30,   12,
       25,   55,   30,   71,   72,   46,   30,    8,   43,   30,

       43,  184,   30,  184,   34,   36,   25,   16,   34,   36,
       13,    8,   34,   36,    6,   25,    5,   30,   34,   36,
        0,   30,   81,   81,    0,   30,    8,   23,   30,   23,
       23,   30,    0,   34,   36,    0,   23,   34,   36,    0,
       23,   34,   36,   23,  172,  172,    0,   34,   36,    0,
       23,    0,   23,  185,  185,    0,   38,    0,   38,   38,
      189,  189,   82,   82,    0,   23,   82,   82,   38,   23,
        0,   88,   23,   88,   88,  190,  190,    0,   23,    0,
       23,   24,    0,   24,   24,   38,    0,   39,   38,   39,
       39,   45,    0,   45,   45,   38,   24,   38,    0,   39,

        0,   80,   80,   39,   24,    0,   24,   80,   80,   80,
       88,   24,   86,   38,    0,   86,   38,   45,  193,  193,
       24,   80,   86,  199,  199,   24,   39,    0,   39,    0,
       45,    0,   39,   24,    0,   24,   80,   80,   80,   24,
       26,   86,   26,   26,   86,    0,   45,  330,  330,   80,
       86,    0,   26,   26,   26,   26,    0,  197,  197,   26,
       26,  197,  197,   26,  332,  332,   26,    0,  332,  332,
       26,   26,   26,  459,  459,   89,    0,   89,   89,   26,
        0,   26,   26,   26,   26,    0,    0,    0,   26,   26,
       89,    0,   26,    0,   92,   26,   92,   92,   26,   26,

       26,   27,    0,   27,   27,    0,   42,    0,   42,   42,
        0,    0,    0,   27,   89,    0,    0,   27,    0,   89,
        0,   27,   91,    0,   91,   91,   42,   27,   90,   42,
       90,   90,  100,   92,  100,  100,   42,   91,    0,    0,
       27,    0,   27,    0,  100,   42,   27,    0,   90,   94,
       27,   94,   94,    0,    0,   42,   27,   28,   42,   28,
       28,   91,    0,    0,   42,    0,   91,   90,    0,   28,
        0,  100,    0,  100,    0,   94,  110,   90,  110,  110,
       28,    0,   28,    0,    0,    0,   28,   51,   94,    0,
       28,   98,   28,   98,   98,    0,   28,    0,   28,   51,

        0,    0,    0,   51,   94,   51,    0,    0,  110,   28,
       98,   28,   51,    0,   28,  110,   51,    0,   28,    0,
       28,   29,    0,    0,   95,   29,   95,   95,   51,   29,
       98,   51,    0,   51,    0,   29,  110,    0,   29,   98,
      107,   29,  107,  107,    0,   96,    0,   96,   96,    0,
       29,    0,    0,   95,   29,   95,    0,   95,   29,  117,
        0,  117,  117,   95,   29,    0,   29,    0,   96,   29,
       32,  107,   32,   32,    0,   96,   96,    0,    0,  107,
        0,   95,  117,   95,   96,   95,   97,   32,   97,   97,
        0,    0,    0,    0,   32,   32,    0,   96,  117,  107,

       32,    0,    0,   96,   96,  111,    0,  111,  111,   32,
        0,  117,   97,    0,    0,    0,   32,    0,   99,  111,
       99,   99,   97,   32,   32,   97,    0,    0,   32,   35,
       99,   99,    0,   35,   99,    0,  101,   35,  101,  101,
        0,   97,    0,   35,  111,    0,    0,    0,  111,   35,
       97,    0,    0,   35,    0,    0,    0,   99,   35,   99,
       99,  101,   35,   99,    0,    0,   35,  105,    0,  105,
      105,  102,   35,  102,  102,  101,  325,   35,    0,  325,
        0,   35,   37,  102,   37,   37,  325,    0,    0,    0,
      101,  103,    0,  103,  103,   37,  102,    0,  118,   37,

      118,  118,    0,  105,  103,  325,  105,   37,  325,   37,
      102,   37,  102,    0,  325,   37,  103,  109,    0,  109,
      109,   37,    0,  118,   37,  102,    0,    0,   37,    0,
      103,  105,    0,  103,    0,    0,   37,  118,   37,   37,
        0,  109,    0,   37,   40,  103,  109,   40,    0,    0,
       40,   40,  118,    0,    0,    0,  109,   40,  126,    0,
      126,  126,   40,   40,    0,    0,    0,   40,    0,  121,
      109,  121,  121,   40,  109,  108,   40,  108,  108,   40,
       40,  106,    0,  106,  106,  112,   40,  112,  112,  108,
       40,   40,  108,    0,  121,   40,   41,  126,  108,   41,

      329,  106,    0,  329,  106,    0,   41,    0,  121,   41,
      329,  106,   41,    0,  108,  112,   41,    0,  108,    0,
      106,  108,    0,  121,  112,   41,    0,  108,   41,  329,
      106,    0,  329,  106,    0,   41,    0,   41,  329,  106,
       41,    0,    0,  112,   41,   44,    0,   44,   44,  133,
        0,  133,  133,  113,    0,  113,  113,  114,    0,  114,
      114,   44,    0,    0,   44,   44,    0,    0,  113,  114,
        0,    0,    0,  115,   44,  115,  115,    0,    0,    0,
      116,    0,  116,  116,   44,  113,  114,    0,  133,  115,
       44,    0,  113,   44,   44,    0,  114,  113,  114,    0,

      116,    0,   44,  104,    0,  104,  104,  119,    0,  119,
      119,    0,  115,  113,  114,    0,  104,    0,  115,  116,
        0,  120,  104,  120,  120,    0,    0,    0,  104,  116,
      122,    0,  122,  122,  104,    0,  119,  123,    0,  123,
      123,  120,  104,    0,    0,  104,  119,  124,    0,  124,
      124,  104,  127,    0,  127,  127,  125,  104,  125,  125,
      120,  122,  104,  123,  119,  128,    0,  128,  128,  122,
      120,    0,  129,    0,  129,  129,  123,  124,  124,  127,
      131,  125,  131,  131,  128,    0,  124,    0,    0,  122,
        0,  127,  123,  131,    0,  125,  128,  129,  130,    0,

      130,  130,  131,    0,  128,  124,  124,    0,  127,    0,
      125,  129,    0,  128,  132,    0,  132,  132,    0,  131,
        0,    0,  131,    0,  128,  135,  129,  135,  135,  130,
        0,  131,  134,    0,  134,  134,    0,  130,    0,  132,
      132,  137,    0,  137,  137,    0,  136,  134,  136,  136,
        0,    0,    0,  132,    0,  135,    0,  130,    0,  136,
      136,    0,    0,    0,  135,  137,    0,    0,  132,  132,
      137,  134,  138,    0,  138,  138,  134,    0,    0,  139,
      137,  139,  139,  135,  141,  136,  141,  141,  136,  136,
        0,    0,    0,  140,  137,  140,  140,  142,  137,  142,

      142,  144,    0,  144,  144,    0,  138,  138,    0,    0,
      139,  138,    0,  143,  140,  143,  143,  144,  139,    0,
        0,    0,    0,  141,    0,  145,    0,  145,  145,  143,
        0,    0,  140,    0,  138,  138,  142,    0,  139,    0,
      144,  145,    0,  140,  143,  146,  144,  146,  146,    0,
        0,  147,  143,  147,  147,    0,    0,    0,  143,  149,
        0,  149,  149,    0,  145,  148,    0,  148,  148,    0,
      145,  147,  143,    0,  146,    0,    0,  147,  148,  149,
      151,    0,  151,  151,  146,    0,  156,    0,  156,  156,
      147,  153,    0,  153,  153,    0,    0,    0,  149,  156,

      147,    0,  146,  153,  148,    0,  147,  148,  149,  150,
        0,  150,  150,    0,    0,    0,  151,  153,    0,  151,
      152,  150,  152,  152,  150,  156,    0,    0,  156,    0,
      153,    0,  153,  150,    0,  154,    0,  154,  154,  150,
      150,    0,    0,  152,  151,    0,  153,    0,  150,    0,
      150,  152,  159,  150,  159,  159,    0,    0,    0,  152,
      154,  155,  150,    0,    0,  155,    0,  150,  150,  155,
        0,    0,  152,    0,  154,  155,    0,    0,  155,  152,
      157,    0,  157,  157,  158,    0,  158,  158,    0,  154,
      155,  159,    0,  161,  155,  161,  161,    0,  155,  160,

      158,  160,  160,    0,  155,  157,  155,    0,  162,    0,
      162,  162,    0,  158,  163,    0,  163,  163,    0,  157,
      161,    0,    0,  158,    0,  164,    0,  164,  164,  158,
        0,  160,  161,  162,  157,  160,    0,    0,  160,    0,
      163,  158,    0,    0,  164,  164,    0,  162,  165,  161,
      165,  165,    0,  163,  166,    0,  166,  166,  169,  160,
      169,  169,  162,  160,  164,  167,    0,  167,  167,  163,
        0,    0,    0,  164,  164,    0,    0,  165,  169,  166,
      168,  167,  168,  168,    0,  167,  170,  165,  170,  170,
        0,  194,    0,  166,  194,  168,  171,  169,  171,  171,

        0,  194,    0,  194,  167,  165,    0,  169,  166,    0,
      167,  168,    0,    0,  167,  170,    0,    0,    0,  168,
      194,    0,    0,  194,  168,  170,  195,    0,    0,  194,
        0,  194,    0,    0,    0,  171,    0,  195,    0,  168,
      195,    0,    0,  170,  198,  198,    0,  195,    0,  195,
      198,  198,  198,  200,  200,  204,    0,  204,  204,  200,
        0,  200,    0,    0,  198,    0,  195,    0,  207,  195,
      207,  207,    0,  200,  204,  195,    0,  195,    0,  198,
      198,  198,    0,  205,  204,  205,  205,    0,  200,    0,
      200,  207,  198,    0,  204,  205,  206,    0,  206,  206,

        0,  200,  208,  204,  208,  208,    0,  207,  206,    0,
        0,  209,  204,  209,  209,    0,    0,    0,  208,    0,
      207,    0,  205,    0,  205,    0,  210,  209,  210,  210,
      211,    0,  211,  211,    0,  206,    0,  206,  210,    0,
        0,  208,  212,    0,  212,  212,  213,  208,  213,  213,
      209,    0,  214,  211,  214,  214,  209,    0,  212,  215,
      213,  215,  215,    0,    0,  210,    0,  210,    0,  211,
        0,  216,    0,  216,  216,    0,    0,  217,  214,  217,
      217,  212,  211,  216,    0,  213,    0,  212,    0,  213,
      215,  214,  218,    0,  218,  218,    0,    0,  215,  219,

        0,  219,  219,    0,    0,    0,    0,  214,  217,    0,
      216,    0,  216,  219,    0,  218,  217,  220,  215,  220,
      220,  221,    0,  221,  221,  222,    0,  222,  222,    0,
      223,  218,  223,  223,    0,    0,  217,  224,  219,  224,
      224,    0,  219,    0,  218,    0,  220,  227,  223,  227,
      227,  225,  221,  225,  225,  222,  220,    0,  224,  226,
      221,  226,  226,    0,  222,  229,    0,  229,  229,  223,
        0,    0,    0,  227,  220,    0,  224,  223,    0,    0,
      221,  225,  225,  222,    0,    0,  227,  224,    0,  228,
      225,  228,  228,    0,  229,  226,    0,    0,  226,    0,

        0,    0,  227,  230,  229,  230,  230,  228,    0,  225,
      225,    0,  231,    0,  231,  231,  232,    0,  232,  232,
        0,    0,  229,  226,  233,    0,  233,  233,  228,  234,
      230,  234,  234,    0,    0,    0,  228,  231,    0,    0,
        0,  232,  230,  233,  235,  234,  235,  235,    0,    0,
      236,  231,  236,  236,    0,  232,    0,    0,  238,  230,
      238,  238,  236,  233,  235,    0,  231,  235,  234,    0,
      232,    0,  233,    0,  234,    0,  237,    0,  237,  237,
        0,    0,    0,  235,  239,    0,  239,  239,    0,  236,
        0,  236,  237,  235,    0,    0,  235,  238,    0,  240,

      239,  240,  240,  241,    0,  241,  241,    0,  242,    0,
      242,  242,  240,    0,    0,  237,  243,    0,  243,  243,
        0,  237,  241,  239,  242,  244,    0,  244,  244,  239,
      245,    0,  245,  245,    0,    0,  243,  246,  240,  246,
      246,  240,  241,  247,    0,  247,  247,  242,    0,  244,
        0,  241,    0,  242,  248,  243,  248,  248,    0,  249,
      245,  249,  249,  246,  244,  243,    0,    0,  247,  245,
        0,  250,    0,  250,  250,    0,  246,  251,  244,  251,
      251,    0,  247,  250,  252,  248,  252,  252,  245,  249,
        0,    0,  246,  248,    0,    0,    0,  247,  249,    0,

      252,  253,    0,  253,  253,    0,  254,    0,  254,  254,
      250,    0,  250,  248,    0,  253,  251,  249,  255,    0,
      255,  255,  256,  252,  256,  256,    0,    0,    0,  252,
        0,  255,  257,    0,  257,  257,  258,  254,  258,  258,
      253,  254,    0,    0,  253,  254,    0,  259,    0,  259,
      259,  258,    0,  262,  256,  262,  262,  255,  257,    0,
      255,  256,    0,    0,  263,  254,  263,  263,    0,  254,
      259,  257,    0,  259,  260,  258,  260,  260,    0,  262,
      258,  261,  256,  261,  261,    0,  259,  257,    0,    0,
      260,  264,  262,  264,  264,    0,    0,  261,  265,  259,

      265,  265,  259,  263,    0,    0,    0,  266,  262,  266,
      266,    0,    0,  260,  265,    0,    0,    0,    0,  260,
      261,  267,    0,  267,  267,  266,  261,    0,    0,  268,
      264,  268,  268,  269,    0,  269,  269,  265,    0,  270,
        0,  270,  270,  265,    0,    0,  266,  271,  267,  271,
      271,  270,    0,    0,  266,  272,    0,  272,  272,    0,
      267,  268,    0,    0,  269,    0,    0,    0,  268,    0,
      271,  272,  269,  273,    0,  273,  273,  267,  270,  274,
      270,  274,  274,    0,    0,  275,  271,  275,  275,  268,
        0,    0,  269,  277,  272,  277,  277,    0,    0,  271,

      272,  276,  273,  276,  276,    0,    0,    0,  278,  277,
      278,  278,  273,    0,    0,    0,  275,    0,  274,    0,
      276,  276,    0,  279,  275,  279,  279,  276,    0,    0,
      273,  280,  277,  280,  280,    0,    0,  278,  277,  281,
      276,  281,  281,  279,  275,    0,    0,  278,    0,  276,
      276,    0,    0,    0,  280,  283,  276,  283,  283,    0,
        0,  282,  279,  282,  282,  278,    0,    0,  281,    0,
      280,    0,  279,  282,  284,    0,  284,  284,  281,  286,
        0,  286,  286,  280,  285,    0,  285,  285,  283,    0,
        0,    0,  282,    0,  283,  287,  281,  287,  287,    0,

      282,  284,  282,    0,    0,  284,    0,  285,    0,  286,
      287,    0,  288,  284,  288,  288,  283,    0,  286,  289,
      282,  289,  289,  285,  290,    0,  290,  290,    0,    0,
      284,    0,  288,  284,  287,    0,  285,  286,  291,  287,
      291,  291,    0,    0,  292,  289,  292,  292,    0,    0,
      293,  288,  293,  293,    0,    0,  290,  294,  289,  294,
      294,  288,    0,  290,    0,  295,  293,  295,  295,  297,
      291,  297,  297,    0,  289,  292,  296,  291,  296,  296,
      295,    0,    0,  292,  290,    0,    0,  297,  298,  293,
      298,  298,    0,    0,  295,  293,  294,  299,  291,  299,

      299,    0,    0,  292,  295,  296,    0,    0,  297,  295,
      300,    0,  300,  300,    0,  296,  297,    0,  301,  298,
      301,  301,  295,  302,  299,  302,  302,  298,    0,  303,
        0,  303,  303,  296,    0,    0,  299,  300,  301,    0,
        0,    0,    0,  303,    0,    0,    0,  298,    0,  300,
      301,    0,  304,  299,  304,  304,  305,  301,  305,  305,
        0,  307,  302,  307,  307,    0,  300,  301,  303,    0,
        0,  306,  303,  306,  306,  307,    0,  304,  301,    0,
        0,  308,  305,  308,  308,    0,  309,  306,  309,  309,
      310,  304,  310,  310,    0,  305,  311,  308,  311,  311,

      307,    0,    0,    0,  307,    0,  304,    0,    0,    0,
      306,  305,    0,    0,    0,  310,  306,  309,    0,    0,
      308,  312,  311,  312,  312,  309,  308,    0,  313,  310,
      313,  313,    0,    0,  314,  311,  314,  314,    0,    0,
      315,    0,  315,  315,  310,  309,  312,    0,  313,  314,
        0,  311,    0,  316,    0,  316,  316,    0,    0,    0,
      312,  318,    0,  318,  318,  315,    0,  313,  317,    0,
      317,  317,    0,  314,    0,  312,  316,  313,  314,  315,
      318,    0,    0,  319,  317,  319,  319,  320,    0,  320,
      320,    0,  316,    0,  315,  331,  331,    0,    0,    0,

      318,  331,    0,  331,    0,  316,    0,  317,  333,  318,
      333,  333,    0,  317,  319,  331,  335,    0,  335,  335,
      333,  334,  319,  334,  334,  336,  320,  336,  336,    0,
      331,  339,  331,  339,  339,    0,  337,  334,  337,  337,
        0,    0,  319,  331,    0,    0,  335,  333,  336,  333,
        0,  338,  337,  338,  338,  335,  340,    0,  340,  340,
      334,    0,    0,    0,  336,    0,  334,    0,  338,    0,
      339,    0,    0,    0,  335,  337,    0,  336,    0,  340,
      341,  337,  341,  341,  342,    0,  342,  342,    0,    0,
      338,  343,    0,  343,  343,  340,    0,  338,  344,    0,

      344,  344,  345,    0,  345,  345,    0,    0,  340,  346,
      343,  346,  346,  347,    0,  347,  347,    0,  345,  341,
        0,  344,  348,  342,  348,  348,    0,    0,    0,  347,
      343,  349,    0,  349,  349,    0,    0,  344,  346,  343,
      350,  345,  350,  350,    0,    0,    0,  345,  346,    0,
      344,  351,  347,  351,  351,    0,    0,  352,  347,  352,
      352,  348,  353,    0,  353,  353,  346,    0,    0,  354,
      349,  354,  354,  355,    0,  355,  355,    0,  356,  350,
      356,  356,  357,    0,  357,  357,    0,  352,    0,  358,
      351,  358,  358,    0,    0,    0,  352,  359,  356,  359,

      359,  353,    0,  360,  355,  360,  360,    0,  354,    0,
        0,    0,  355,  357,    0,  352,    0,  356,  358,    0,
        0,  357,  361,    0,  361,  361,    0,  356,  358,    0,
        0,  362,  355,  362,  362,    0,  359,  363,  361,  363,
      363,  357,  360,    0,    0,    0,  358,  364,    0,  364,
      364,    0,    0,    0,  365,  363,  365,  365,    0,    0,
        0,  361,  362,    0,    0,    0,  367,  361,  367,  367,
      362,    0,  366,  364,  366,  366,  363,  368,  367,  368,
      368,    0,    0,    0,  363,  369,  364,  369,  369,    0,
      362,    0,  370,  365,  370,  370,  366,  371,    0,  371,

      371,    0,  364,  369,    0,  367,  370,  367,    0,  368,
        0,  366,  372,    0,  372,  372,  368,    0,    0,  373,
      371,  373,  373,    0,  369,  366,  374,    0,  374,  374,
        0,  370,  369,    0,    0,  370,  371,  368,  375,  373,
      375,  375,    0,  374,  376,    0,  376,  376,    0,  371,
        0,  372,  377,    0,  377,  377,    0,    0,  373,  378,
      376,  378,  378,    0,  379,  374,  379,  379,  373,    0,
        0,  380,  374,  380,  380,    0,  381,  375,  381,  381,
        0,  377,  382,  376,  382,  382,    0,  380,    0,  376,
      378,  377,  383,    0,  383,  383,    0,    0,  378,  381,

        0,    0,  384,  379,  384,  384,    0,  382,    0,  377,
      380,  385,    0,  385,  385,  381,  380,  386,  378,  386,
      386,  382,  388,  383,  388,  388,    0,    0,  381,  386,
      387,  383,  387,  387,    0,  385,  382,  389,  384,  389,
      389,  384,  391,  387,  391,  391,  390,    0,  390,  390,
      385,  383,    0,    0,    0,    0,  386,    0,  386,    0,
      389,  388,  390,    0,  385,  392,  384,  392,  392,  387,
        0,  391,  387,    0,    0,    0,  389,  393,    0,  393,
      393,  391,    0,    0,  394,  390,  394,  394,    0,  389,
      395,  390,  395,  395,  392,  393,    0,    0,  396,  391,

      396,  396,    0,    0,  392,  397,  393,  397,  397,  398,
        0,  398,  398,    0,    0,  394,  393,  400,    0,  400,
      400,    0,  392,  394,  393,  399,    0,  399,  399,  395,
        0,    0,  398,  402,  393,  402,  402,  396,  401,    0,
      401,  401,    0,  394,  397,  399,    0,  400,  398,    0,
      401,  399,    0,    0,    0,  403,  400,  403,  403,    0,
        0,  398,    0,  402,  399,  404,    0,  404,  404,    0,
        0,    0,  402,    0,  399,  400,    0,  401,    0,  401,
      399,  403,  405,    0,  405,  405,  406,    0,  406,  406,
      407,  402,  407,  407,  403,  408,    0,  408,  408,    0,

        0,    0,  405,  409,  404,  409,  409,    0,    0,  408,
      403,  406,    0,    0,    0,  409,    0,  410,    0,  410,
      410,  405,    0,  407,  411,  406,  411,  411,    0,  407,
      416,  405,  416,  416,  408,    0,    0,    0,  408,    0,
      406,    0,  409,  410,  409,  412,  416,  412,  412,    0,
      414,  407,  414,  414,  411,  413,  410,  413,  413,  415,
        0,  415,  415,  411,  417,    0,  417,  417,  412,  416,
      414,  415,  410,    0,  412,  416,    0,    0,    0,  413,
      417,    0,  411,    0,  412,  418,    0,  418,  418,  414,
      419,    0,  419,  419,  413,    0,    0,  412,  415,  414,

      415,    0,  412,  417,    0,  418,  419,    0,  413,  417,
      420,    0,  420,  420,  421,    0,  421,  421,  422,    0,
      422,  422,    0,  423,  418,  423,  423,    0,    0,  419,
      424,    0,  424,  424,  418,  419,  420,    0,  421,  425,
        0,  425,  425,    0,    0,    0,    0,  423,    0,  420,
        0,  422,    0,  421,    0,  425,    0,  422,  426,  424,
      426,  426,  423,    0,    0,  420,    0,  421,  427,  424,
      427,  427,  426,    0,    0,    0,  423,    0,  425,  422,
      428,    0,  428,  428,  425,    0,    0,  424,    0,  429,
        0,  429,  429,    0,  427,    0,  428,  426,    0,    0,

        0,  426,    0,  430,    0,  430,  430,  427,    0,    0,
      431,    0,  431,  431,  432,    0,  432,  432,    0,  428,
      429,    0,    0,  427,    0,  428,  430,    0,  429,  433,
      431,  433,  433,  434,    0,  434,  434,  435,    0,  435,
      435,    0,  430,  436,    0,  436,  436,    0,  429,  431,
        0,  435,    0,  432,  437,  430,  437,  437,  434,  431,
      438,    0,  438,  438,    0,    0,  436,  439,  433,  439,
      439,  440,  434,  440,  440,  441,  435,  441,  441,    0,
      435,    0,  436,  440,    0,    0,  442,  434,  442,  442,
        0,    0,    0,  437,  438,  436,    0,    0,    0,  438,

        0,  441,  442,    0,    0,  443,  439,  443,  443,    0,
      440,    0,  440,    0,  441,    0,  444,    0,  444,  444,
        0,    0,  438,  443,  445,  442,  445,  445,    0,    0,
      441,  442,    0,    0,    0,  446,    0,  446,  446,    0,
        0,    0,  445,    0,  443,  444,  447,  446,  447,  447,
        0,  448,  443,  448,  448,  444,  449,    0,  449,  449,
        0,    0,    0,  445,  450,    0,  450,  450,    0,    0,
        0,  445,  449,  444,  446,  451,  446,  451,  451,    0,
      452,    0,  452,  452,    0,  447,  460,  460,    0,  450,
      448,  451,  460,    0,  460,  449,  452,  461,    0,  461,

      461,  449,  462,  450,  462,  462,  460,  463,    0,  463,
      463,    0,    0,  464,  451,  464,  464,    0,  450,  452,
      451,  460,  461,  460,    0,  452,  465,    0,  465,  465,
        0,    0,  462,    0,  460,    0,  461,  466,  465,  466,
      466,  462,  467,  464,  467,  467,  463,  468,    0,  468,
      468,  461,  464,  469,    0,  469,  469,    0,    0,  470,
      462,  470,  470,    0,    0,  465,  471,  465,  471,  471,
      472,  464,  472,  472,    0,  473,  466,  473,  473,    0,
      474,  467,  474,  474,    0,  475,  468,  475,  475,    0,
        0,  476,  469,  476,  476,    0,    0,    0,  470,    0,

        0,  477,    0,  477,  477,  471,    0,  476,    0,  472,
      475,    0,    0,  478,  473,  478,  478,    0,  479,  474,
      479,  479,    0,  480,  475,  480,  480,    0,    0,    0,
      476,  482,  477,  482,  482,  481,  476,  481,  481,  475,
      477,    0,  483,  482,  483,  483,  484,    0,  484,  484,
        0,  486,  478,  486,  486,    0,  485,  479,  485,  485,
      477,    0,  480,  487,  481,  487,  487,    0,  485,  484,
      482,  483,  482,  489,  481,  489,  489,    0,    0,  487,
        0,  483,  486,    0,  488,  484,  488,  488,    0,    0,
      486,    0,  481,    0,    0,  485,    0,  485,  484,  483,

        0,  488,  487,  490,    0,  490,  490,    0,  487,    0,
      486,  491,  489,  491,  491,  492,    0,  492,  492,  493,
        0,  493,  493,  488,  494,    0,  494,  494,    0,  495,
      488,  495,  495,  496,    0,  496,  496,    0,  497,    0,
      497,  497,  490,    0,  495,    0,  498,  494,  498,  498,
      491,    0,    0,  496,  492,    0,    0,  499,  493,  499,
      499,    0,    0,  494,  500,  497,  500,  500,  495,  498,
        0,    0,  496,  495,    0,    0,  494,  497,    0,    0,
      499,  501,  496,  501,  501,  498,  502,    0,  502,  502,
      503,    0,  503,  503,  497,    0,  499,  501,  498,  504,

        0,  504,  504,  500,    0,  506,    0,  506,  506,  499,
      502,  505,    0,  505,  505,  507,    0,  507,  507,  504,
      501,  503,  506,    0,    0,  502,  501,  505,    0,  503,
      508,    0,  508,  508,  509,    0,  509,  509,  504,  502,
      512,    0,  512,  512,  506,    0,  508,    0,  504,  503,
      505,  506,    0,    0,  507,    0,  505,    0,  510,  509,
      510,  510,  511,    0,  511,  511,    0,    0,    0,  508,
      512,    0,    0,  509,  515,  508,  515,  515,  511,  512,
        0,  513,    0,  513,  513,    0,    0,  514,  509,  514,
      514,  510,  516,    0,  516,  516,    0,  510,  512,  515,

      517,  511,  517,  517,    0,    0,    0,  511,  513,    0,
        0,  516,  518,  515,  518,  518,  517,    0,    0,  510,
      513,  514,  519,    0,  519,  519,  514,    0,  515,    0,
      520,  516,  520,  520,    0,    0,    0,  513,    0,  517,
      516,    0,    0,  518,  521,  517,  521,  521,    0,  514,
        0,  518,    0,  519,  522,  520,  522,  522,    0,    0,
      521,  519,  523,    0,  523,  523,    0,    0,    0,  520,
        0,  518,    0,  524,    0,  524,  524,    0,    0,    0,
      522,  519,  523,  521,  520,  524,    0,    0,  525,  521,
      525,  525,  526,  522,  526,  526,  527,    0,  527,  527,

      525,  523,  528,    0,  528,  528,    0,    0,    0,  522,
        0,  523,  524,    0,  524,    0,  528,    0,  529,    0,
      529,  529,    0,  526,    0,  527,    0,  525,    0,  525,
        0,  526,  529,    0,  530,  527,  530,  530,    0,    0,
        0,  528,    0,    0,  531,  528,  531,  531,    0,    0,
      530,  526,  532,  527,  532,  532,  533,  529,  533,  533,
      534,  529,  534,  534,  535,    0,  535,  535,  536,  531,
      536,  536,  533,  530,    0,  537,  534,  537,  537,  530,
        0,    0,  538,  531,  538,  538,    0,    0,    0,  535,
      540,  532,  540,  540,  539,  533,  539,  539,  531,  534,

        0,  533,    0,  535,    0,  534,  537,  536,  541,  539,
      541,  541,    0,    0,  537,    0,  538,  542,  535,  542,
      542,  538,    0,  543,  541,  543,  543,    0,    0,  540,
        0,  542,    0,  539,  537,    0,    0,  544,  539,  544,
      544,  543,    0,  545,  538,  545,  545,  541,  546,    0,
      546,  546,    0,  541,    0,  547,  542,  547,  547,    0,
      542,  548,  543,  548,  548,    0,    0,    0,  544,  545,
      543,  549,    0,  549,  549,    0,  544,  550,  548,  550,
      550,  551,  545,  551,  551,  547,    0,  546,  552,  549,
      552,  552,    0,    0,  547,    0,  544,    0,  545,  553,

      548,  553,  553,  554,    0,  554,  554,  548,    0,    0,
      549,    0,  551,  547,    0,    0,  550,    0,  549,  555,
      551,  555,  555,  556,  553,  556,  556,  552,  557,    0,
      557,  557,  558,    0,  558,  558,    0,    0,  553,  555,
      551,    0,  554,  559,    0,  559,  559,  558,  560,    0,
      560,  560,    0,  553,  557,    0,  556,  562,  555,  562,
      562,  561,  556,  561,  561,    0,    0,  557,  555,    0,
        0,  558,    0,  559,  560,  563,  558,  563,  563,    0,
        0,    0,  559,  557,  556,    0,  561,  560,  564,  562,
      564,  564,  565,    0,  565,  565,  562,    0,    0,    0,

      561,  559,  566,  560,  566,  566,    0,    0,  567,    0,
      567,  567,    0,    0,  563,  561,    0,  562,  568,    0,
      568,  568,    0,  565,  567,  566,  571,  564,  571,  571,
      569,  565,  569,  569,    0,    0,  570,    0,  570,  570,
        0,  566,  572,    0,  572,  572,    0,  567,    0,  568,
      570,  565,    0,  567,  566,    0,  573,  568,  573,  573,
      574,  569,  574,  574,  575,  571,  575,  575,  576,  569,
      576,  576,    0,    0,    0,  570,    0,  568,    0,  570,
        0,  572,    0,  577,  576,  577,  577,    0,    0,  569,
      575,  578,  573,  578,  578,  573,    0,    0,    0,  574,

        0,    0,  579,  575,  579,  579,    0,  576,  577,  580,
        0,  580,  580,  576,  581,    0,  581,  581,    0,  575,
      573,    0,  577,    0,  582,  580,  582,  582,    0,    0,
      578,  585,  579,  585,  585,    0,  583,  577,  583,  583,
      584,  579,  584,  584,  581,    0,    0,  586,  580,  586,
      586,    0,  584,  581,  580,  582,    0,    0,    0,  588,
      579,  588,  588,  582,    0,  583,  586,    0,    0,    0,
      585,  587,  581,  587,  587,  583,    0,    0,    0,  584,
        0,  584,  589,  582,  589,  589,  586,  587,  590,    0,
      590,  590,    0,  583,  591,  586,  591,  591,  588,  592,

      590,  592,  592,  593,    0,  593,  593,    0,    0,    0,
      587,    0,  589,    0,  591,    0,  587,  592,    0,  593,
      594,  589,  594,  594,    0,    0,    0,  590,  595,  590,
      595,  595,  596,  591,  596,  596,    0,    0,  592,    0,
      589,    0,  593,  591,    0,    0,  592,    0,  593,  594,
      597,    0,  597,  597,  598,    0,  598,  598,  596,  594,
        0,  599,  597,  599,  599,    0,  600,  595,  600,  600,
        0,  596,  601,  599,  601,  601,  602,  594,  602,  602,
      603,  600,  603,  603,    0,    0,    0,  596,    0,  597,
        0,  597,  604,  598,  604,  604,  603,    0,    0,  602,

      599,  601,  599,    0,  605,  600,  605,  605,    0,    0,
      600,  601,    0,    0,  606,  602,  606,  606,  608,  603,
      608,  608,    0,  604,    0,  603,    0,    0,  602,  601,
      609,  604,  609,  609,  607,  605,  607,  607,    0,    0,
        0,  608,  610,  605,  610,  610,    0,    0,    0,  609,
        0,  604,  611,  606,  611,  611,    0,  608,  612,    0,
      612,  612,  613,  605,  613,  613,    0,  607,    0,  609,
      608,    0,  614,  607,  614,  614,    0,  615,  609,  615,
      615,  610,  616,    0,  616,  616,  617,    0,  617,  617,
        0,  611,  613,    0,    0,  607,  618,  612,  618,  618,

      619,  613,  619,  619,    0,  620,    0,  620,  620,    0,
      621,  614,  621,  621,  619,  622,  615,  622,  622,    0,
      613,  616,    0,    0,  623,  617,  623,  623,  618,    0,
      624,  622,  624,  624,    0,  618,  620,    0,  630,  619,
      630,  630,    0,  619,  620,  625,    0,  625,  625,  621,
        0,    0,    0,    0,  622,  626,  618,  626,  626,    0,
      622,  624,    0,  623,  620,  627,    0,  627,  627,  624,
      625,  626,  628,    0,  628,  628,  629,  630,  629,  629,
        0,    0,    0,  631,  625,  631,  631,    0,    0,  624,
      627,    0,    0,    0,  626,  628,    0,    0,    0,  625,

      626,    0,  629,    0,  627,  632,    0,  632,  632,    0,
      633,  628,  633,  633,  634,  629,  634,  634,    0,  627,
        0,  632,  631,  635,  628,  635,  635,  636,    0,  636,
      636,  629,  637,    0,  637,  637,    0,    0,    0,  638,
        0,  638,  638,  639,  632,  639,  639,    0,  637,  633,
      632,  638,    0,  634,  640,    0,  640,  640,  641,    0,
      641,  641,  635,    0,    0,  643,  636,  643,  643,    0,
        0,  637,  642,    0,  642,  642,    0,  637,  638,  640,
      638,    0,  639,    0,  642,  644,    0,  644,  644,  645,
        0,  645,  645,  640,    0,    0,  646,  641,  646,  646,

        0,    0,    0,  647,  643,  647,  647,    0,  640,    0,
      644,  642,  650,  642,  650,  650,  648,    0,  648,  648,
        0,    0,    0,    0,  644,    0,  646,    0,  645,  649,
      648,  649,  649,    0,  651,  646,  651,  651,    0,  644,
        0,  650,  647,    0,  652,  649,  652,  652,    0,    0,
      653,  650,  653,  653,  646,  648,    0,    0,  652,  648,
      654,    0,  654,  654,  655,    0,  655,  655,  649,  650,
        0,    0,    0,  651,  649,  653,  656,    0,  656,  656,
        0,    0,    0,  652,    0,    0,    0,  652,  657,  653,
      657,  657,    0,  655,    0,  658,    0,  658,  658,  654,

        0,    0,    0,  655,  653,  656,    0,  659,    0,  659,
      659,  662,    0,  662,  662,  656,    0,  657,  658,    0,
        0,  655,  659,  660,    0,  660,  660,  657,  661,    0,
      661,  661,    0,  656,  658,  660,    0,    0,  663,  660,
      663,  663,    0,    0,    0,  657,  659,  658,    0,    0,
      662,  659,  664,    0,  664,  664,  665,  661,  665,  665,
        0,    0,  660,  666,  660,  666,  666,  661,  660,    0,
        0,  667,  665,  667,  667,    0,    0,  663,  668,  666,
      668,  668,    0,    0,  669,  661,  669,  669,  664,    0,
      668,  664,    0,    0,    0,  665,    0,  670,    0,  670,

      670,  665,  666,  672,    0,  672,  672,  667,  666,  671,
      667,  671,  671,    0,    0,    0,  664,  668,  673,  668,
      673,  673,  674,  669,  674,  674,  670,  675,    0,  675,
      675,  671,    0,    0,    0,  667,  670,  676,    0,  676,
      676,  677,  672,  677,  677,  675,    0,  673,  671,  678,
        0,  678,  678,  679,  670,  679,  679,  673,    0,    0,
      671,  674,  676,    0,  677,  678,  675,    0,    0,  680,
      679,  680,  680,    0,  675,  673,  676,    0,    0,  681,
      677,  681,  681,  682,    0,  682,  682,  683,  678,  683,
      683,  676,  679,  677,  678,  684,    0,  684,  684,  679,

      685,    0,  685,  685,  686,    0,  686,  686,  680,    0,
        0,    0,  687,  682,  687,  687,    0,    0,  681,  684,
        0,  688,  682,  688,  688,    0,  683,  689,  687,  689,
      689,  685,    0,    0,  684,  691,    0,  691,  691,  685,
        0,  682,  690,  686,  690,  690,    0,    0,  684,    0,
      688,  687,  692,  691,  692,  692,  689,  687,  690,  685,
      688,  694,    0,  694,  694,  693,  689,  693,  693,    0,
        0,    0,  692,  695,  691,  695,  695,  696,  688,  696,
      696,  690,  691,    0,  689,  693,  697,  690,  697,  697,
      698,  692,  698,  698,  700,    0,  700,  700,    0,  697,

      694,  692,    0,  699,  693,  699,  699,  696,  701,    0,
      701,  701,  695,    0,  693,  699,  696,    0,    0,  703,
      698,  703,  703,  701,  702,  697,  702,  702,  697,  698,
        0,    0,    0,  700,  704,  696,  704,  704,  705,    0,
      705,  705,  699,  706,  699,  706,  706,  701,  698,  702,
        0,    0,  701,  707,  705,  707,  707,    0,  703,  704,
        0,    0,  708,  702,  708,  708,  709,    0,  709,  709,
        0,    0,  710,  704,  710,  710,    0,  705,  702,    0,
        0,    0,  706,  705,  711,    0,  711,  711,  704,    0,
        0,  712,  707,  712,  712,    0,  713,  709,  713,  713,

      714,  708,  714,  714,  715,  709,  715,  715,  710,    0,
        0,  710,  716,  711,  716,  716,  714,  717,    0,  717,
      717,    0,    0,  711,    0,  709,  718,  713,  718,  718,
      712,    0,    0,    0,  715,  713,  710,  717,    0,  714,
        0,  711,    0,  715,    0,  714,  718,  719,    0,  719,
      719,  716,    0,    0,    0,  713,  717,  720,    0,  720,
      720,  721,  715,  721,  721,  718,  717,  722,    0,  722,
      722,  723,    0,  723,  723,  718,  724,    0,  724,  724,
        0,    0,  722,    0,    0,  725,  719,  725,  725,    0,
        0,  726,  721,  726,  726,  727,  720,  727,  727,  724,

      721,  728,    0,  728,  728,  730,  722,  730,  730,    0,
      723,  722,    0,    0,  729,  724,  729,  729,    0,    0,
      721,    0,    0,  732,  725,  732,  732,  726,  724,  729,
      726,    0,  728,  731,  727,  731,  731,    0,    0,  733,
      728,  733,  733,  734,  730,  734,  734,  735,    0,  735,
      735,    0,    0,  729,  736,  726,  736,  736,  729,    0,
      728,    0,  732,  731,  737,    0,  737,  737,  738,    0,
      738,  738,  731,    0,    0,    0,    0,  735,  733,    0,
        0,    0,  734,  738,    0,  739,  735,  739,  739,    0,
        0,  731,    0,  736,    0,  737,  740,  739,  740,  740,

        0,    0,    0,  737,    0,  735,    0,  738,  740,    0,
        0,  741,  738,  741,  741,  742,    0,  742,  742,  743,
        0,  743,  743,  737,  739,    0,  739,  741,  744,    0,
      744,  744,    0,    0,    0,  740,  745,  740,  745,  745,
        0,    0,  746,    0,  746,  746,  747,    0,  747,  747,
      741,  744,    0,    0,  742,    0,  741,  748,  743,  748,
      748,  749,    0,  749,  749,    0,    0,  744,  751,  746,
      751,  751,    0,  748,  749,  745,  750,    0,  750,  750,
      744,  746,    0,    0,  754,  747,  754,  754,  752,  750,
      752,  752,  758,    0,  758,  758,  748,    0,  746,    0,

      749,    0,  748,  749,  752,    0,  758,  751,  753,    0,
      753,  753,    0,    0,  755,  750,  755,  755,  750,  756,
      753,  756,  756,  754,    0,    0,  757,  752,  757,  757,
        0,  758,    0,  752,    0,  758,  759,  755,  759,  759,
        0,  760,  756,  760,  760,    0,    0,  753,  761,  753,
      761,  761,  759,  755,    0,  757,    0,  760,  756,    0,
      762,    0,  762,  762,    0,  757,  755,  763,    0,  763,
      763,  756,    0,    0,    0,  759,  762,    0,    0,    0,
      760,  759,  764,  757,  764,  764,  760,  761,  765,    0,
      765,  765,    0,    0,    0,    0,    0,    0,    0,  762,

        0,    0,    0,    0,    0,  762,  763,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  764,    0,    0,    0,    0,    0,  765,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  771,    0,  771,  771,  771,  771,
      772,  772,  773,  773,    0,  773,    0,  773,  773,  773,
      773,  774,  774,    0,  774,  774,  774,  774,  774,  774,
      775,    0,  775,  775,  775,    0,    0,  775,  775,  776,

      776,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[197] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #define YY_DECL int yylex()

    bool DEBUG = false;

    bool endsWith(const std::string& str, const std::string& suffix)
    {
        return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
    }

    struct Date {
        int day = 0;
        int month = 0;
        int year = -1;
    };

    enum TimeFormat {
        AM, PM, HOURS_24
    };

    struct Time {
        int hour = 0;
        int minute = 0;
        int second = 0;
        TimeFormat format = HOURS_24;
    };

    struct DateTime {
        Date * date = nullptr;
        Time * time = nullptr;
    };

    void printDateTimeLiteral(DateTime & datetime) {
        if (datetime.date != nullptr) {
            printf("Month: %d\n", datetime.date->month);
            printf("Day: %d\n", datetime.date->day);
            printf("Year: %d\n", datetime.date->year);
        }
        if (datetime.time != nullptr) {
            printf("Hour: %d\n", datetime.time->hour);
            printf("Minute: %d\n", datetime.time->minute);
            printf("Second: %d\n", datetime.time->second);
            printf("Time format: ");
            if (datetime.time->format == AM) {
                printf("AM\n");
            } else if (datetime.time->format == PM) {
                printf("PM\n");
            } else {
                printf("24-hour format\n");
            }
         }
    }

#line 2099 "lexer.flex.cpp"

#line 2101 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2
#define DATETIME 3
#define DATE 4
#define TIME 5

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 76 "lexer.l"



#line 80 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;



#line 2337 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 767 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 766 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 97 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 98 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 99 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "lexer.l"
{printf("Found keyword : %s\n", yytext);}    
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 129 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 130 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 131 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 132 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 133 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 134 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 135 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 136 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 138 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 139 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 140 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 141 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 142 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 143 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 144 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 145 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 146 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 147 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 148 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 149 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 150 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 151 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 152 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 153 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 154 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 155 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 156 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 157 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 158 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 159 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 160 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 161 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 162 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 163 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 164 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 165 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 166 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 167 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 168 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 169 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 170 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 171 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 172 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 173 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 174 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 175 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 176 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 177 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 178 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 179 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 180 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 181 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 182 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 183 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 184 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 185 "lexer.l"
{printf("Found keyword : %s\n", yytext);}   
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 186 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 187 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 188 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 189 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 190 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 191 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 192 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 193 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 194 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 195 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 196 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 197 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 198 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 199 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 200 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 201 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 202 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 203 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 204 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 205 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 206 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 207 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 208 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 209 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 210 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 211 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 212 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 213 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 214 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 215 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 216 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 217 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 218 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 219 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 220 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 221 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 222 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 223 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 224 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 225 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 226 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 227 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 228 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 229 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 230 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 231 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 232 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 233 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 234 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 235 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 236 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 237 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 238 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 239 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 240 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 242 "lexer.l"
{printf("Found nothing literal\n");}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 243 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 244 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 246 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 247 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 248 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 249 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 251 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 252 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 253 "lexer.l"
{strLiteral += "\\";}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 254 "lexer.l"
{strLiteral += "\n";}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 255 "lexer.l"
{strLiteral += "\r";}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 256 "lexer.l"
{strLiteral += "\t";}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 257 "lexer.l"
{strLiteral += "\b";}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 258 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 259 "lexer.l"
{printf("Error: String literal wasn't closed\n"); if (!DEBUG) yyterminate();}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 260 "lexer.l"
{printf("Error: String literal wasn't closed at line %d\n", yylineno - 1); if (!DEBUG) yyterminate();}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 261 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        printf("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
    } else {
        printf("Error: character literal can have only one character, not string, line: %d", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 271 "lexer.l"
{printf("Found a string literal: %s\n", strLiteral.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 273 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    intValue = atoi(intLiteral); printf("Found a integer value: %d\n", intValue);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 288 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    intValue = strtol(intLiteral + 2, NULL, 16);
    printf("Found a hex integer value: %d\n", intValue);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 304 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    intValue = strtol(intLiteral + 2, NULL, 8);
    printf("Found a hex integer value: %d\n", intValue);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 320 "lexer.l"
{
    doubleValue = atof(yytext);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 325 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    doubleValue = atof(floatLiteral);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 333 "lexer.l"
{BEGIN(DATETIME); datetime = DateTime(); printf("Found opening datetime literal lexeme\n");}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 334 "lexer.l"
{printf("Found a whitespace inside datetime literal\n");}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 335 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
    dateOrTimePositionIndex = 0;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 339 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = AM;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 344 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = PM;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 349 "lexer.l"
{
    if (datetime.time != nullptr) {
        printf("Error: Time must not be declared before date, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date = new Date();
    datetime.date->month = tempIntLiteral;
    dateOrTimePositionIndex++;
    BEGIN(DATE);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 359 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 362 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.date->day = tempIntLiteral;
            break;
        default:
            printf("Error: date has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    }
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 373 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components\n");
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    BEGIN(INITIAL);
    BEGIN(DATETIME);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 382 "lexer.l"
{
    BEGIN(TIME);
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 389 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 392 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.time->minute = tempIntLiteral;
            break;
        default:
            printf("Error: time has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    };
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 403 "lexer.l"
{
    datetime.time->format = AM;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 406 "lexer.l"
{
    datetime.time->format = PM;
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 409 "lexer.l"
{
    printf("Error: date literal characters in time literal: %d\n", yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 414 "lexer.l"
{
    if (datetime.date == nullptr && datetime.time == nullptr) {
        printf("Error: Unrecognized date literal: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 425 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 437 "lexer.l"
{
    if (dateOrTimePositionIndex < 1) {
        printf("Error: Missing time components: %d\n", yylineno);
    } else if (dateOrTimePositionIndex == 1) {
        datetime.time->minute = tempIntLiteral;
    } else if (dateOrTimePositionIndex == 2) {
        datetime.time->second = tempIntLiteral;
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 451 "lexer.l"
{
    printf("Error: invalid characters in datetime literal at line %d: %s\n", yylineno, yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 455 "lexer.l"
{printf("Error: line break in datetime literal at line %d", yylineno);}
	YY_BREAK
case YY_STATE_EOF(DATETIME):
#line 456 "lexer.l"
{printf("Error: unexpected file end in datetime literal at line %d", yylineno);}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 458 "lexer.l"
{printf("Found a identifier: %s\n", yytext);}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 460 "lexer.l"
{printf("Found a whitespace\n");}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 461 "lexer.l"
{printf("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 462 "lexer.l"
{printf("Found end of line %d\n\n", yylineno - 1);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(TIME):
#line 463 "lexer.l"
{printf("File ended\n"); yyterminate();}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 465 "lexer.l"
ECHO;
	YY_BREAK
#line 3560 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 767 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 767 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 766);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 465 "lexer.l"


void runTests() {
    DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };

    int numFiles = sizeof(files) / sizeof(files[0]); 

    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        printf("Processing file: %s\n", files[i]);
        yylex(); 

        fclose(yyin);
    }
}

int main(int argc, char** argv) {
    if (argc > 1) {
        if (strcmp(argv[1], "--debug") == 0) {
            runTests();
            return 0;
        }
        fopen_s(&yyin, argv[1], "r");
        yylex();
    }
    else {
        printf("File not found");
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
Скобки и управляющие символы (Микулина)
*/
