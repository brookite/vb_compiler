#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 231
#define YY_END_OF_BUFFER 232
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[852] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  232,  231,  228,  230,  224,  179,  194,  168,
      176,  218,  219,  153,  156,  225,  157,  223,  155,  188,
      226,  164,  158,  165,  222,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  231,  154,  152,
      231,  220,  221,  180,  182,  184,  177,  178,  212,  195,
      215,  209,  199,  196,  203,  212,  212,  214,  202,  217,
      210,  201,  200,  213,  216,  211,  208,  204,  205,  213,
      213,  228,    0,  230,  169,    0,    0,  160,  161,  162,

      191,  175,    0,  188,    0,  188,  188,  188,    0,  185,
      171,  163,  167,  166,  170,  227,  227,  227,  227,  227,
       40,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,   49,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,   54,  227,   18,   19,  227,  227,
      227,  132,  227,  227,  227,  227,  227,  227,  227,  135,
       25,  227,   26,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  108,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

        0,  174,  159,  180,  181,  183,  177,  212,  195,  208,
      196,  197,  198,  214,  202,  200,  213,  204,  206,  207,
        0,  189,  190,  191,  192,    0,  193,  191,    0,  191,
      188,  188,  188,    0,    0,  185,  185,  185,    0,  172,
      173,  227,  227,  113,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  122,  227,  227,  227,  227,
       87,  227,  227,  227,  227,  227,  227,  227,  126,  227,
      227,   89,  227,  227,  227,  227,  227,  227,  227,  227,

       94,  131,  227,  227,  227,   21,  227,  227,  227,  227,
      227,   23,  227,   98,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  176,  227,  227,  227,
      227,   31,  227,  227,  227,  227,  227,  227,  227,  107,
      227,  227,  227,  227,   35,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  148,  229,  189,
      189,  189,  189,    0,  186,  190,  190,  190,  190,    0,
      187,    0,  191,  193,    0,  191,    0,  193,  191,    0,
      193,    0,  193,  185,  185,  185,  227,  227,  227,  227,
      227,  227,    3,  227,   78,  115,  227,  227,  227,  227,

      227,   43,   80,  117,    6,  227,   81,  118,  227,  227,
      227,  227,    8,   46,  227,  227,  227,  227,   84,  227,
      227,  227,  227,  227,  227,  123,   12,  227,   13,  227,
      227,  227,   14,  227,  227,  227,  227,  227,  227,  227,
      227,  128,  227,  227,  227,  227,  227,  227,   20,   57,
       95,  227,  227,  227,  227,  227,  227,   60,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  106,  143,  227,  227,  227,
       34,  227,  150,  227,  227,  227,  227,  227,  227,  227,

       37,   74,  227,  227,   38,  227,  189,  189,  189,  186,
      186,  186,    0,  190,  190,  190,  187,  187,  187,    0,
      191,  193,    0,  193,    0,  191,    0,  193,  193,  193,
        0,  227,  227,   76,  227,  227,  114,   41,    4,   42,
       79,  116,    5,   44,    7,  227,  227,  227,   83,  120,
        9,  227,  227,  227,  227,  227,  227,  227,  227,  124,
       51,   88,  125,  151,  227,  227,  227,  227,  227,  227,
       91,  227,  227,  227,  227,  227,  227,   56,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,   66,  227,  227,  227,  104,  227,  227,  227,
      142,  227,  227,  227,  227,  227,   71,  227,  227,  227,
       36,  227,  110,  227,  111,  227,  227,  227,  186,  186,
      186,  187,  187,  187,  193,  193,  191,  193,    0,  193,
      227,  227,  227,  227,  227,   82,  119,  227,  227,  227,
      227,  227,  227,   86,   50,  227,   15,  227,  227,  227,
       53,  227,  227,  227,  227,  227,  227,   58,  227,  227,
       22,  227,  227,  227,  227,  227,  227,   99,  227,  100,
       63,  227,  227,  227,  227,  227,  227,  227,  103,  227,
      227,  227,   30,   67,  141,  227,  105,   32,   69,   33,

      227,  227,  227,  109,  227,   73,  227,  227,  227,  227,
      193,  193,  227,  227,    2,   77,  227,   47,  121,   10,
       48,  227,  227,   90,  227,  127,  227,   17,  227,  129,
      227,   93,  227,  227,  227,   59,  227,  227,  149,  227,
      227,  227,  227,  227,  227,  227,  102,  138,  227,  227,
      227,  227,  227,   68,  227,  227,   72,  227,  146,  227,
      227,  227,  227,  227,   45,   85,  227,   52,  227,  227,
       55,  227,  227,  227,  227,  227,  227,  227,   62,  136,
      227,  227,  227,  227,   28,  227,  227,   29,  227,  227,
      144,  145,  147,  227,  227,  227,   39,  227,  227,  227,

      130,  227,  227,   97,  134,  227,  227,  101,  227,   27,
      227,   65,  227,  227,   70,  227,  112,    1,   11,  227,
       92,  227,  227,  227,  227,  227,   64,  139,  227,   75,
      227,   96,  227,  227,  227,  137,  227,  227,  133,  227,
      227,  227,  227,  227,  227,  140,  227,   24,   61,   16,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    1,   21,
       22,   23,   24,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   41,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   41,   71,   72,   73,   74,   75,   76,   77,
       78,   41,   79,    1,   80,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    2,    3,    4,    5,    6,    4,    4,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    7,    7,    2,
        1,    1,    1,    1,    8,    8,    8,    8,    8,    8,
        9,    9,   10,    9,    9,   10,    9,    9,    9,    9,
        9,    9,   10,    9,   10,    9,    9,    9,    9,    1,
        1,    4,    1,   10,    8,    8,    8,    8,    8,    8,
        9,    9,   10,    9,    9,   10,    9,    9,    9,    9,
        9,   10,    9,   10,    9,    9,    9,    9,    1,    1
    } ;

static const flex_int16_t yy_base[866] =
    {   0,
        0,    0,   78,   79,  295,  292,   83,  107,  131,  137,
      161,  185,  293, 7446,   88,  287, 7446, 7446, 7446,   96,
     7446, 7446, 7446,  260,  250, 7446,  248,   69,  244,  240,
     7446,   70, 7446,   72, 7446,  311,  211,  380,  451,  517,
      242,  271,  186,  591,  108,  296,  438,  303,  638,  376,
      335,  688,  460,  537,  222,  542,  422,  203,  227,  214,
       78, 7446, 7446,    0, 7446,  102,    0, 7446,    0,  225,
     7446, 7446,   89,  101, 7446,   74,   94,    0,  219, 7446,
     7446, 7446,  126,    0, 7446, 7446,  151,  151, 7446,  145,
      146,  212,  194,  186, 7446,    0,  157, 7446, 7446, 7446,

      548, 7446,  153,    0,  224, 7446, 7446, 7446,  310,  751,
      114, 7446, 7446, 7446,  108,   69,  216,  608,  619,  633,
      389, 7446,  638,  767,  784,  687,  693,  804,  734,  666,
      793,  845,  910,  544,  872,  858,  919,  952,  887,  961,
      878,  989, 1001, 1008,  994, 1025, 1032, 1044, 1072, 1081,
     1058, 1086, 1100, 1110, 1105, 1152,  919, 1133, 1122, 1161,
     1173, 1182, 1199, 1212, 1239, 1231, 1224, 1255, 1271, 1281,
     1286, 1302, 1307, 1312, 1318,  743, 1336, 1341, 1380, 1349,
     1376, 1340, 1407, 1421, 1425, 1458, 1440, 1479,  459, 1487,
     1500, 1508, 1491, 1528, 1536, 1516, 1557, 1565, 1585, 1599,

      155, 7446, 7446,    0, 7446, 7446,    0,    0,  115,  180,
      166,    0,    0,    0,  103,  180,    0,  188,    0,    0,
      206, 1575, 1603, 1625, 7446,  233, 1644, 1652,  214, 1671,
     7446, 7446, 7446,  216,  273, 7446, 7446, 7446,  856, 7446,
     7446, 1676, 1606, 1720, 1713, 1726, 1744, 1752, 1762, 1780,
     1785, 1809, 1814, 1819, 1839, 1827, 1845, 1861, 1878, 1888,
     1902, 1910, 1921, 1930, 1949, 1935, 1963, 1977, 2003, 2015,
     1996, 1991, 2029, 2038, 2053, 1869, 2062, 2068, 2081, 2093,
     2102, 2111, 2119, 2130, 2143, 2124, 2149, 2179, 2166, 2199,
     2208, 2218, 2233, 2238, 2248, 2268, 2295, 2300, 2315, 2329,

     2273, 2334, 2342, 2347, 2369, 2381, 2376, 2389, 2396, 2409,
     2423, 2439, 2446, 2434, 2452, 2476, 2481, 2502, 2509, 2518,
     2523, 2542, 2551, 2533, 2593, 2559, 2600, 2612, 2620, 2626,
     2652, 2636, 2667, 2676, 2683, 2699, 2694, 2709, 2723, 2733,
     2746, 2763, 2770, 2776, 2784, 2800, 2806, 2813, 2836, 2819,
     2841, 2826, 2856, 2862, 2893, 2903, 2909, 2919,   96, 2896,
     7446, 7446, 7446, 2157, 2901, 2915, 7446, 7446, 7446, 2840,
     2958,  226, 2595, 7446,  447, 2977,  460, 2980, 2999,  290,
     3026,  235, 3045, 7446, 7446, 7446, 3054, 3084, 3094, 3104,
     3113, 3119, 3070, 3124, 3144, 3151, 3174, 3179, 3185, 3191,

     3201, 3212, 3217, 3234, 3242, 3248, 3259, 3264, 3269, 3274,
     3281, 3289, 3295, 3311, 3328, 3342, 3358, 3364, 3369, 3375,
     3384, 3389, 3394, 3416, 3422, 3400, 3443, 3453, 3458, 3463,
     3474, 3483, 3490, 3495, 3513, 3524, 3530, 3544, 3553, 3560,
     3565, 3580, 3591, 3600, 3627, 3632, 3640, 3647, 3654, 3660,
     3669, 3679, 3671, 3701, 3710, 3735, 3742, 3748, 3753, 3760,
     3768, 3795, 3784, 3811, 3789, 3817, 3823, 3858, 3864, 3850,
     3870, 3878, 3888, 3897, 3919, 3927, 3938, 3946, 3951, 3956,
     3970, 3985, 4012, 3993, 4017, 4024, 4034, 4045, 4054, 4064,
     4071, 4084, 4095, 4101, 4111, 4133, 4121, 4151, 4138, 4164,

     4171, 4180, 4198, 4190, 4204, 4230, 7446, 7446, 7446, 7446,
     7446, 7446, 2980, 7446, 7446, 7446, 7446, 7446, 7446, 4181,
     4236, 4243,  243, 4251,  246, 4258,  517, 4302, 4305, 4324,
      338, 4333, 4373, 4342, 4383, 4392, 4398, 4404, 4414, 4423,
     4430, 4435, 4445, 4453, 4461, 4466, 4472, 4477, 4484, 4492,
     4502, 4519, 4508, 4531, 4539, 4545, 4551, 4558, 4574, 4605,
     4612, 4621, 4629, 4634, 4639, 4644, 4652, 4659, 4670, 4676,
     4686, 4710, 4719, 4726, 4739, 4744, 4753, 4759, 4781, 4786,
     4773, 4800, 4808, 4824, 4814, 4835, 4849, 4863, 4889, 4898,
     4871, 4878, 4906, 4913, 4928, 4948, 4920, 4953, 4962, 4980,

     5002, 4990, 5014, 5019, 5039, 5032, 5045, 5068, 5056, 5073,
     5081, 5086, 5103, 5098, 5110, 5136, 5115, 5120, 5170, 5162,
     5145, 5183, 5195, 5200, 5205, 5211, 5225, 5233, 7446, 7446,
     7446, 7446, 7446, 7446, 5236, 5251, 5273, 5295,  260, 5298,
     5254, 5291, 5353, 5280, 5364, 5369, 5374, 5379, 5389, 5395,
     5404, 5426, 5436, 5453, 5458, 5465, 5475, 5483, 5490, 5496,
     5505, 5517, 5522, 5532, 5555, 5564, 5572, 5579, 5586, 5594,
     5604, 5626, 5633, 5643, 5613, 5653, 5673, 5664, 5683, 5693,
     5703, 5713, 5722, 5733, 5750, 5755, 5765, 5775, 5783, 5788,
     5793, 5804, 5816, 5824, 5835, 5843, 5854, 5865, 5871, 5876,

     5884, 5892, 5901, 5914, 5926, 5931, 5944, 5953, 5961, 5973,
     5974, 5982, 5991, 6031, 6040, 6052, 6057, 6065, 6070, 6081,
     6087, 6095, 6104, 6119, 6124, 6130, 6136, 6142, 6159, 6166,
     6171, 6177, 6192, 6199, 6218, 6209, 6226, 6233, 6248, 6260,
     6268, 6273, 6280, 6289, 6274, 6315, 6320, 6344, 6352, 6358,
     6369, 6374, 6384, 6399, 6407, 6412, 6427, 6434, 6449, 6454,
     6459, 6464, 6483, 6488, 6476, 6513, 6518, 6525, 6530, 6537,
     6543, 6549, 6565, 6579, 6596, 6607, 6612, 6620, 6626, 6633,
     6650, 6663, 6673, 6680, 6688, 6700, 6705, 6723, 6730, 6740,
     6755, 6770, 6777, 6782, 6787, 6796, 6802, 6807, 6812, 6817,

     6824, 6839, 6871, 6877, 6886, 6891, 6899, 6904, 6909, 6914,
     6924, 6933, 6940, 6946, 6963, 6973, 6982, 6987, 6999, 7004,
     7013, 7020, 7025, 7034, 7042, 7062, 7054, 7067, 7074, 7092,
     7097, 7105, 7116, 7121, 7126, 7135, 7147, 7155, 7177, 7182,
     7187, 7194, 7205, 7218, 7234, 7248, 7260, 7265, 7272, 7277,
     7446, 7329, 7339, 7349, 7359, 7369, 7376, 7379, 7389, 7399,
     7409, 7419, 7429, 7433, 7435
    } ;

static const flex_int16_t yy_def[866] =
    {   0,
      851,    1,  852,  852,  853,  853,  854,  854,  855,  855,
      856,  856,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  857,  857,  857,  857,  857,
       39,   39,  857,  857,  857,   39,   39,   39,   44,   41,
       39,   47,   47,  857,  857,   53,  857,  858,  851,  851,
      858,  851,  851,  859,  851,  851,  860,  851,  861,  851,
      851,  851,  851,  851,  851,  861,  861,  862,  851,  851,
      851,  851,  851,  863,  851,  851,  851,  851,  851,  863,
      863,  851,  851,  851,  851,  864,  851,  851,  851,  851,

      851,  851,  851,   30,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  857,  857,  857,  857,
      857,  851,  857,  857,  857,   53,  857,   39,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  133,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,   39,  857,  857,   44,  857,
      857,   39,  857,   39,  857,  857,   56,  857,   47,  857,
      857,  857,   56,  857,  857,   56,  857,  857,  857,  857,

      858,  851,  851,  859,  851,  851,  860,  861,  851,  851,
      851,  861,  861,  862,  851,  851,  863,  851,  863,  863,
      851,  865,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,   56,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,   56,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  851,  865,
      851,  851,  851,  851,  360,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,   39,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      851,  851,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,   39,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
        0,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851
    } ;

static const flex_int16_t yy_nxt[7527] =
    {   0,
       14,   15,   16,   17,   18,   19,   14,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   45,   46,   47,   48,   49,   50,
       45,   51,   52,   53,   54,   55,   56,   57,   45,   58,
       59,   14,   60,   61,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   45,   62,   63,
       65,   65,   66,   66,   70,   71,  101,  101,   72,   92,
      111,  112,  113,  114,  115,  200,  200,   73,  359,   73,

       74,   74,   75,  210,  215,  210,  205,   76,   70,   71,
      212,  116,   72,  116,  116,  116,  209,   95,  211,  211,
      122,   73,   77,   73,   74,   74,   75,   96,  206,  241,
      213,   76,   79,   80,   97,  240,   81,   76,   79,   80,
      212,   93,   81,  216,  216,   82,   77,   82,   83,   83,
       14,   82,   77,   82,   83,   83,   14,   96,  206,  122,
      213,   76,   14,   85,   97,  210,   86,  210,  218,  218,
      228,  228,  200,  200,  223,   87,   77,   87,   88,   88,
       89,  219,  220,  211,  211,   90,   14,   85,   94,  116,
       86,  116,  116,  116,  210,  221,  210,  216,  216,   87,

       91,   87,   88,   88,   89,  218,  218,  221,  359,   90,
      154,  219,  220,   92,  116,   90,  116,  116,  116,  116,
      215,  116,  116,  116,   91,  116,  209,  116,  116,  116,
       91,  230,  230,  381,  381,  203,  229,  122,  229,   90,
      154,  230,  230,  373,  373,  372,  194,  372,  202,  123,
      373,  373,  383,  383,   91,  103,  201,  104,  104,  124,
      524,  524,  122,  526,  526,  102,  146,  122,  105,  100,
      117,   99,  106,  122,  147,  107,  194,  640,  640,  123,
      148,   98,  108,  149,  109,  382,  150,  382,  124,   94,
      383,  383,  851,  110,   68,  117,  146,   68,  105,  151,

      117,  851,  106,  117,  147,  107,  152,  379,  379,  153,
      148,  108,  149,  109,  116,  150,  116,  116,  116,  851,
      117,  851,  851,  851,  159,  117,  851,  166,  160,  151,
      851,  167,  851,  117,  161,  117,  152,  851,  118,  153,
      851,  168,  231,  380,  851,  232,  119,  851,  120,  851,
      117,  851,  233,  121,  159,  530,  530,  166,  160,  178,
      851,  167,  122,  179,  161,  117,  851,  117,  118,  851,
      851,  168,  231,  117,  851,  232,  119,  851,  120,  851,
      851,  233,  121,  116,  851,  116,  116,  116,  851,  178,
      851,  531,  116,  179,  116,  116,  116,  117,  851,  851,

      175,  851,  851,  117,  125,  126,  127,  128,  117,  851,
      851,  129,  130,  851,  117,  131,  851,  176,  132,  851,
      177,  851,  133,  134,  135,  116,  851,  116,  116,  116,
      175,  122,  851,  851,  125,  126,  127,  128,  117,  851,
      122,  129,  130,  851,  117,  131,  176,  851,  132,  177,
      851,  133,  134,  135,  116,  851,  116,  116,  116,  523,
      199,  523,  117,  851,  524,  524,  162,  851,  851,  851,
      117,  851,  525,  122,  525,  136,  163,  526,  526,  137,
      851,  851,  164,  138,  851,  851,  165,  117,  117,  139,
      199,  187,  117,  851,  851,  851,  162,  117,  188,  851,

      117,  189,  122,  344,  117,  136,  163,  345,  190,  137,
      851,  164,  851,  138,  851,  165,  851,  117,  117,  139,
      116,  187,  116,  116,  116,  851,  851,  117,  188,  639,
      189,  639,  344,  117,  640,  640,  345,  190,  851,  851,
      116,  140,  116,  116,  116,  851,  851,  116,  851,  116,
      116,  116,  141,  851,  142,  851,  851,  851,  143,  851,
      851,  851,  144,  851,  145,  224,  224,  851,  122,  191,
      195,  140,  192,  196,  197,  225,  226,  225,  851,  193,
      117,  851,  141,  198,  142,  851,  851,  143,  122,  225,
      117,  144,  268,  145,  116,  122,  116,  116,  116,  191,

      195,  227,  192,  196,  197,  225,  226,  225,  193,  851,
      117,  116,  198,  116,  116,  116,  851,  851,  225,  117,
      155,  268,  116,  851,  116,  116,  116,  156,  157,  851,
      851,  851,  851,  158,  851,  242,  116,  851,  116,  116,
      116,  116,  122,  116,  116,  116,  851,  851,  851,  851,
      155,  243,  851,  851,  851,  851,  851,  156,  157,  122,
      244,  851,  158,  169,  851,  242,  851,  170,  851,  116,
      122,  116,  116,  116,  117,  171,  245,  172,  851,  173,
      117,  243,  851,  174,  122,  851,  851,  851,  851,  122,
      244,  851,  851,  169,  851,  851,  116,  170,  116,  116,

      116,  851,  851,  259,  117,  171,  245,  172,  173,  117,
      851,  851,  174,  180,  851,  851,  181,  122,  117,  182,
      183,  851,  851,  851,  254,  252,  117,  851,  117,  851,
      851,  184,  185,  259,  851,  253,  186,  116,  851,  116,
      116,  116,  851,  180,  122,  851,  181,  851,  117,  182,
      183,  851,  851,  851,  254,  252,  117,  117,  258,  851,
      184,  185,  851,  851,  253,  186,  234,  117,  104,  104,
      116,  117,  116,  116,  116,  321,  851,  851,  851,  235,
      851,  322,  851,  236,  851,  122,  237,  116,  258,  116,
      116,  116,  851,  238,  851,  239,  116,  117,  116,  116,

      116,  117,  851,  851,  110,  321,  851,  851,  246,  235,
      247,  322,  248,  236,  851,  851,  237,  260,  122,  249,
      851,  851,  238,  851,  239,  851,  250,  251,  255,  256,
      261,  851,  257,  851,  851,  122,  117,  246,  851,  247,
      851,  248,  117,  851,  122,  851,  851,  260,  116,  249,
      116,  116,  116,  851,  851,  250,  251,  851,  255,  256,
      261,  116,  257,  116,  116,  116,  117,  851,  851,  851,
      262,  851,  117,  851,  851,  116,  851,  116,  116,  116,
      851,  116,  263,  116,  116,  116,  851,  851,  384,  851,
      116,  385,  116,  116,  116,  851,  122,  851,  386,  851,

      262,  272,  851,  851,  269,  851,  851,  270,  851,  122,
      851,  851,  263,  116,  271,  116,  116,  116,  384,  851,
      280,  385,  116,  122,  116,  116,  116,  386,  851,  122,
      272,  278,  851,  851,  269,  264,  851,  270,  122,  851,
      851,  265,  851,  271,  117,  273,  851,  266,  274,  280,
      298,  851,  851,  267,  275,  116,  117,  116,  116,  116,
      278,  122,  299,  851,  116,  264,  116,  116,  116,  851,
      122,  265,  851,  851,  117,  273,  851,  266,  274,  851,
      298,  851,  267,  851,  275,  851,  117,  279,  276,  851,
      851,  299,  116,  277,  116,  116,  116,  116,  851,  116,

      116,  116,  851,  122,  116,  851,  116,  116,  116,  851,
      851,  116,  122,  116,  116,  116,  281,  279,  276,  851,
      851,  851,  277,  851,  851,  283,  286,  851,  116,  851,
      116,  116,  116,  282,  851,  116,  285,  116,  116,  116,
      122,  851,  284,  851,  851,  122,  281,  116,  851,  116,
      116,  116,  122,  851,  851,  283,  286,  851,  851,  122,
      287,  116,  282,  116,  116,  116,  285,  851,  851,  288,
      851,  284,  851,  851,  851,  116,  122,  116,  116,  116,
      851,  851,  851,  122,  116,  289,  116,  116,  116,  116,
      287,  116,  116,  116,  851,  122,  851,  851,  851,  288,

      851,  292,  851,  116,  290,  116,  116,  116,  116,  122,
      116,  116,  116,  116,  289,  116,  116,  116,  291,  851,
      851,  851,  851,  122,  293,  116,  851,  116,  116,  116,
      292,  851,  122,  851,  290,  851,  116,  122,  116,  116,
      116,  851,  294,  295,  851,  851,  851,  296,  291,  851,
      851,  122,  851,  851,  293,  116,  122,  116,  116,  116,
      851,  122,  851,  851,  116,  301,  116,  116,  116,  851,
      300,  294,  295,  122,  851,  851,  116,  296,  116,  116,
      116,  851,  851,  851,  122,  116,  302,  116,  116,  116,
      851,  297,  851,  851,  301,  303,  851,  851,  851,  851,

      300,  851,  116,  122,  116,  116,  116,  851,  851,  851,
      304,  305,  122,  851,  851,  116,  302,  116,  116,  116,
      851,  297,  851,  851,  122,  303,  306,  116,  851,  116,
      116,  116,  851,  122,  116,  851,  116,  116,  116,  851,
      304,  305,  116,  851,  116,  116,  116,  851,  851,  851,
      122,  851,  851,  851,  307,  851,  306,  851,  116,  851,
      116,  116,  116,  122,  308,  309,  851,  310,  851,  851,
      312,  313,  311,  851,  116,  122,  116,  116,  116,  851,
      851,  851,  122,  307,  116,  851,  116,  116,  116,  116,
      122,  116,  116,  116,  308,  309,  851,  310,  314,  312,

      313,  311,  851,  851,  315,  116,  122,  116,  116,  116,
      116,  851,  116,  116,  116,  116,  851,  116,  116,  116,
      851,  116,  122,  116,  116,  116,  851,  314,  851,  851,
      316,  851,  122,  851,  315,  318,  851,  122,  851,  116,
      319,  116,  116,  116,  116,  317,  116,  116,  116,  851,
      851,  851,  116,  122,  116,  116,  116,  851,  122,  320,
      316,  323,  851,  122,  333,  318,  851,  851,  117,  122,
      319,  851,  117,  324,  317,  851,  851,  851,  334,  116,
      851,  116,  116,  116,  851,  851,  851,  122,  320,  851,
      851,  323,  122,  851,  333,  851,  851,  330,  117,  851,

      122,  851,  117,  324,  325,  851,  851,  326,  334,  117,
      116,  331,  116,  116,  116,  851,  327,  117,  851,  332,
      851,  851,  328,  329,  851,  851,  330,  122,  116,  851,
      116,  116,  116,  851,  325,  851,  851,  326,  851,  117,
      851,  331,  851,  851,  335,  336,  327,  117,  332,  337,
      340,  328,  329,  117,  851,  851,  851,  851,  122,  338,
      851,  116,  339,  116,  116,  116,  851,  851,  342,  851,
      851,  117,  117,  851,  335,  336,  122,  851,  851,  337,
      340,  343,  116,  117,  116,  116,  116,  851,  851,  338,
      116,  339,  116,  116,  116,  341,  851,  851,  342,  851,

      851,  117,  117,  116,  851,  116,  116,  116,  851,  122,
      343,  116,  851,  116,  116,  116,  851,  851,  851,  117,
      851,  851,  349,  350,  851,  341,  346,  851,  851,  851,
      122,  116,  117,  116,  116,  116,  851,  347,  122,  116,
      851,  116,  116,  116,  353,  851,  348,  117,  354,  117,
      851,  122,  349,  350,  851,  851,  346,  117,  851,  122,
      116,  117,  116,  116,  116,  851,  851,  347,  116,  351,
      116,  116,  116,  352,  353,  851,  348,  117,  354,  122,
      851,  851,  851,  851,  355,  851,  117,  122,  116,  851,
      116,  116,  116,  851,  851,  851,  851,  357,  351,  851,

      356,  851,  116,  352,  116,  116,  116,  361,  122,  116,
      362,  116,  116,  116,  355,  851,  122,  363,  851,  364,
      366,  851,  851,  851,  851,  851,  358,  357,  365,  356,
      389,  851,  851,  851,  851,  367,  122,  361,  368,  851,
      362,  851,  224,  224,  851,  369,  363,  370,  364,  851,
      122,  851,  225,  226,  225,  358,  371,  122,  851,  851,
      389,  224,  224,  851,  851,  367,  225,  851,  368,  376,
      376,  374,  375,  374,  369,  851,  370,  851,  227,  225,
      377,  225,  225,  226,  225,  374,  851,  851,  379,  379,
      851,  851,  851,  225,  851,  225,  851,  227,  225,  851,

      225,  374,  375,  374,  117,  378,  851,  387,  117,  225,
      377,  225,  225,  851,  374,  851,  116,  388,  116,  116,
      116,  851,  225,  116,  380,  116,  116,  116,  225,  116,
      225,  116,  116,  116,  117,  851,  851,  387,  117,  851,
      851,  225,  851,  851,  390,  851,  388,  116,  391,  116,
      116,  116,  851,  851,  392,  116,  851,  116,  116,  116,
      851,  851,  851,  851,  122,  116,  851,  116,  116,  116,
      851,  122,  393,  851,  390,  851,  394,  122,  391,  851,
      851,  851,  851,  116,  392,  116,  116,  116,  116,  851,
      116,  116,  116,  851,  851,  122,  851,  395,  851,  851,

      851,  851,  393,  122,  851,  851,  394,  851,  396,  851,
      851,  397,  116,  122,  116,  116,  116,  116,  851,  116,
      116,  116,  116,  851,  116,  116,  116,  395,  851,  851,
      116,  122,  116,  116,  116,  851,  122,  851,  396,  851,
      851,  397,  116,  400,  116,  116,  116,  398,  116,  851,
      116,  116,  116,  851,  851,  851,  851,  399,  851,  851,
      122,  851,  402,  851,  116,  122,  116,  116,  116,  851,
      122,  403,  116,  400,  116,  116,  116,  398,  122,  851,
      851,  116,  401,  116,  116,  116,  399,  851,  851,  851,
      122,  116,  402,  116,  116,  116,  122,  851,  851,  851,

      851,  403,  404,  851,  851,  116,  851,  116,  116,  116,
      851,  401,  122,  116,  851,  116,  116,  116,  851,  851,
      122,  405,  851,  851,  116,  851,  116,  116,  116,  122,
      406,  404,  407,  116,  851,  116,  116,  116,  116,  122,
      116,  116,  116,  408,  851,  851,  851,  851,  851,  851,
      405,  851,  116,  122,  116,  116,  116,  851,  851,  406,
      851,  122,  407,  409,  410,  413,  116,  851,  116,  116,
      116,  851,  122,  408,  851,  851,  851,  851,  411,  851,
      116,  122,  116,  116,  116,  851,  122,  412,  851,  851,
      851,  851,  409,  410,  116,  413,  116,  116,  116,  116,

      122,  116,  116,  116,  414,  851,  116,  411,  116,  116,
      116,  851,  851,  851,  122,  851,  415,  412,  116,  419,
      116,  116,  116,  851,  851,  851,  851,  418,  122,  851,
      851,  851,  116,  414,  116,  116,  116,  851,  851,  851,
      416,  116,  122,  116,  116,  116,  415,  122,  851,  419,
      851,  851,  417,  851,  122,  851,  116,  418,  116,  116,
      116,  420,  422,  851,  421,  116,  122,  116,  116,  116,
      416,  116,  851,  116,  116,  116,  851,  851,  851,  851,
      122,  423,  417,  851,  116,  851,  116,  116,  116,  122,
      424,  420,  422,  425,  421,  851,  116,  851,  116,  116,

      116,  851,  851,  851,  122,  116,  851,  116,  116,  116,
      851,  423,  426,  122,  116,  851,  116,  116,  116,  122,
      424,  427,  116,  425,  116,  116,  116,  116,  851,  116,
      116,  116,  122,  116,  428,  116,  116,  116,  851,  851,
      851,  851,  426,  851,  122,  851,  116,  429,  116,  116,
      116,  427,  116,  122,  116,  116,  116,  851,  851,  851,
      851,  430,  122,  851,  428,  851,  851,  433,  431,  116,
      122,  116,  116,  116,  851,  122,  851,  429,  851,  851,
      432,  122,  116,  851,  116,  116,  116,  851,  851,  507,
      430,  434,  508,  851,  122,  851,  433,  851,  431,  509,

      122,  851,  116,  435,  116,  116,  116,  851,  851,  851,
      432,  116,  851,  116,  116,  116,  851,  122,  851,  507,
      434,  116,  508,  116,  116,  116,  851,  436,  509,  851,
      122,  851,  851,  435,  437,  851,  116,  851,  116,  116,
      116,  116,  851,  116,  116,  116,  851,  851,  851,  851,
      122,  116,  851,  116,  116,  116,  851,  436,  440,  122,
      851,  438,  851,  851,  437,  439,  851,  851,  851,  122,
      851,  116,  851,  116,  116,  116,  116,  851,  116,  116,
      116,  851,  441,  851,  122,  851,  442,  851,  440,  122,
      438,  851,  851,  851,  439,  443,  851,  851,  116,  122,

      116,  116,  116,  116,  851,  116,  116,  116,  851,  851,
      851,  441,  851,  851,  851,  851,  442,  851,  116,  122,
      116,  116,  116,  851,  122,  443,  851,  851,  446,  851,
      444,  851,  116,  445,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  447,  851,  116,  122,  116,  116,  116,
      116,  122,  116,  116,  116,  851,  851,  851,  446,  851,
      444,  851,  851,  445,  851,  851,  122,  448,  851,  851,
      449,  851,  116,  447,  116,  116,  116,  450,  851,  116,
      122,  116,  116,  116,  116,  122,  116,  116,  116,  851,
      851,  851,  116,  122,  116,  116,  116,  448,  122,  116,

      449,  116,  116,  116,  851,  851,  851,  450,  451,  851,
      851,  851,  116,  454,  116,  116,  116,  851,  851,  453,
      122,  851,  851,  851,  851,  452,  116,  122,  116,  116,
      116,  455,  122,  851,  851,  851,  851,  456,  451,  851,
      122,  851,  116,  454,  116,  116,  116,  122,  453,  116,
      851,  116,  116,  116,  452,  116,  851,  116,  116,  116,
      122,  455,  117,  851,  457,  459,  460,  456,  851,  851,
      851,  851,  461,  851,  122,  117,  851,  851,  851,  116,
      462,  116,  116,  116,  116,  851,  116,  116,  116,  458,
      122,  851,  117,  457,  851,  459,  460,  122,  851,  851,

      851,  851,  461,  122,  117,  116,  851,  116,  116,  116,
      462,  851,  116,  464,  116,  116,  116,  463,  458,  851,
      851,  116,  851,  116,  116,  116,  116,  122,  116,  116,
      116,  851,  122,  851,  851,  851,  116,  465,  116,  116,
      116,  851,  467,  464,  851,  116,  463,  116,  116,  116,
      466,  851,  851,  122,  116,  851,  116,  116,  116,  851,
      122,  468,  116,  851,  116,  116,  116,  465,  469,  122,
      851,  851,  467,  851,  122,  473,  851,  851,  851,  466,
      851,  470,  851,  851,  122,  471,  472,  851,  851,  851,
      468,  475,  851,  122,  851,  851,  116,  469,  116,  116,

      116,  851,  122,  116,  473,  116,  116,  116,  851,  851,
      122,  470,  521,  521,  471,  116,  472,  116,  116,  116,
      474,  475,  225,  116,  225,  116,  116,  116,  851,  116,
      851,  116,  116,  116,  851,  851,  225,  851,  476,  116,
      851,  116,  116,  116,  122,  851,  851,  851,  522,  851,
      474,  122,  225,  851,  225,  116,  477,  116,  116,  116,
      851,  851,  851,  122,  478,  225,  851,  851,  476,  479,
      116,  122,  116,  116,  116,  851,  851,  122,  851,  116,
      480,  116,  116,  116,  851,  477,  116,  122,  116,  116,
      116,  851,  851,  478,  481,  851,  851,  116,  479,  116,

      116,  116,  116,  122,  116,  116,  116,  851,  482,  851,
      480,  851,  116,  484,  116,  116,  116,  483,  122,  851,
      851,  851,  851,  851,  481,  851,  116,  122,  116,  116,
      116,  851,  851,  486,  122,  851,  116,  482,  116,  116,
      116,  851,  485,  484,  851,  122,  483,  851,  487,  116,
      122,  116,  116,  116,  851,  488,  851,  851,  851,  851,
      122,  851,  851,  486,  851,  851,  116,  489,  116,  116,
      116,  485,  490,  116,  122,  116,  116,  116,  487,  116,
      851,  116,  116,  116,  122,  488,  851,  116,  851,  116,
      116,  116,  851,  851,  851,  851,  489,  122,  851,  851,

      491,  851,  490,  116,  493,  116,  116,  116,  492,  116,
      494,  116,  116,  116,  122,  851,  116,  851,  116,  116,
      116,  122,  116,  851,  116,  116,  116,  122,  495,  116,
      491,  116,  116,  116,  493,  122,  851,  851,  492,  116,
      494,  116,  116,  116,  116,  851,  116,  116,  116,  496,
      497,  122,  851,  501,  851,  851,  499,  122,  495,  116,
      851,  116,  116,  116,  122,  116,  851,  116,  116,  116,
      122,  851,  514,  500,  498,  515,  851,  122,  496,  851,
      497,  851,  516,  501,  851,  851,  499,  122,  851,  851,
      851,  851,  122,  502,  851,  851,  116,  503,  116,  116,

      116,  851,  514,  500,  498,  515,  116,  122,  116,  116,
      116,  516,  116,  122,  116,  116,  116,  851,  851,  851,
      851,  504,  116,  502,  116,  116,  116,  503,  361,  851,
      851,  362,  366,  510,  505,  851,  511,  851,  363,  851,
      364,  851,  851,  512,  122,  513,  851,  367,  851,  365,
      368,  504,  506,  851,  122,  851,  851,  369,  361,  370,
      122,  362,  851,  510,  505,  851,  511,  363,  371,  364,
      122,  851,  512,  851,  513,  366,  851,  367,  851,  851,
      368,  506,  851,  851,  851,  851,  369,  851,  370,  851,
      517,  851,  851,  518,  376,  376,  851,  376,  376,  851,

      519,  851,  520,  851,  225,  377,  225,  374,  527,  374,
      851,  371,  629,  851,  851,  630,  379,  379,  225,  851,
      517,  374,  631,  518,  851,  851,  225,  851,  225,  519,
      378,  520,  851,  378,  225,  377,  225,  374,  527,  374,
      225,  851,  629,  528,  528,  630,  851,  225,  851,  851,
      374,  631,  380,  374,  527,  374,  225,  116,  225,  116,
      116,  116,  530,  530,  851,  851,  851,  374,  851,  225,
      851,  851,  374,  116,  374,  116,  116,  116,  532,  529,
      851,  851,  851,  374,  527,  374,  374,  116,  851,  116,
      116,  116,  851,  851,  851,  851,  374,  116,  531,  116,

      116,  116,  374,  851,  374,  122,  851,  116,  532,  116,
      116,  116,  533,  851,  851,  374,  116,  851,  116,  116,
      116,  122,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  851,  851,  122,  534,  851,  851,  535,
      851,  536,  533,  851,  851,  122,  851,  116,  537,  116,
      116,  116,  851,  851,  116,  122,  116,  116,  116,  538,
      851,  851,  851,  851,  122,  534,  851,  851,  851,  535,
      122,  536,  851,  851,  851,  122,  851,  116,  537,  116,
      116,  116,  116,  851,  116,  116,  116,  851,  116,  538,
      116,  116,  116,  851,  116,  122,  116,  116,  116,  851,

      851,  851,  122,  851,  116,  539,  116,  116,  116,  851,
      851,  851,  851,  541,  540,  116,  851,  116,  116,  116,
      116,  851,  116,  116,  116,  122,  851,  851,  851,  543,
      122,  851,  542,  851,  851,  539,  122,  116,  851,  116,
      116,  116,  122,  541,  540,  116,  851,  116,  116,  116,
      851,  116,  122,  116,  116,  116,  851,  851,  851,  543,
      851,  542,  116,  122,  116,  116,  116,  116,  122,  116,
      116,  116,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  851,  116,  122,  116,  116,  116,  851,
      544,  851,  116,  122,  116,  116,  116,  851,  116,  122,

      116,  116,  116,  851,  851,  851,  546,  851,  851,  851,
      122,  851,  545,  851,  116,  122,  116,  116,  116,  544,
      122,  851,  851,  851,  547,  122,  851,  851,  851,  851,
      548,  116,  122,  116,  116,  116,  546,  851,  851,  851,
      122,  545,  851,  851,  851,  116,  122,  116,  116,  116,
      851,  851,  851,  547,  851,  851,  549,  851,  851,  548,
      851,  116,  122,  116,  116,  116,  851,  116,  851,  116,
      116,  116,  116,  851,  116,  116,  116,  851,  116,  122,
      116,  116,  116,  851,  851,  550,  549,  116,  551,  116,
      116,  116,  116,  122,  116,  116,  116,  116,  851,  116,

      116,  116,  552,  116,  851,  116,  116,  116,  554,  122,
      851,  553,  851,  851,  550,  122,  851,  851,  551,  116,
      122,  116,  116,  116,  556,  116,  122,  116,  116,  116,
      851,  851,  552,  555,  851,  122,  851,  851,  554,  851,
      122,  553,  557,  851,  851,  122,  116,  851,  116,  116,
      116,  122,  851,  851,  556,  851,  116,  558,  116,  116,
      116,  116,  555,  116,  116,  116,  116,  122,  116,  116,
      116,  851,  557,  122,  851,  559,  851,  116,  851,  116,
      116,  116,  560,  851,  851,  851,  116,  558,  116,  116,
      116,  561,  851,  116,  122,  116,  116,  116,  116,  851,

      116,  116,  116,  851,  122,  559,  851,  851,  851,  122,
      851,  851,  560,  851,  122,  562,  116,  851,  116,  116,
      116,  561,  851,  564,  851,  122,  563,  116,  851,  116,
      116,  116,  851,  116,  122,  116,  116,  116,  851,  851,
      851,  122,  851,  851,  562,  851,  122,  116,  565,  116,
      116,  116,  851,  564,  851,  563,  116,  851,  116,  116,
      116,  566,  851,  116,  122,  116,  116,  116,  116,  851,
      116,  116,  116,  567,  851,  122,  851,  851,  565,  851,
      851,  122,  851,  116,  570,  116,  116,  116,  851,  569,
      571,  566,  568,  851,  116,  122,  116,  116,  116,  851,

      851,  851,  567,  116,  122,  116,  116,  116,  851,  851,
      851,  122,  851,  851,  570,  851,  122,  851,  851,  569,
      571,  568,  851,  851,  851,  851,  572,  851,  573,  851,
      116,  122,  116,  116,  116,  116,  851,  116,  116,  116,
      851,  851,  122,  116,  851,  116,  116,  116,  851,  851,
      116,  122,  116,  116,  116,  851,  572,  116,  573,  116,
      116,  116,  851,  116,  851,  116,  116,  116,  574,  851,
      576,  851,  116,  575,  116,  116,  116,  851,  122,  851,
      851,  577,  116,  122,  116,  116,  116,  851,  851,  851,
      578,  122,  851,  851,  851,  117,  851,  574,  122,  117,

      576,  851,  575,  580,  116,  122,  116,  116,  116,  581,
      577,  122,  851,  116,  579,  116,  116,  116,  851,  578,
      122,  851,  851,  851,  851,  117,  851,  851,  851,  117,
      122,  851,  851,  580,  583,  851,  851,  851,  116,  581,
      116,  116,  116,  582,  579,  116,  851,  116,  116,  116,
      851,  116,  122,  116,  116,  116,  116,  851,  116,  116,
      116,  122,  851,  116,  583,  116,  116,  116,  851,  851,
      851,  116,  582,  116,  116,  116,  851,  584,  851,  851,
      585,  851,  851,  851,  851,  586,  122,  116,  851,  116,
      116,  116,  116,  122,  116,  116,  116,  587,  116,  122,

      116,  116,  116,  851,  122,  851,  584,  851,  590,  851,
      585,  122,  851,  588,  116,  586,  116,  116,  116,  122,
      116,  589,  116,  116,  116,  851,  116,  587,  116,  116,
      116,  592,  851,  851,  851,  122,  851,  851,  590,  851,
      122,  851,  588,  851,  851,  851,  122,  851,  851,  591,
      851,  589,  593,  116,  851,  116,  116,  116,  594,  595,
      592,  116,  122,  116,  116,  116,  851,  116,  122,  116,
      116,  116,  851,  116,  122,  116,  116,  116,  598,  591,
      851,  116,  593,  116,  116,  116,  851,  594,  597,  595,
      596,  116,  851,  116,  116,  116,  851,  851,  599,  851,

      116,  122,  116,  116,  116,  851,  851,  851,  598,  122,
      600,  851,  851,  851,  851,  122,  601,  851,  597,  851,
      596,  122,  116,  851,  116,  116,  116,  851,  599,  122,
      116,  851,  116,  116,  116,  602,  851,  851,  851,  122,
      600,  116,  851,  116,  116,  116,  601,  851,  122,  116,
      851,  116,  116,  116,  116,  603,  116,  116,  116,  116,
      851,  116,  116,  116,  851,  602,  851,  851,  851,  851,
      122,  851,  604,  116,  605,  116,  116,  116,  122,  607,
      851,  851,  608,  851,  851,  603,  851,  606,  116,  122,
      116,  116,  116,  851,  851,  851,  116,  122,  116,  116,

      116,  604,  122,  851,  605,  851,  851,  122,  609,  607,
      851,  851,  608,  610,  851,  116,  606,  116,  116,  116,
      116,  122,  116,  116,  116,  851,  851,  116,  612,  116,
      116,  116,  851,  851,  851,  851,  122,  116,  609,  116,
      116,  116,  851,  610,  122,  851,  851,  851,  116,  613,
      116,  116,  116,  851,  851,  611,  851,  116,  612,  116,
      116,  116,  851,  122,  851,  851,  851,  116,  122,  116,
      116,  116,  851,  851,  116,  122,  116,  116,  116,  613,
      615,  851,  614,  851,  611,  122,  851,  116,  851,  116,
      116,  116,  851,  851,  851,  851,  122,  851,  116,  616,

      116,  116,  116,  851,  116,  122,  116,  116,  116,  851,
      615,  851,  614,  851,  116,  122,  116,  116,  116,  851,
      851,  851,  122,  851,  116,  618,  116,  116,  116,  616,
      617,  851,  851,  851,  851,  122,  116,  851,  116,  116,
      116,  116,  851,  116,  116,  116,  122,  851,  851,  619,
      851,  621,  122,  851,  116,  618,  116,  116,  116,  617,
      851,  620,  122,  851,  851,  851,  851,  116,  623,  116,
      116,  116,  122,  851,  116,  851,  116,  116,  116,  619,
      851,  621,  851,  116,  122,  116,  116,  116,  624,  122,
      851,  620,  622,  116,  851,  116,  116,  116,  623,  851,

      851,  116,  122,  116,  116,  116,  851,  116,  851,  116,
      116,  116,  851,  632,  851,  122,  633,  851,  624,  851,
      851,  622,  122,  634,  851,  851,  625,  626,  851,  851,
      851,  122,  627,  116,  851,  116,  116,  116,  851,  851,
      851,  122,  851,  632,  851,  851,  633,  851,  851,  122,
      851,  851,  634,  521,  521,  122,  625,  626,  628,  851,
      521,  521,  627,  225,  851,  225,  851,  851,  635,  635,
      374,  851,  374,  851,  851,  637,  637,  225,  374,  851,
      374,  122,  851,  851,  374,  225,  851,  225,  628,  522,
      851,  851,  374,  225,  851,  225,  522,  851,  851,  225,

      374,  851,  374,  851,  636,  851,  225,  851,  374,  851,
      374,  638,  851,  374,  851,  225,  851,  225,  851,  528,
      528,  374,  528,  528,  851,  851,  851,  851,  225,  374,
      527,  374,  374,  527,  374,  851,  116,  851,  116,  116,
      116,  530,  530,  374,  851,  116,  374,  116,  116,  116,
      851,  374,  851,  374,  851,  529,  851,  851,  529,  374,
      527,  374,  374,  527,  374,  374,  851,  851,  851,  851,
      641,  851,  374,  851,  851,  374,  116,  531,  116,  116,
      116,  374,  851,  374,  122,  851,  116,  851,  116,  116,
      116,  851,  851,  122,  374,  116,  851,  116,  116,  116,

      641,  116,  851,  116,  116,  116,  851,  116,  851,  116,
      116,  116,  851,  851,  851,  642,  644,  116,  851,  116,
      116,  116,  851,  851,  122,  643,  116,  851,  116,  116,
      116,  851,  851,  116,  122,  116,  116,  116,  116,  851,
      116,  116,  116,  122,  642,  851,  644,  851,  116,  122,
      116,  116,  116,  851,  643,  122,  116,  851,  116,  116,
      116,  851,  851,  851,  116,  122,  116,  116,  116,  116,
      851,  116,  116,  116,  122,  116,  851,  116,  116,  116,
      116,  122,  116,  116,  116,  851,  122,  116,  851,  116,
      116,  116,  851,  851,  851,  116,  122,  116,  116,  116,

      646,  851,  851,  645,  122,  116,  851,  116,  116,  116,
      851,  116,  122,  116,  116,  116,  851,  122,  851,  851,
      647,  851,  116,  122,  116,  116,  116,  851,  122,  851,
      646,  851,  649,  645,  116,  122,  116,  116,  116,  851,
      851,  851,  116,  122,  116,  116,  116,  851,  116,  647,
      116,  116,  116,  122,  116,  851,  116,  116,  116,  122,
      648,  116,  649,  116,  116,  116,  851,  851,  851,  652,
      122,  851,  650,  851,  651,  851,  851,  116,  851,  116,
      116,  116,  122,  851,  851,  851,  654,  851,  851,  648,
      122,  851,  851,  851,  653,  851,  122,  851,  851,  652,

      851,  650,  122,  655,  651,  851,  851,  851,  116,  122,
      116,  116,  116,  851,  851,  116,  654,  116,  116,  116,
      851,  851,  851,  653,  116,  122,  116,  116,  116,  851,
      851,  851,  116,  655,  116,  116,  116,  116,  851,  116,
      116,  116,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  851,  851,  116,  122,  116,  116,  116,
      851,  851,  116,  122,  116,  116,  116,  851,  851,  851,
      851,  657,  122,  116,  656,  116,  116,  116,  851,  116,
      122,  116,  116,  116,  658,  122,  851,  851,  851,  116,
      122,  116,  116,  116,  851,  122,  851,  851,  659,  851,

      851,  657,  851,  122,  656,  660,  851,  851,  851,  851,
      122,  661,  851,  116,  658,  116,  116,  116,  851,  851,
      851,  122,  116,  851,  116,  116,  116,  122,  659,  116,
      851,  116,  116,  116,  851,  660,  851,  122,  662,  851,
      851,  661,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  851,  851,  663,  116,  851,  116,  116,
      116,  122,  116,  851,  116,  116,  116,  851,  662,  664,
      122,  665,  666,  851,  851,  851,  116,  122,  116,  116,
      116,  851,  667,  851,  116,  663,  116,  116,  116,  116,
      122,  116,  116,  116,  851,  122,  851,  851,  664,  851,

      851,  665,  666,  116,  122,  116,  116,  116,  851,  668,
      122,  116,  667,  116,  116,  116,  851,  116,  670,  116,
      116,  116,  851,  669,  122,  851,  851,  116,  671,  116,
      116,  116,  122,  851,  851,  851,  851,  122,  116,  668,
      116,  116,  116,  851,  851,  851,  851,  670,  851,  851,
      672,  122,  116,  669,  116,  116,  116,  851,  671,  122,
      674,  851,  851,  673,  851,  122,  116,  851,  116,  116,
      116,  851,  675,  851,  116,  122,  116,  116,  116,  672,
      676,  116,  851,  116,  116,  116,  122,  851,  851,  674,
      851,  677,  116,  673,  116,  116,  116,  851,  851,  851,

      122,  116,  675,  116,  116,  116,  681,  851,  680,  116,
      676,  116,  116,  116,  122,  851,  116,  851,  116,  116,
      116,  677,  122,  116,  851,  116,  116,  116,  851,  122,
      851,  116,  678,  116,  116,  116,  681,  851,  680,  851,
      122,  679,  851,  851,  682,  683,  851,  851,  851,  122,
      851,  116,  684,  116,  116,  116,  116,  122,  116,  116,
      116,  678,  851,  686,  122,  116,  851,  116,  116,  116,
      679,  122,  685,  851,  682,  683,  851,  851,  851,  122,
      851,  851,  684,  116,  851,  116,  116,  116,  688,  851,
      851,  851,  686,  116,  687,  116,  116,  116,  851,  122,

      851,  851,  685,  851,  122,  116,  689,  116,  116,  116,
      851,  851,  851,  122,  851,  851,  851,  116,  688,  116,
      116,  116,  116,  687,  116,  116,  116,  691,  851,  851,
      690,  122,  851,  851,  851,  116,  689,  116,  116,  116,
      851,  122,  116,  851,  116,  116,  116,  692,  116,  851,
      116,  116,  116,  122,  851,  851,  851,  691,  851,  116,
      690,  116,  116,  116,  851,  122,  851,  693,  851,  694,
      122,  116,  851,  116,  116,  116,  116,  692,  116,  116,
      116,  851,  851,  122,  116,  851,  116,  116,  116,  116,
      122,  116,  116,  116,  851,  851,  122,  693,  851,  694,

      697,  116,  696,  116,  116,  116,  116,  122,  116,  116,
      116,  695,  851,  116,  698,  116,  116,  116,  116,  122,
      116,  116,  116,  116,  122,  116,  116,  116,  700,  699,
      697,  696,  122,  851,  851,  851,  851,  122,  851,  116,
      695,  116,  116,  116,  698,  851,  851,  851,  116,  122,
      116,  116,  116,  701,  122,  851,  851,  851,  700,  699,
      851,  122,  703,  851,  851,  116,  122,  116,  116,  116,
      851,  122,  851,  116,  702,  116,  116,  116,  851,  851,
      851,  851,  701,  851,  851,  851,  116,  122,  116,  116,
      116,  703,  705,  851,  851,  851,  122,  851,  116,  704,

      116,  116,  116,  116,  702,  116,  116,  116,  116,  851,
      116,  116,  116,  122,  116,  851,  116,  116,  116,  851,
      851,  122,  705,  851,  851,  851,  706,  851,  116,  704,
      116,  116,  116,  851,  122,  851,  116,  707,  116,  116,
      116,  851,  851,  708,  851,  851,  122,  851,  851,  851,
      851,  122,  851,  635,  635,  706,  122,  116,  851,  116,
      116,  116,  122,  374,  851,  374,  851,  707,  635,  635,
      709,  710,  851,  708,  851,  851,  122,  374,  374,  851,
      374,  713,  851,  116,  122,  116,  116,  116,  851,  636,
      637,  637,  374,  374,  116,  374,  116,  116,  116,  709,

      225,  710,  225,  851,  636,  122,  374,  851,  374,  851,
      374,  713,  637,  637,  225,  711,  711,  716,  851,  851,
      851,  374,  374,  851,  374,  374,  638,  374,  851,  851,
      225,  122,  225,  714,  851,  851,  374,  851,  851,  374,
      851,  851,  122,  225,  851,  851,  851,  716,  638,  851,
      851,  712,  374,  851,  374,  374,  116,  374,  116,  116,
      116,  851,  714,  851,  851,  374,  851,  116,  374,  116,
      116,  116,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  116,  851,  116,  116,  116,  851,  851,  851,
      851,  715,  116,  851,  116,  116,  116,  851,  116,  851,

      116,  116,  116,  851,  122,  851,  851,  116,  717,  116,
      116,  116,  851,  851,  851,  122,  851,  851,  851,  851,
      122,  715,  718,  720,  719,  122,  851,  851,  851,  116,
      122,  116,  116,  116,  851,  851,  851,  717,  851,  116,
      122,  116,  116,  116,  851,  851,  122,  721,  851,  851,
      851,  718,  851,  720,  719,  122,  116,  851,  116,  116,
      116,  116,  723,  116,  116,  116,  851,  851,  116,  722,
      116,  116,  116,  851,  851,  851,  721,  122,  116,  851,
      116,  116,  116,  851,  851,  851,  116,  122,  116,  116,
      116,  851,  723,  116,  851,  116,  116,  116,  722,  116,

      851,  116,  116,  116,  122,  851,  851,  851,  116,  122,
      116,  116,  116,  724,  851,  851,  122,  851,  726,  851,
      116,  725,  116,  116,  116,  116,  122,  116,  116,  116,
      851,  851,  851,  727,  122,  116,  851,  116,  116,  116,
      851,  122,  724,  851,  851,  851,  851,  122,  726,  851,
      729,  725,  851,  851,  851,  851,  122,  851,  116,  728,
      116,  116,  116,  727,  851,  851,  851,  116,  122,  116,
      116,  116,  851,  122,  730,  116,  851,  116,  116,  116,
      729,  851,  116,  122,  116,  116,  116,  851,  728,  116,
      851,  116,  116,  116,  851,  851,  733,  116,  731,  116,

      116,  116,  851,  730,  851,  732,  122,  116,  851,  116,
      116,  116,  851,  851,  851,  122,  116,  734,  116,  116,
      116,  851,  735,  122,  851,  851,  733,  731,  851,  116,
      122,  116,  116,  116,  732,  851,  116,  122,  116,  116,
      116,  851,  851,  739,  851,  122,  116,  734,  116,  116,
      116,  851,  735,  851,  851,  122,  116,  737,  116,  116,
      116,  851,  851,  851,  122,  851,  851,  116,  736,  116,
      116,  116,  851,  739,  851,  738,  116,  122,  116,  116,
      116,  740,  851,  851,  122,  851,  116,  737,  116,  116,
      116,  851,  851,  851,  122,  851,  116,  736,  116,  116,

      116,  851,  851,  851,  122,  738,  116,  851,  116,  116,
      116,  740,  851,  851,  741,  122,  116,  743,  116,  116,
      116,  742,  851,  851,  122,  116,  851,  116,  116,  116,
      851,  851,  851,  851,  122,  851,  116,  744,  116,  116,
      116,  851,  851,  741,  122,  851,  851,  743,  851,  745,
      851,  742,  851,  116,  122,  116,  116,  116,  116,  851,
      116,  116,  116,  851,  122,  851,  851,  744,  116,  851,
      116,  116,  116,  122,  746,  851,  851,  851,  116,  745,
      116,  116,  116,  748,  122,  747,  116,  851,  116,  116,
      116,  116,  851,  116,  116,  116,  116,  851,  116,  116,

      116,  122,  851,  746,  851,  851,  122,  116,  749,  116,
      116,  116,  851,  748,  851,  747,  122,  851,  750,  116,
      851,  116,  116,  116,  851,  851,  122,  116,  752,  116,
      116,  116,  851,  751,  122,  753,  851,  749,  116,  122,
      116,  116,  116,  851,  122,  851,  116,  750,  116,  116,
      116,  851,  851,  851,  851,  122,  851,  116,  752,  116,
      116,  116,  751,  851,  851,  753,  851,  122,  116,  851,
      116,  116,  116,  851,  116,  122,  116,  116,  116,  116,
      851,  116,  116,  116,  851,  754,  122,  116,  851,  116,
      116,  116,  851,  851,  122,  116,  851,  116,  116,  116,

      851,  851,  851,  851,  116,  122,  116,  116,  116,  851,
      851,  851,  851,  851,  754,  851,  122,  116,  756,  116,
      116,  116,  122,  851,  851,  851,  851,  122,  755,  116,
      851,  116,  116,  116,  116,  122,  116,  116,  116,  851,
      851,  851,  851,  122,  757,  851,  851,  116,  756,  116,
      116,  116,  122,  851,  758,  851,  116,  755,  116,  116,
      116,  851,  851,  851,  116,  122,  116,  116,  116,  851,
      851,  851,  851,  757,  851,  851,  116,  122,  116,  116,
      116,  851,  122,  851,  758,  851,  851,  759,  851,  761,
      760,  711,  711,  851,  116,  122,  116,  116,  116,  711,

      711,  374,  851,  374,  122,  851,  851,  851,  851,  374,
      762,  374,  122,  851,  851,  374,  759,  851,  851,  761,
      760,  851,  851,  374,  122,  851,  763,  712,  851,  851,
      851,  374,  851,  374,  116,  712,  116,  116,  116,  374,
      762,  374,  122,  116,  374,  116,  116,  116,  851,  851,
      851,  851,  374,  851,  851,  116,  763,  116,  116,  116,
      116,  851,  116,  116,  116,  851,  851,  851,  116,  764,
      116,  116,  116,  116,  851,  116,  116,  116,  851,  851,
      851,  851,  122,  851,  116,  765,  116,  116,  116,  851,
      116,  122,  116,  116,  116,  851,  851,  851,  116,  764,

      116,  116,  116,  122,  851,  851,  851,  116,  122,  116,
      116,  116,  851,  851,  851,  765,  122,  851,  851,  851,
      851,  122,  116,  766,  116,  116,  116,  116,  767,  116,
      116,  116,  122,  116,  851,  116,  116,  116,  122,  116,
      851,  116,  116,  116,  851,  116,  122,  116,  116,  116,
      851,  851,  851,  766,  851,  122,  851,  851,  767,  851,
      769,  768,  116,  851,  116,  116,  116,  851,  851,  116,
      122,  116,  116,  116,  116,  122,  116,  116,  116,  851,
      116,  122,  116,  116,  116,  851,  851,  122,  851,  851,
      769,  768,  851,  122,  851,  116,  770,  116,  116,  116,

      851,  851,  116,  851,  116,  116,  116,  851,  851,  851,
      122,  851,  116,  771,  116,  116,  116,  122,  772,  851,
      851,  116,  122,  116,  116,  116,  770,  773,  122,  116,
      851,  116,  116,  116,  851,  851,  116,  851,  116,  116,
      116,  851,  771,  122,  851,  851,  851,  851,  772,  851,
      122,  116,  775,  116,  116,  116,  851,  773,  851,  774,
      122,  851,  851,  116,  851,  116,  116,  116,  851,  122,
      776,  116,  851,  116,  116,  116,  116,  122,  116,  116,
      116,  851,  775,  116,  122,  116,  116,  116,  774,  851,
      851,  851,  116,  851,  116,  116,  116,  851,  782,  122,

      776,  777,  783,  851,  851,  851,  117,  851,  851,  778,
      851,  122,  117,  851,  779,  780,  781,  851,  116,  122,
      116,  116,  116,  116,  122,  116,  116,  116,  782,  851,
      777,  122,  783,  851,  851,  851,  117,  851,  778,  851,
      122,  851,  117,  779,  851,  780,  781,  116,  851,  116,
      116,  116,  851,  851,  851,  116,  784,  116,  116,  116,
      851,  116,  851,  116,  116,  116,  122,  851,  851,  851,
      851,  122,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  851,  851,  784,  786,  116,  851,  116,
      116,  116,  851,  851,  851,  122,  851,  787,  851,  851,

      785,  851,  116,  122,  116,  116,  116,  851,  789,  122,
      116,  851,  116,  116,  116,  116,  786,  116,  116,  116,
      122,  851,  788,  851,  851,  122,  851,  787,  851,  785,
      116,  851,  116,  116,  116,  122,  851,  116,  789,  116,
      116,  116,  851,  851,  851,  851,  791,  851,  790,  851,
      122,  788,  116,  851,  116,  116,  116,  116,  122,  116,
      116,  116,  116,  122,  116,  116,  116,  116,  851,  116,
      116,  116,  851,  851,  851,  792,  791,  790,  122,  116,
      851,  116,  116,  116,  793,  122,  116,  851,  116,  116,
      116,  116,  851,  116,  116,  116,  794,  851,  851,  795,

      122,  851,  851,  851,  792,  122,  851,  851,  851,  851,
      122,  796,  851,  851,  793,  122,  116,  797,  116,  116,
      116,  116,  851,  116,  116,  116,  794,  122,  116,  795,
      116,  116,  116,  116,  122,  116,  116,  116,  851,  122,
      116,  796,  116,  116,  116,  851,  116,  797,  116,  116,
      116,  851,  116,  851,  116,  116,  116,  851,  851,  851,
      798,  851,  851,  851,  122,  851,  799,  851,  116,  122,
      116,  116,  116,  851,  851,  851,  122,  801,  851,  851,
      800,  122,  116,  851,  116,  116,  116,  851,  122,  798,
      851,  851,  851,  851,  122,  851,  799,  851,  851,  116,

      122,  116,  116,  116,  851,  851,  802,  801,  851,  800,
      116,  851,  116,  116,  116,  116,  122,  116,  116,  116,
      803,  851,  851,  116,  804,  116,  116,  116,  851,  116,
      122,  116,  116,  116,  851,  802,  116,  805,  116,  116,
      116,  851,  851,  851,  806,  851,  851,  122,  851,  803,
      851,  851,  807,  116,  804,  116,  116,  116,  122,  851,
      851,  851,  851,  122,  851,  851,  116,  805,  116,  116,
      116,  122,  851,  851,  806,  851,  116,  122,  116,  116,
      116,  851,  807,  116,  122,  116,  116,  116,  809,  851,
      851,  116,  808,  116,  116,  116,  851,  851,  851,  851,

      851,  122,  851,  116,  811,  116,  116,  116,  116,  851,
      116,  116,  116,  851,  122,  810,  851,  851,  809,  851,
      851,  808,  851,  851,  122,  851,  116,  812,  116,  116,
      116,  122,  851,  116,  811,  116,  116,  116,  851,  122,
      851,  851,  813,  116,  810,  116,  116,  116,  851,  851,
      851,  122,  851,  851,  851,  851,  122,  812,  116,  851,
      116,  116,  116,  851,  851,  851,  851,  814,  815,  851,
      851,  851,  813,  116,  122,  116,  116,  116,  851,  851,
      116,  122,  116,  116,  116,  116,  851,  116,  116,  116,
      116,  122,  116,  116,  116,  851,  851,  814,  815,  116,

      851,  116,  116,  116,  851,  116,  122,  116,  116,  116,
      116,  851,  116,  116,  116,  116,  851,  116,  116,  116,
      116,  122,  116,  116,  116,  816,  851,  116,  122,  116,
      116,  116,  851,  122,  851,  817,  851,  818,  122,  851,
      820,  851,  116,  851,  116,  116,  116,  122,  851,  851,
      819,  851,  851,  122,  816,  851,  851,  851,  122,  821,
      851,  851,  851,  122,  817,  851,  818,  851,  122,  851,
      820,  822,  851,  851,  116,  122,  116,  116,  116,  819,
      116,  851,  116,  116,  116,  851,  851,  851,  821,  116,
      122,  116,  116,  116,  116,  851,  116,  116,  116,  851,

      851,  822,  116,  823,  116,  116,  116,  116,  851,  116,
      116,  116,  116,  851,  116,  116,  116,  116,  851,  116,
      116,  116,  122,  851,  851,  851,  825,  116,  122,  116,
      116,  116,  851,  823,  824,  851,  116,  122,  116,  116,
      116,  851,  122,  116,  826,  116,  116,  116,  851,  116,
      122,  116,  116,  116,  851,  122,  825,  851,  851,  851,
      122,  851,  851,  824,  851,  122,  116,  851,  116,  116,
      116,  851,  827,  829,  826,  122,  116,  851,  116,  116,
      116,  851,  851,  828,  122,  116,  851,  116,  116,  116,
      116,  122,  116,  116,  116,  851,  851,  122,  851,  851,

      851,  827,  116,  829,  116,  116,  116,  116,  851,  116,
      116,  116,  828,  851,  122,  830,  116,  851,  116,  116,
      116,  851,  851,  116,  122,  116,  116,  116,  116,  851,
      116,  116,  116,  122,  851,  851,  851,  116,  122,  116,
      116,  116,  851,  851,  830,  116,  831,  116,  116,  116,
      122,  851,  833,  851,  851,  122,  851,  116,  834,  116,
      116,  116,  851,  832,  122,  116,  835,  116,  116,  116,
      116,  122,  116,  116,  116,  831,  122,  116,  851,  116,
      116,  116,  833,  851,  851,  122,  851,  851,  834,  851,
      836,  851,  832,  122,  851,  116,  835,  116,  116,  116,

      116,  851,  116,  116,  116,  122,  851,  851,  116,  837,
      116,  116,  116,  122,  851,  851,  851,  851,  122,  116,
      836,  116,  116,  116,  116,  122,  116,  116,  116,  116,
      851,  116,  116,  116,  851,  851,  838,  851,  116,  837,
      116,  116,  116,  122,  839,  851,  840,  851,  122,  851,
      116,  841,  116,  116,  116,  851,  122,  851,  116,  851,
      116,  116,  116,  851,  851,  851,  838,  122,  851,  851,
      851,  851,  122,  851,  839,  842,  840,  122,  851,  843,
      116,  841,  116,  116,  116,  116,  122,  116,  116,  116,
      116,  851,  116,  116,  116,  851,  851,  116,  122,  116,

      116,  116,  851,  851,  851,  842,  122,  851,  116,  843,
      116,  116,  116,  851,  851,  851,  851,  844,  851,  851,
      851,  116,  845,  116,  116,  116,  851,  851,  122,  851,
      851,  847,  851,  122,  851,  846,  851,  116,  122,  116,
      116,  116,  851,  851,  851,  122,  848,  844,  851,  851,
      851,  116,  845,  116,  116,  116,  122,  851,  851,  851,
      851,  847,  849,  116,  846,  116,  116,  116,  116,  122,
      116,  116,  116,  851,  851,  116,  848,  116,  116,  116,
      116,  851,  116,  116,  116,  122,  851,  851,  850,  851,
      851,  851,  849,  851,  851,  851,  851,  851,  851,  122,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  122,  851,  851,  851,  851,  122,  851,  850,  851,
      851,  851,  851,  122,  851,  851,  851,  851,  122,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  117,
      851,  117,  117,  117,  117,  117,  200,  200,  200,  204,
      204,  851,  204,  851,  204,  204,  204,  204,  204,  207,

      207,  851,  207,  207,  207,  207,  207,  207,  207,  208,
      851,  851,  208,  208,  851,  851,  208,  208,  208,  214,
      851,  851,  214,  214,  851,  851,  214,  214,  214,  217,
      851,  851,  217,  217,  851,  851,  217,  217,  217,  222,
      222,  360,  360,  851,  360,   13,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851
    } ;

static const flex_int16_t yy_chk[7527] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    3,    4,    7,    7,   28,   28,    7,   15,
       32,   32,   32,   34,   34,   61,   61,    7,  359,    7,

        7,    7,    7,   73,  215,   73,   66,    7,    8,    8,
       76,   45,    8,   45,   45,   45,  209,   20,   74,   74,
      116,    8,    7,    8,    8,    8,    8,   20,   66,  115,
       77,    8,    9,    9,   20,  111,    9,    7,   10,   10,
       76,   15,   10,   83,   83,    9,    8,    9,    9,    9,
        9,   10,    7,   10,   10,   10,   10,   20,   66,   45,
       77,    8,   11,   11,   20,   87,   11,   87,   88,   88,
      103,  103,  201,  201,   97,   11,    8,   11,   11,   11,
       11,   90,   91,  211,  211,   11,   12,   12,   94,   43,
       12,   43,   43,   43,  210,   93,  210,  216,  216,   12,

       11,   12,   12,   12,   12,  218,  218,  221,  221,   12,
       43,   90,   91,   92,   37,   11,   37,   37,   37,  117,
       79,  117,  117,  117,   12,   55,   70,   55,   55,   55,
       11,  229,  229,  234,  234,   60,  105,   43,  105,   12,
       43,  105,  105,  372,  372,  226,   55,  226,   59,   37,
      226,  226,  382,  382,   12,   30,   58,   30,   30,   37,
      523,  523,   37,  525,  525,   29,   41,  117,   30,   27,
       41,   25,   30,   55,   41,   30,   55,  639,  639,   37,
       41,   24,   30,   41,   30,  235,   41,  235,   37,   16,
      235,  235,   13,   30,    6,   42,   41,    5,   30,   42,

       41,    0,   30,   42,   41,   30,   42,  380,  380,   42,
       41,   30,   41,   30,   36,   41,   36,   36,   36,    0,
       46,    0,    0,    0,   46,   42,    0,   48,   46,   42,
        0,   48,    0,   42,   46,   48,   42,    0,   36,   42,
        0,   48,  109,  380,    0,  109,   36,    0,   36,    0,
       46,    0,  109,   36,   46,  531,  531,   48,   46,   51,
        0,   48,   36,   51,   46,   48,    0,   51,   36,    0,
        0,   48,  109,   51,    0,  109,   36,    0,   36,    0,
        0,  109,   36,   38,    0,   38,   38,   38,    0,   51,
        0,  531,  121,   51,  121,  121,  121,   51,    0,    0,

       50,    0,    0,   51,   38,   38,   38,   38,   50,    0,
        0,   38,   38,    0,   50,   38,    0,   50,   38,    0,
       50,    0,   38,   38,   38,   57,    0,   57,   57,   57,
       50,   38,    0,    0,   38,   38,   38,   38,   50,    0,
      121,   38,   38,    0,   50,   38,   50,    0,   38,   50,
        0,   38,   38,   38,   39,    0,   39,   39,   39,  375,
       57,  375,   47,    0,  375,  375,   47,    0,    0,    0,
       47,    0,  377,   57,  377,   39,   47,  377,  377,   39,
        0,    0,   47,   39,    0,    0,   47,  189,   53,   39,
       57,   53,   47,    0,    0,    0,   47,  189,   53,    0,

       47,   53,   39,  189,   53,   39,   47,  189,   53,   39,
        0,   47,    0,   39,    0,   47,    0,  189,   53,   39,
       40,   53,   40,   40,   40,    0,    0,  189,   53,  527,
       53,  527,  189,   53,  527,  527,  189,   53,    0,    0,
       54,   40,   54,   54,   54,    0,    0,  134,    0,  134,
      134,  134,   40,    0,   40,    0,    0,    0,   40,    0,
        0,    0,   40,    0,   40,  101,  101,    0,   40,   54,
       56,   40,   54,   56,   56,  101,  101,  101,    0,   54,
       56,    0,   40,   56,   40,    0,    0,   40,   54,  101,
       56,   40,  134,   40,   44,  134,   44,   44,   44,   54,

       56,  101,   54,   56,   56,  101,  101,  101,   54,    0,
       56,  118,   56,  118,  118,  118,    0,    0,  101,   56,
       44,  134,  119,    0,  119,  119,  119,   44,   44,    0,
        0,    0,    0,   44,    0,  118,  120,    0,  120,  120,
      120,  123,   44,  123,  123,  123,    0,    0,    0,    0,
       44,  119,    0,    0,    0,    0,    0,   44,   44,  118,
      120,    0,   44,   49,    0,  118,    0,   49,    0,  130,
      119,  130,  130,  130,   49,   49,  123,   49,    0,   49,
       49,  119,    0,   49,  120,    0,    0,    0,    0,  123,
      120,    0,    0,   49,    0,    0,  127,   49,  127,  127,

      127,    0,    0,  130,   49,   49,  123,   49,   49,   49,
        0,    0,   49,   52,    0,    0,   52,  130,  126,   52,
       52,    0,    0,    0,  127,  126,   52,    0,  126,    0,
        0,   52,   52,  130,    0,  126,   52,  129,    0,  129,
      129,  129,    0,   52,  127,    0,   52,    0,  126,   52,
       52,    0,    0,    0,  127,  126,   52,  126,  129,    0,
       52,   52,    0,    0,  126,   52,  110,  176,  110,  110,
      124,  176,  124,  124,  124,  176,    0,    0,    0,  110,
        0,  176,    0,  110,    0,  129,  110,  125,  129,  125,
      125,  125,    0,  110,    0,  110,  131,  176,  131,  131,

      131,  176,    0,    0,  110,  176,    0,    0,  124,  110,
      124,  176,  124,  110,    0,    0,  110,  131,  124,  125,
        0,    0,  110,    0,  110,    0,  125,  125,  128,  128,
      131,    0,  128,    0,    0,  125,  128,  124,    0,  124,
        0,  124,  128,    0,  131,    0,    0,  131,  132,  125,
      132,  132,  132,    0,    0,  125,  125,    0,  128,  128,
      131,  136,  128,  136,  136,  136,  128,    0,    0,    0,
      132,    0,  128,    0,    0,  135,    0,  135,  135,  135,
        0,  141,  132,  141,  141,  141,    0,    0,  239,    0,
      139,  239,  139,  139,  139,    0,  132,    0,  239,    0,

      132,  136,    0,    0,  135,    0,    0,  135,    0,  136,
        0,    0,  132,  133,  135,  133,  133,  133,  239,    0,
      141,  239,  137,  135,  137,  137,  137,  239,    0,  141,
      136,  139,    0,    0,  135,  133,    0,  135,  139,    0,
        0,  133,    0,  135,  157,  137,    0,  133,  137,  141,
      157,    0,    0,  133,  137,  138,  157,  138,  138,  138,
      139,  133,  157,    0,  140,  133,  140,  140,  140,    0,
      137,  133,    0,    0,  157,  137,    0,  133,  137,    0,
      157,    0,  133,    0,  137,    0,  157,  140,  138,    0,
        0,  157,  142,  138,  142,  142,  142,  145,    0,  145,

      145,  145,    0,  138,  143,    0,  143,  143,  143,    0,
        0,  144,  140,  144,  144,  144,  142,  140,  138,    0,
        0,    0,  138,    0,    0,  143,  145,    0,  146,    0,
      146,  146,  146,  142,    0,  147,  144,  147,  147,  147,
      142,    0,  143,    0,    0,  145,  142,  148,    0,  148,
      148,  148,  143,    0,    0,  143,  145,    0,    0,  144,
      146,  151,  142,  151,  151,  151,  144,    0,    0,  147,
        0,  143,    0,    0,    0,  149,  146,  149,  149,  149,
        0,    0,    0,  147,  150,  148,  150,  150,  150,  152,
      146,  152,  152,  152,    0,  148,    0,    0,    0,  147,

        0,  151,    0,  153,  149,  153,  153,  153,  155,  151,
      155,  155,  155,  154,  148,  154,  154,  154,  150,    0,
        0,    0,    0,  149,  152,  159,    0,  159,  159,  159,
      151,    0,  150,    0,  149,    0,  158,  152,  158,  158,
      158,    0,  153,  153,    0,    0,    0,  154,  150,    0,
        0,  153,    0,    0,  152,  156,  155,  156,  156,  156,
        0,  154,    0,    0,  160,  159,  160,  160,  160,    0,
      158,  153,  153,  159,    0,    0,  161,  154,  161,  161,
      161,    0,    0,    0,  158,  162,  160,  162,  162,  162,
        0,  156,    0,    0,  159,  160,    0,    0,    0,    0,

      158,    0,  163,  156,  163,  163,  163,    0,    0,    0,
      161,  161,  160,    0,    0,  164,  160,  164,  164,  164,
        0,  156,    0,    0,  161,  160,  163,  167,    0,  167,
      167,  167,    0,  162,  166,    0,  166,  166,  166,    0,
      161,  161,  165,    0,  165,  165,  165,    0,    0,    0,
      163,    0,    0,    0,  164,    0,  163,    0,  168,    0,
      168,  168,  168,  164,  165,  165,    0,  166,    0,    0,
      167,  167,  166,    0,  169,  167,  169,  169,  169,    0,
        0,    0,  166,  164,  170,    0,  170,  170,  170,  171,
      165,  171,  171,  171,  165,  165,    0,  166,  168,  167,

      167,  166,    0,    0,  169,  172,  168,  172,  172,  172,
      173,    0,  173,  173,  173,  174,    0,  174,  174,  174,
        0,  175,  169,  175,  175,  175,    0,  168,    0,    0,
      172,    0,  170,    0,  169,  173,    0,  171,    0,  177,
      174,  177,  177,  177,  178,  172,  178,  178,  178,    0,
        0,    0,  180,  172,  180,  180,  180,    0,  173,  175,
      172,  177,    0,  174,  182,  173,    0,    0,  182,  175,
      174,    0,  182,  178,  172,    0,    0,    0,  182,  181,
        0,  181,  181,  181,    0,    0,    0,  177,  175,    0,
        0,  177,  178,    0,  182,    0,    0,  180,  182,    0,

      180,    0,  182,  178,  179,    0,    0,  179,  182,  179,
      183,  181,  183,  183,  183,    0,  179,  179,    0,  181,
        0,    0,  179,  179,    0,    0,  180,  181,  185,    0,
      185,  185,  185,    0,  179,    0,    0,  179,    0,  179,
        0,  181,    0,    0,  183,  184,  179,  179,  181,  184,
      185,  179,  179,  184,    0,    0,    0,    0,  183,  184,
        0,  186,  184,  186,  186,  186,    0,    0,  187,    0,
        0,  187,  187,    0,  183,  184,  185,    0,    0,  184,
      185,  187,  188,  184,  188,  188,  188,    0,    0,  184,
      190,  184,  190,  190,  190,  186,    0,    0,  187,    0,

        0,  187,  187,  191,    0,  191,  191,  191,    0,  186,
      187,  192,    0,  192,  192,  192,    0,    0,    0,  193,
        0,    0,  193,  193,    0,  186,  190,    0,    0,    0,
      188,  194,  193,  194,  194,  194,    0,  191,  190,  195,
        0,  195,  195,  195,  196,    0,  192,  196,  196,  193,
        0,  191,  193,  193,    0,    0,  190,  196,    0,  192,
      197,  193,  197,  197,  197,    0,    0,  191,  198,  194,
      198,  198,  198,  195,  196,    0,  192,  196,  196,  194,
        0,    0,    0,    0,  197,    0,  196,  195,  199,    0,
      199,  199,  199,    0,    0,    0,    0,  198,  194,    0,

      197,    0,  200,  195,  200,  200,  200,  222,  197,  243,
      222,  243,  243,  243,  197,    0,  198,  222,    0,  222,
      223,    0,    0,    0,    0,    0,  199,  198,  222,  197,
      243,    0,    0,    0,    0,  223,  199,  222,  223,    0,
      222,    0,  224,  224,    0,  223,  222,  223,  222,    0,
      200,    0,  224,  224,  224,  199,  223,  243,    0,    0,
      243,  227,  227,    0,    0,  223,  224,    0,  223,  228,
      228,  227,  227,  227,  223,    0,  223,    0,  224,  228,
      228,  228,  224,  224,  224,  227,    0,    0,  230,  230,
        0,    0,    0,  228,    0,  224,    0,  227,  230,    0,

      230,  227,  227,  227,  242,  228,    0,  242,  242,  228,
      228,  228,  230,    0,  227,    0,  245,  242,  245,  245,
      245,    0,  228,  244,  230,  244,  244,  244,  230,  246,
      230,  246,  246,  246,  242,    0,    0,  242,  242,    0,
        0,  230,    0,    0,  244,    0,  242,  247,  245,  247,
      247,  247,    0,    0,  246,  248,    0,  248,  248,  248,
        0,    0,    0,    0,  245,  249,    0,  249,  249,  249,
        0,  244,  247,    0,  244,    0,  248,  246,  245,    0,
        0,    0,    0,  250,  246,  250,  250,  250,  251,    0,
      251,  251,  251,    0,    0,  247,    0,  249,    0,    0,

        0,    0,  247,  248,    0,    0,  248,    0,  250,    0,
        0,  251,  252,  249,  252,  252,  252,  253,    0,  253,
      253,  253,  254,    0,  254,  254,  254,  249,    0,    0,
      256,  250,  256,  256,  256,    0,  251,    0,  250,    0,
        0,  251,  255,  254,  255,  255,  255,  252,  257,    0,
      257,  257,  257,    0,    0,    0,    0,  253,    0,    0,
      252,    0,  256,    0,  258,  253,  258,  258,  258,    0,
      254,  257,  276,  254,  276,  276,  276,  252,  256,    0,
        0,  259,  255,  259,  259,  259,  253,    0,    0,    0,
      255,  260,  256,  260,  260,  260,  257,    0,    0,    0,

        0,  257,  258,    0,    0,  261,    0,  261,  261,  261,
        0,  255,  258,  262,    0,  262,  262,  262,    0,    0,
      276,  259,    0,    0,  263,    0,  263,  263,  263,  259,
      260,  258,  261,  264,    0,  264,  264,  264,  266,  260,
      266,  266,  266,  262,    0,    0,    0,    0,    0,    0,
      259,    0,  265,  261,  265,  265,  265,    0,    0,  260,
        0,  262,  261,  263,  263,  266,  267,    0,  267,  267,
      267,    0,  263,  262,    0,    0,    0,    0,  264,    0,
      268,  264,  268,  268,  268,    0,  266,  265,    0,    0,
        0,    0,  263,  263,  272,  266,  272,  272,  272,  271,

      265,  271,  271,  271,  267,    0,  269,  264,  269,  269,
      269,    0,    0,    0,  267,    0,  268,  265,  270,  272,
      270,  270,  270,    0,    0,    0,    0,  271,  268,    0,
        0,    0,  273,  267,  273,  273,  273,    0,    0,    0,
      269,  274,  272,  274,  274,  274,  268,  271,    0,  272,
        0,    0,  270,    0,  269,    0,  275,  271,  275,  275,
      275,  273,  274,    0,  273,  277,  270,  277,  277,  277,
      269,  278,    0,  278,  278,  278,    0,    0,    0,    0,
      273,  275,  270,    0,  279,    0,  279,  279,  279,  274,
      277,  273,  274,  278,  273,    0,  280,    0,  280,  280,

      280,    0,    0,    0,  275,  281,    0,  281,  281,  281,
        0,  275,  279,  277,  282,    0,  282,  282,  282,  278,
      277,  280,  283,  278,  283,  283,  283,  286,    0,  286,
      286,  286,  279,  284,  281,  284,  284,  284,    0,    0,
        0,    0,  279,    0,  280,    0,  285,  282,  285,  285,
      285,  280,  287,  281,  287,  287,  287,    0,    0,    0,
        0,  283,  282,    0,  281,    0,    0,  286,  284,  289,
      283,  289,  289,  289,    0,  286,    0,  282,    0,    0,
      285,  284,  288,    0,  288,  288,  288,    0,    0,  364,
      283,  287,  364,    0,  285,    0,  286,    0,  284,  364,

      287,    0,  290,  288,  290,  290,  290,    0,    0,    0,
      285,  291,    0,  291,  291,  291,    0,  289,    0,  364,
      287,  292,  364,  292,  292,  292,    0,  290,  364,    0,
      288,    0,    0,  288,  291,    0,  293,    0,  293,  293,
      293,  294,    0,  294,  294,  294,    0,    0,    0,    0,
      290,  295,    0,  295,  295,  295,    0,  290,  293,  291,
        0,  292,    0,    0,  291,  292,    0,    0,    0,  292,
        0,  296,    0,  296,  296,  296,  301,    0,  301,  301,
      301,    0,  294,    0,  293,    0,  295,    0,  293,  294,
      292,    0,    0,    0,  292,  296,    0,    0,  297,  295,

      297,  297,  297,  298,    0,  298,  298,  298,    0,    0,
        0,  294,    0,    0,    0,    0,  295,    0,  299,  296,
      299,  299,  299,    0,  301,  296,    0,    0,  298,    0,
      297,    0,  300,  297,  300,  300,  300,  302,    0,  302,
      302,  302,    0,  299,    0,  303,  297,  303,  303,  303,
      304,  298,  304,  304,  304,    0,    0,    0,  298,    0,
      297,    0,    0,  297,    0,    0,  299,  300,    0,    0,
      303,    0,  305,  299,  305,  305,  305,  304,    0,  307,
      300,  307,  307,  307,  306,  302,  306,  306,  306,    0,
        0,    0,  308,  303,  308,  308,  308,  300,  304,  309,

      303,  309,  309,  309,    0,    0,    0,  304,  305,    0,
        0,    0,  310,  308,  310,  310,  310,    0,    0,  307,
      305,    0,    0,    0,    0,  306,  311,  307,  311,  311,
      311,  309,  306,    0,    0,    0,    0,  310,  305,    0,
      308,    0,  312,  308,  312,  312,  312,  309,  307,  313,
        0,  313,  313,  313,  306,  315,    0,  315,  315,  315,
      310,  309,  314,    0,  311,  314,  314,  310,    0,    0,
        0,    0,  314,    0,  311,  314,    0,    0,    0,  316,
      315,  316,  316,  316,  317,    0,  317,  317,  317,  313,
      312,    0,  314,  311,    0,  314,  314,  313,    0,    0,

        0,    0,  314,  315,  314,  318,    0,  318,  318,  318,
      315,    0,  319,  317,  319,  319,  319,  316,  313,    0,
        0,  320,    0,  320,  320,  320,  321,  316,  321,  321,
      321,    0,  317,    0,    0,    0,  324,  318,  324,  324,
      324,    0,  320,  317,    0,  322,  316,  322,  322,  322,
      319,    0,    0,  318,  323,    0,  323,  323,  323,    0,
      319,  320,  326,    0,  326,  326,  326,  318,  321,  320,
        0,    0,  320,    0,  321,  324,    0,    0,    0,  319,
        0,  322,    0,    0,  324,  322,  323,    0,    0,    0,
      320,  326,    0,  322,    0,    0,  325,  321,  325,  325,

      325,    0,  323,  327,  324,  327,  327,  327,    0,    0,
      326,  322,  373,  373,  322,  328,  323,  328,  328,  328,
      325,  326,  373,  329,  373,  329,  329,  329,    0,  330,
        0,  330,  330,  330,    0,    0,  373,    0,  327,  332,
        0,  332,  332,  332,  325,    0,    0,    0,  373,    0,
      325,  327,  373,    0,  373,  331,  328,  331,  331,  331,
        0,    0,    0,  328,  329,  373,    0,    0,  327,  330,
      333,  329,  333,  333,  333,    0,    0,  330,    0,  334,
      331,  334,  334,  334,    0,  328,  335,  332,  335,  335,
      335,    0,    0,  329,  333,    0,    0,  337,  330,  337,

      337,  337,  336,  331,  336,  336,  336,    0,  333,    0,
      331,    0,  338,  335,  338,  338,  338,  334,  333,    0,
        0,    0,    0,    0,  333,    0,  339,  334,  339,  339,
      339,    0,    0,  337,  335,    0,  340,  333,  340,  340,
      340,    0,  336,  335,    0,  337,  334,    0,  338,  341,
      336,  341,  341,  341,    0,  339,    0,    0,    0,    0,
      338,    0,    0,  337,    0,    0,  342,  339,  342,  342,
      342,  336,  341,  343,  339,  343,  343,  343,  338,  344,
        0,  344,  344,  344,  340,  339,    0,  345,    0,  345,
      345,  345,    0,    0,    0,    0,  339,  341,    0,    0,

      342,    0,  341,  346,  344,  346,  346,  346,  343,  347,
      345,  347,  347,  347,  342,    0,  348,    0,  348,  348,
      348,  343,  350,    0,  350,  350,  350,  344,  346,  352,
      342,  352,  352,  352,  344,  345,    0,    0,  343,  349,
      345,  349,  349,  349,  351,    0,  351,  351,  351,  347,
      348,  346,    0,  352,    0,    0,  350,  347,  346,  353,
        0,  353,  353,  353,  348,  354,    0,  354,  354,  354,
      350,    0,  370,  351,  349,  370,    0,  352,  347,    0,
      348,    0,  370,  352,    0,    0,  350,  349,    0,    0,
        0,    0,  351,  353,    0,    0,  355,  354,  355,  355,

      355,    0,  370,  351,  349,  370,  356,  353,  356,  356,
      356,  370,  357,  354,  357,  357,  357,    0,    0,    0,
        0,  355,  358,  353,  358,  358,  358,  354,  360,    0,
        0,  360,  366,  365,  356,    0,  365,    0,  360,    0,
      360,    0,    0,  365,  355,  365,    0,  366,    0,  360,
      366,  355,  357,    0,  356,    0,    0,  366,  360,  366,
      357,  360,    0,  365,  356,    0,  365,  360,  366,  360,
      358,    0,  365,    0,  365,  371,    0,  366,    0,    0,
      366,  357,    0,    0,    0,    0,  366,    0,  366,    0,
      371,    0,    0,  371,  376,  376,    0,  378,  378,    0,

      371,    0,  371,    0,  376,  376,  376,  378,  378,  378,
        0,  371,  513,    0,    0,  513,  379,  379,  376,    0,
      371,  378,  513,  371,    0,    0,  379,    0,  379,  371,
      376,  371,    0,  378,  376,  376,  376,  378,  378,  378,
      379,    0,  513,  381,  381,  513,    0,  376,    0,    0,
      378,  513,  379,  381,  381,  381,  379,  387,  379,  387,
      387,  387,  383,  383,    0,    0,    0,  381,    0,  379,
        0,    0,  383,  393,  383,  393,  393,  393,  387,  381,
        0,    0,    0,  381,  381,  381,  383,  388,    0,  388,
      388,  388,    0,    0,    0,    0,  381,  389,  383,  389,

      389,  389,  383,    0,  383,  387,    0,  390,  387,  390,
      390,  390,  388,    0,    0,  383,  391,    0,  391,  391,
      391,  393,  392,    0,  392,  392,  392,  394,    0,  394,
      394,  394,    0,    0,    0,  388,  389,    0,    0,  390,
        0,  391,  388,    0,    0,  389,    0,  395,  392,  395,
      395,  395,    0,    0,  396,  390,  396,  396,  396,  394,
        0,    0,    0,    0,  391,  389,    0,    0,    0,  390,
      392,  391,    0,    0,    0,  394,    0,  397,  392,  397,
      397,  397,  398,    0,  398,  398,  398,    0,  399,  394,
      399,  399,  399,    0,  400,  395,  400,  400,  400,    0,

        0,    0,  396,    0,  401,  397,  401,  401,  401,    0,
        0,    0,    0,  399,  398,  402,    0,  402,  402,  402,
      403,    0,  403,  403,  403,  397,    0,    0,    0,  401,
      398,    0,  400,    0,    0,  397,  399,  404,    0,  404,
      404,  404,  400,  399,  398,  405,    0,  405,  405,  405,
        0,  406,  401,  406,  406,  406,    0,    0,    0,  401,
        0,  400,  407,  402,  407,  407,  407,  408,  403,  408,
      408,  408,  409,    0,  409,  409,  409,  410,    0,  410,
      410,  410,    0,    0,  411,  404,  411,  411,  411,    0,
      406,    0,  412,  405,  412,  412,  412,    0,  413,  406,

      413,  413,  413,    0,    0,    0,  410,    0,    0,    0,
      407,    0,  409,    0,  414,  408,  414,  414,  414,  406,
      409,    0,    0,    0,  411,  410,    0,    0,    0,    0,
      412,  415,  411,  415,  415,  415,  410,    0,    0,    0,
      412,  409,    0,    0,    0,  416,  413,  416,  416,  416,
        0,    0,    0,  411,    0,    0,  415,    0,    0,  412,
        0,  417,  414,  417,  417,  417,    0,  418,    0,  418,
      418,  418,  419,    0,  419,  419,  419,    0,  420,  415,
      420,  420,  420,    0,    0,  416,  415,  421,  417,  421,
      421,  421,  422,  416,  422,  422,  422,  423,    0,  423,

      423,  423,  418,  426,    0,  426,  426,  426,  421,  417,
        0,  420,    0,    0,  416,  418,    0,    0,  417,  424,
      419,  424,  424,  424,  423,  425,  420,  425,  425,  425,
        0,    0,  418,  422,    0,  421,    0,    0,  421,    0,
      422,  420,  424,    0,    0,  423,  427,    0,  427,  427,
      427,  426,    0,    0,  423,    0,  428,  425,  428,  428,
      428,  429,  422,  429,  429,  429,  430,  424,  430,  430,
      430,    0,  424,  425,    0,  427,    0,  431,    0,  431,
      431,  431,  428,    0,    0,    0,  432,  425,  432,  432,
      432,  430,    0,  433,  427,  433,  433,  433,  434,    0,

      434,  434,  434,    0,  428,  427,    0,    0,    0,  429,
        0,    0,  428,    0,  430,  431,  435,    0,  435,  435,
      435,  430,    0,  434,    0,  431,  432,  436,    0,  436,
      436,  436,    0,  437,  432,  437,  437,  437,    0,    0,
        0,  433,    0,    0,  431,    0,  434,  438,  435,  438,
      438,  438,    0,  434,    0,  432,  439,    0,  439,  439,
      439,  436,    0,  440,  435,  440,  440,  440,  441,    0,
      441,  441,  441,  437,    0,  436,    0,    0,  435,    0,
        0,  437,    0,  442,  440,  442,  442,  442,    0,  439,
      441,  436,  438,    0,  443,  438,  443,  443,  443,    0,

        0,    0,  437,  444,  439,  444,  444,  444,    0,    0,
        0,  440,    0,    0,  440,    0,  441,    0,    0,  439,
      441,  438,    0,    0,    0,    0,  443,    0,  444,    0,
      445,  442,  445,  445,  445,  446,    0,  446,  446,  446,
        0,    0,  443,  447,    0,  447,  447,  447,    0,    0,
      448,  444,  448,  448,  448,    0,  443,  449,  444,  449,
      449,  449,    0,  450,    0,  450,  450,  450,  445,    0,
      447,    0,  451,  446,  451,  451,  451,    0,  445,    0,
        0,  447,  452,  446,  452,  452,  452,    0,    0,    0,
      448,  447,    0,    0,    0,  453,    0,  445,  448,  453,

      447,    0,  446,  453,  454,  449,  454,  454,  454,  453,
      447,  450,    0,  455,  452,  455,  455,  455,    0,  448,
      451,    0,    0,    0,    0,  453,    0,    0,    0,  453,
      452,    0,    0,  453,  455,    0,    0,    0,  456,  453,
      456,  456,  456,  454,  452,  457,    0,  457,  457,  457,
        0,  458,  454,  458,  458,  458,  459,    0,  459,  459,
      459,  455,    0,  460,  455,  460,  460,  460,    0,    0,
        0,  461,  454,  461,  461,  461,    0,  456,    0,    0,
      457,    0,    0,    0,    0,  459,  456,  463,    0,  463,
      463,  463,  465,  457,  465,  465,  465,  460,  462,  458,

      462,  462,  462,    0,  459,    0,  456,    0,  463,    0,
      457,  460,    0,  461,  464,  459,  464,  464,  464,  461,
      466,  462,  466,  466,  466,    0,  467,  460,  467,  467,
      467,  465,    0,    0,    0,  463,    0,    0,  463,    0,
      465,    0,  461,    0,    0,    0,  462,    0,    0,  464,
        0,  462,  466,  470,    0,  470,  470,  470,  466,  467,
      465,  468,  464,  468,  468,  468,    0,  469,  466,  469,
      469,  469,    0,  471,  467,  471,  471,  471,  470,  464,
        0,  472,  466,  472,  472,  472,    0,  466,  469,  467,
      468,  473,    0,  473,  473,  473,    0,    0,  471,    0,

      474,  470,  474,  474,  474,    0,    0,    0,  470,  468,
      472,    0,    0,    0,    0,  469,  473,    0,  469,    0,
      468,  471,  475,    0,  475,  475,  475,    0,  471,  472,
      476,    0,  476,  476,  476,  474,    0,    0,    0,  473,
      472,  477,    0,  477,  477,  477,  473,    0,  474,  478,
        0,  478,  478,  478,  479,  475,  479,  479,  479,  480,
        0,  480,  480,  480,    0,  474,    0,    0,    0,    0,
      475,    0,  476,  481,  477,  481,  481,  481,  476,  479,
        0,    0,  480,    0,    0,  475,    0,  478,  482,  477,
      482,  482,  482,    0,    0,    0,  484,  478,  484,  484,

      484,  476,  479,    0,  477,    0,    0,  480,  481,  479,
        0,    0,  480,  482,    0,  483,  478,  483,  483,  483,
      485,  481,  485,  485,  485,    0,    0,  486,  484,  486,
      486,  486,    0,    0,    0,    0,  482,  487,  481,  487,
      487,  487,    0,  482,  484,    0,    0,    0,  488,  485,
      488,  488,  488,    0,    0,  483,    0,  489,  484,  489,
      489,  489,    0,  483,    0,    0,    0,  490,  485,  490,
      490,  490,    0,    0,  491,  486,  491,  491,  491,  485,
      489,    0,  488,    0,  483,  487,    0,  492,    0,  492,
      492,  492,    0,    0,    0,    0,  488,    0,  493,  490,

      493,  493,  493,    0,  494,  489,  494,  494,  494,    0,
      489,    0,  488,    0,  495,  490,  495,  495,  495,    0,
        0,    0,  491,    0,  497,  494,  497,  497,  497,  490,
      492,    0,    0,    0,    0,  492,  496,    0,  496,  496,
      496,  499,    0,  499,  499,  499,  493,    0,    0,  495,
        0,  497,  494,    0,  498,  494,  498,  498,  498,  492,
        0,  496,  495,    0,    0,    0,    0,  500,  499,  500,
      500,  500,  497,    0,  501,    0,  501,  501,  501,  495,
        0,  497,    0,  502,  496,  502,  502,  502,  500,  499,
        0,  496,  498,  504,    0,  504,  504,  504,  499,    0,

        0,  503,  498,  503,  503,  503,    0,  505,    0,  505,
      505,  505,    0,  520,    0,  500,  520,    0,  500,    0,
        0,  498,  501,  520,    0,    0,  503,  504,    0,    0,
        0,  502,  505,  506,    0,  506,  506,  506,    0,    0,
        0,  504,    0,  520,    0,    0,  520,    0,    0,  503,
        0,    0,  520,  521,  521,  505,  503,  504,  506,    0,
      522,  522,  505,  521,    0,  521,    0,    0,  524,  524,
      522,    0,  522,    0,    0,  526,  526,  521,  524,    0,
      524,  506,    0,    0,  522,  526,    0,  526,  506,  521,
        0,    0,  524,  521,    0,  521,  522,    0,    0,  526,

      522,    0,  522,    0,  524,    0,  521,    0,  524,    0,
      524,  526,    0,  522,    0,  526,    0,  526,    0,  528,
      528,  524,  529,  529,    0,    0,    0,    0,  526,  528,
      528,  528,  529,  529,  529,    0,  532,    0,  532,  532,
      532,  530,  530,  528,    0,  534,  529,  534,  534,  534,
        0,  530,    0,  530,    0,  528,    0,    0,  529,  528,
      528,  528,  529,  529,  529,  530,    0,    0,    0,    0,
      532,    0,  528,    0,    0,  529,  533,  530,  533,  533,
      533,  530,    0,  530,  532,    0,  535,    0,  535,  535,
      535,    0,    0,  534,  530,  536,    0,  536,  536,  536,

      532,  537,    0,  537,  537,  537,    0,  538,    0,  538,
      538,  538,    0,    0,    0,  533,  536,  539,    0,  539,
      539,  539,    0,    0,  533,  535,  540,    0,  540,  540,
      540,    0,    0,  541,  535,  541,  541,  541,  542,    0,
      542,  542,  542,  536,  533,    0,  536,    0,  543,  537,
      543,  543,  543,    0,  535,  538,  544,    0,  544,  544,
      544,    0,    0,    0,  545,  539,  545,  545,  545,  546,
        0,  546,  546,  546,  540,  547,    0,  547,  547,  547,
      548,  541,  548,  548,  548,    0,  542,  549,    0,  549,
      549,  549,    0,    0,    0,  550,  543,  550,  550,  550,

      547,    0,    0,  546,  544,  551,    0,  551,  551,  551,
        0,  553,  545,  553,  553,  553,    0,  546,    0,    0,
      548,    0,  552,  547,  552,  552,  552,    0,  548,    0,
      547,    0,  553,  546,  554,  549,  554,  554,  554,    0,
        0,    0,  555,  550,  555,  555,  555,    0,  556,  548,
      556,  556,  556,  551,  557,    0,  557,  557,  557,  553,
      552,  558,  553,  558,  558,  558,    0,    0,    0,  556,
      552,    0,  554,    0,  555,    0,    0,  559,    0,  559,
      559,  559,  554,    0,    0,    0,  558,    0,    0,  552,
      555,    0,    0,    0,  557,    0,  556,    0,    0,  556,

        0,  554,  557,  559,  555,    0,    0,    0,  560,  558,
      560,  560,  560,    0,    0,  561,  558,  561,  561,  561,
        0,    0,    0,  557,  562,  559,  562,  562,  562,    0,
        0,    0,  563,  559,  563,  563,  563,  564,    0,  564,
      564,  564,  565,    0,  565,  565,  565,  566,    0,  566,
      566,  566,    0,    0,    0,  567,  560,  567,  567,  567,
        0,    0,  568,  561,  568,  568,  568,    0,    0,    0,
        0,  566,  562,  569,  565,  569,  569,  569,    0,  570,
      563,  570,  570,  570,  567,  564,    0,    0,    0,  571,
      565,  571,  571,  571,    0,  566,    0,    0,  568,    0,

        0,  566,    0,  567,  565,  569,    0,    0,    0,    0,
      568,  570,    0,  572,  567,  572,  572,  572,    0,    0,
        0,  569,  573,    0,  573,  573,  573,  570,  568,  574,
        0,  574,  574,  574,    0,  569,    0,  571,  572,    0,
        0,  570,  575,    0,  575,  575,  575,  576,    0,  576,
      576,  576,    0,    0,    0,  573,  577,    0,  577,  577,
      577,  572,  578,    0,  578,  578,  578,    0,  572,  574,
      573,  575,  576,    0,    0,    0,  581,  574,  581,  581,
      581,    0,  577,    0,  579,  573,  579,  579,  579,  580,
      575,  580,  580,  580,    0,  576,    0,    0,  574,    0,

        0,  575,  576,  582,  577,  582,  582,  582,    0,  579,
      578,  583,  577,  583,  583,  583,    0,  585,  581,  585,
      585,  585,    0,  580,  581,    0,    0,  584,  582,  584,
      584,  584,  579,    0,    0,    0,    0,  580,  586,  579,
      586,  586,  586,    0,    0,    0,    0,  581,    0,    0,
      583,  582,  587,  580,  587,  587,  587,    0,  582,  583,
      585,    0,    0,  584,    0,  585,  588,    0,  588,  588,
      588,    0,  586,    0,  591,  584,  591,  591,  591,  583,
      587,  592,    0,  592,  592,  592,  586,    0,    0,  585,
        0,  588,  589,  584,  589,  589,  589,    0,    0,    0,

      587,  590,  586,  590,  590,  590,  592,    0,  591,  593,
      587,  593,  593,  593,  588,    0,  594,    0,  594,  594,
      594,  588,  591,  597,    0,  597,  597,  597,    0,  592,
        0,  595,  589,  595,  595,  595,  592,    0,  591,    0,
      589,  590,    0,    0,  593,  594,    0,    0,    0,  590,
        0,  596,  595,  596,  596,  596,  598,  593,  598,  598,
      598,  589,    0,  597,  594,  599,    0,  599,  599,  599,
      590,  597,  596,    0,  593,  594,    0,    0,    0,  595,
        0,    0,  595,  600,    0,  600,  600,  600,  599,    0,
        0,    0,  597,  602,  598,  602,  602,  602,    0,  596,

        0,    0,  596,    0,  598,  601,  600,  601,  601,  601,
        0,    0,    0,  599,    0,    0,    0,  603,  599,  603,
      603,  603,  604,  598,  604,  604,  604,  602,    0,    0,
      601,  600,    0,    0,    0,  606,  600,  606,  606,  606,
        0,  602,  605,    0,  605,  605,  605,  604,  607,    0,
      607,  607,  607,  601,    0,    0,    0,  602,    0,  609,
      601,  609,  609,  609,    0,  603,    0,  605,    0,  606,
      604,  608,    0,  608,  608,  608,  610,  604,  610,  610,
      610,    0,    0,  606,  611,    0,  611,  611,  611,  612,
      605,  612,  612,  612,    0,    0,  607,  605,    0,  606,

      610,  614,  609,  614,  614,  614,  613,  609,  613,  613,
      613,  608,    0,  615,  612,  615,  615,  615,  617,  608,
      617,  617,  617,  618,  610,  618,  618,  618,  614,  613,
      610,  609,  611,    0,    0,    0,    0,  612,    0,  616,
      608,  616,  616,  616,  612,    0,    0,    0,  621,  614,
      621,  621,  621,  615,  613,    0,    0,    0,  614,  613,
        0,  615,  618,    0,    0,  620,  617,  620,  620,  620,
        0,  618,    0,  619,  616,  619,  619,  619,    0,    0,
        0,    0,  615,    0,    0,    0,  622,  616,  622,  622,
      622,  618,  620,    0,    0,    0,  621,    0,  623,  619,

      623,  623,  623,  624,  616,  624,  624,  624,  625,    0,
      625,  625,  625,  620,  626,    0,  626,  626,  626,    0,
        0,  619,  620,    0,    0,    0,  622,    0,  627,  619,
      627,  627,  627,    0,  622,    0,  628,  624,  628,  628,
      628,    0,    0,  626,    0,    0,  623,    0,    0,    0,
        0,  624,    0,  635,  635,  622,  625,  641,    0,  641,
      641,  641,  626,  635,    0,  635,    0,  624,  636,  636,
      627,  628,    0,  626,    0,    0,  627,  635,  636,    0,
      636,  641,    0,  644,  628,  644,  644,  644,    0,  635,
      637,  637,  636,  635,  642,  635,  642,  642,  642,  627,

      637,  628,  637,    0,  636,  641,  635,    0,  636,    0,
      636,  641,  638,  638,  637,  640,  640,  644,    0,    0,
        0,  636,  638,    0,  638,  640,  637,  640,    0,    0,
      637,  644,  637,  642,    0,    0,  638,    0,    0,  640,
        0,    0,  642,  637,    0,    0,    0,  644,  638,    0,
        0,  640,  638,    0,  638,  640,  643,  640,  643,  643,
      643,    0,  642,    0,    0,  638,    0,  645,  640,  645,
      645,  645,  646,    0,  646,  646,  646,  647,    0,  647,
      647,  647,  648,    0,  648,  648,  648,    0,    0,    0,
        0,  643,  649,    0,  649,  649,  649,    0,  650,    0,

      650,  650,  650,    0,  643,    0,    0,  651,  645,  651,
      651,  651,    0,    0,    0,  645,    0,    0,    0,    0,
      646,  643,  648,  650,  649,  647,    0,    0,    0,  652,
      648,  652,  652,  652,    0,    0,    0,  645,    0,  653,
      649,  653,  653,  653,    0,    0,  650,  651,    0,    0,
        0,  648,    0,  650,  649,  651,  654,    0,  654,  654,
      654,  655,  653,  655,  655,  655,    0,    0,  656,  652,
      656,  656,  656,    0,    0,    0,  651,  652,  657,    0,
      657,  657,  657,    0,    0,    0,  658,  653,  658,  658,
      658,    0,  653,  659,    0,  659,  659,  659,  652,  660,

        0,  660,  660,  660,  654,    0,    0,    0,  661,  655,
      661,  661,  661,  656,    0,    0,  656,    0,  659,    0,
      662,  658,  662,  662,  662,  663,  657,  663,  663,  663,
        0,    0,    0,  660,  658,  664,    0,  664,  664,  664,
        0,  659,  656,    0,    0,    0,    0,  660,  659,    0,
      663,  658,    0,    0,    0,    0,  661,    0,  665,  662,
      665,  665,  665,  660,    0,    0,    0,  666,  662,  666,
      666,  666,    0,  663,  664,  667,    0,  667,  667,  667,
      663,    0,  668,  664,  668,  668,  668,    0,  662,  669,
        0,  669,  669,  669,    0,    0,  667,  670,  665,  670,

      670,  670,    0,  664,    0,  666,  665,  671,    0,  671,
      671,  671,    0,    0,    0,  666,  675,  669,  675,  675,
      675,    0,  670,  667,    0,    0,  667,  665,    0,  672,
      668,  672,  672,  672,  666,    0,  673,  669,  673,  673,
      673,    0,    0,  675,    0,  670,  674,  669,  674,  674,
      674,    0,  670,    0,    0,  671,  676,  673,  676,  676,
      676,    0,    0,    0,  675,    0,    0,  678,  672,  678,
      678,  678,    0,  675,    0,  674,  677,  672,  677,  677,
      677,  676,    0,    0,  673,    0,  679,  673,  679,  679,
      679,    0,    0,    0,  674,    0,  680,  672,  680,  680,

      680,    0,    0,    0,  676,  674,  681,    0,  681,  681,
      681,  676,    0,    0,  677,  678,  682,  680,  682,  682,
      682,  679,    0,    0,  677,  683,    0,  683,  683,  683,
        0,    0,    0,    0,  679,    0,  684,  682,  684,  684,
      684,    0,    0,  677,  680,    0,    0,  680,    0,  683,
        0,  679,    0,  685,  681,  685,  685,  685,  686,    0,
      686,  686,  686,    0,  682,    0,    0,  682,  687,    0,
      687,  687,  687,  683,  684,    0,    0,    0,  688,  683,
      688,  688,  688,  686,  684,  685,  689,    0,  689,  689,
      689,  690,    0,  690,  690,  690,  691,    0,  691,  691,

      691,  685,    0,  684,    0,    0,  686,  692,  687,  692,
      692,  692,    0,  686,    0,  685,  687,    0,  688,  693,
        0,  693,  693,  693,    0,    0,  688,  694,  691,  694,
      694,  694,    0,  690,  689,  692,    0,  687,  695,  690,
      695,  695,  695,    0,  691,    0,  696,  688,  696,  696,
      696,    0,    0,    0,    0,  692,    0,  697,  691,  697,
      697,  697,  690,    0,    0,  692,    0,  693,  698,    0,
      698,  698,  698,    0,  699,  694,  699,  699,  699,  700,
        0,  700,  700,  700,    0,  696,  695,  701,    0,  701,
      701,  701,    0,    0,  696,  702,    0,  702,  702,  702,

        0,    0,    0,    0,  703,  697,  703,  703,  703,    0,
        0,    0,    0,    0,  696,    0,  698,  704,  702,  704,
      704,  704,  699,    0,    0,    0,    0,  700,  701,  705,
        0,  705,  705,  705,  706,  701,  706,  706,  706,    0,
        0,    0,    0,  702,  703,    0,    0,  707,  702,  707,
      707,  707,  703,    0,  705,    0,  708,  701,  708,  708,
      708,    0,    0,    0,  709,  704,  709,  709,  709,    0,
        0,    0,    0,  703,    0,    0,  710,  705,  710,  710,
      710,    0,  706,    0,  705,    0,    0,  707,    0,  709,
      708,  711,  711,    0,  713,  707,  713,  713,  713,  712,

      712,  711,    0,  711,  708,    0,    0,    0,    0,  712,
      710,  712,  709,    0,    0,  711,  707,    0,    0,  709,
      708,    0,    0,  712,  710,    0,  713,  711,    0,    0,
        0,  711,    0,  711,  714,  712,  714,  714,  714,  712,
      710,  712,  713,  715,  711,  715,  715,  715,    0,    0,
        0,    0,  712,    0,    0,  716,  713,  716,  716,  716,
      717,    0,  717,  717,  717,    0,    0,    0,  718,  714,
      718,  718,  718,  719,    0,  719,  719,  719,    0,    0,
        0,    0,  714,    0,  720,  717,  720,  720,  720,    0,
      721,  715,  721,  721,  721,    0,    0,    0,  722,  714,

      722,  722,  722,  716,    0,    0,    0,  723,  717,  723,
      723,  723,    0,    0,    0,  717,  718,    0,    0,    0,
        0,  719,  724,  722,  724,  724,  724,  725,  723,  725,
      725,  725,  720,  726,    0,  726,  726,  726,  721,  727,
        0,  727,  727,  727,    0,  728,  722,  728,  728,  728,
        0,    0,    0,  722,    0,  723,    0,    0,  723,    0,
      727,  725,  729,    0,  729,  729,  729,    0,    0,  730,
      724,  730,  730,  730,  731,  725,  731,  731,  731,    0,
      732,  726,  732,  732,  732,    0,    0,  727,    0,    0,
      727,  725,    0,  728,    0,  733,  729,  733,  733,  733,

        0,    0,  734,    0,  734,  734,  734,    0,    0,    0,
      729,    0,  736,  731,  736,  736,  736,  730,  733,    0,
        0,  735,  731,  735,  735,  735,  729,  734,  732,  737,
        0,  737,  737,  737,    0,    0,  738,    0,  738,  738,
      738,    0,  731,  733,    0,    0,    0,    0,  733,    0,
      734,  739,  737,  739,  739,  739,    0,  734,    0,  735,
      736,    0,    0,  740,    0,  740,  740,  740,    0,  735,
      738,  741,    0,  741,  741,  741,  742,  737,  742,  742,
      742,    0,  737,  743,  738,  743,  743,  743,  735,    0,
        0,    0,  744,    0,  744,  744,  744,    0,  745,  739,

      738,  740,  745,    0,    0,    0,  745,    0,    0,  741,
        0,  740,  745,    0,  742,  743,  744,    0,  746,  741,
      746,  746,  746,  747,  742,  747,  747,  747,  745,    0,
      740,  743,  745,    0,    0,    0,  745,    0,  741,    0,
      744,    0,  745,  742,    0,  743,  744,  748,    0,  748,
      748,  748,    0,    0,    0,  749,  746,  749,  749,  749,
        0,  750,    0,  750,  750,  750,  746,    0,    0,    0,
        0,  747,  751,    0,  751,  751,  751,  752,    0,  752,
      752,  752,    0,    0,    0,  746,  750,  753,    0,  753,
      753,  753,    0,    0,    0,  748,    0,  751,    0,    0,

      749,    0,  754,  749,  754,  754,  754,    0,  753,  750,
      755,    0,  755,  755,  755,  756,  750,  756,  756,  756,
      751,    0,  752,    0,    0,  752,    0,  751,    0,  749,
      757,    0,  757,  757,  757,  753,    0,  758,  753,  758,
      758,  758,    0,    0,    0,    0,  756,    0,  755,    0,
      754,  752,  759,    0,  759,  759,  759,  760,  755,  760,
      760,  760,  761,  756,  761,  761,  761,  762,    0,  762,
      762,  762,    0,    0,    0,  758,  756,  755,  757,  765,
        0,  765,  765,  765,  760,  758,  763,    0,  763,  763,
      763,  764,    0,  764,  764,  764,  761,    0,    0,  762,

      759,    0,    0,    0,  758,  760,    0,    0,    0,    0,
      761,  763,    0,    0,  760,  762,  766,  764,  766,  766,
      766,  767,    0,  767,  767,  767,  761,  765,  768,  762,
      768,  768,  768,  769,  763,  769,  769,  769,    0,  764,
      770,  763,  770,  770,  770,    0,  771,  764,  771,  771,
      771,    0,  772,    0,  772,  772,  772,    0,    0,    0,
      767,    0,    0,    0,  766,    0,  769,    0,  773,  767,
      773,  773,  773,    0,    0,    0,  768,  772,    0,    0,
      770,  769,  774,    0,  774,  774,  774,    0,  770,  767,
        0,    0,    0,    0,  771,    0,  769,    0,    0,  775,

      772,  775,  775,  775,    0,    0,  773,  772,    0,  770,
      776,    0,  776,  776,  776,  777,  773,  777,  777,  777,
      774,    0,    0,  778,  775,  778,  778,  778,    0,  779,
      774,  779,  779,  779,    0,  773,  780,  776,  780,  780,
      780,    0,    0,    0,  777,    0,    0,  775,    0,  774,
        0,    0,  778,  781,  775,  781,  781,  781,  776,    0,
        0,    0,    0,  777,    0,    0,  782,  776,  782,  782,
      782,  778,    0,    0,  777,    0,  783,  779,  783,  783,
      783,    0,  778,  784,  780,  784,  784,  784,  782,    0,
        0,  785,  781,  785,  785,  785,    0,    0,    0,    0,

        0,  781,    0,  786,  784,  786,  786,  786,  787,    0,
      787,  787,  787,    0,  782,  783,    0,    0,  782,    0,
        0,  781,    0,    0,  783,    0,  788,  786,  788,  788,
      788,  784,    0,  789,  784,  789,  789,  789,    0,  785,
        0,    0,  787,  790,  783,  790,  790,  790,    0,    0,
        0,  786,    0,    0,    0,    0,  787,  786,  791,    0,
      791,  791,  791,    0,    0,    0,    0,  789,  790,    0,
        0,    0,  787,  792,  788,  792,  792,  792,    0,    0,
      793,  789,  793,  793,  793,  794,    0,  794,  794,  794,
      795,  790,  795,  795,  795,    0,    0,  789,  790,  796,

        0,  796,  796,  796,    0,  797,  791,  797,  797,  797,
      798,    0,  798,  798,  798,  799,    0,  799,  799,  799,
      800,  792,  800,  800,  800,  794,    0,  801,  793,  801,
      801,  801,    0,  794,    0,  795,    0,  796,  795,    0,
      799,    0,  802,    0,  802,  802,  802,  796,    0,    0,
      798,    0,    0,  797,  794,    0,    0,    0,  798,  800,
        0,    0,    0,  799,  795,    0,  796,    0,  800,    0,
      799,  802,    0,    0,  803,  801,  803,  803,  803,  798,
      804,    0,  804,  804,  804,    0,    0,    0,  800,  805,
      802,  805,  805,  805,  806,    0,  806,  806,  806,    0,

        0,  802,  807,  803,  807,  807,  807,  808,    0,  808,
      808,  808,  809,    0,  809,  809,  809,  810,    0,  810,
      810,  810,  803,    0,    0,    0,  807,  811,  804,  811,
      811,  811,    0,  803,  806,    0,  812,  805,  812,  812,
      812,    0,  806,  813,  809,  813,  813,  813,    0,  814,
      807,  814,  814,  814,    0,  808,  807,    0,    0,    0,
      809,    0,    0,  806,    0,  810,  815,    0,  815,  815,
      815,    0,  811,  814,  809,  811,  816,    0,  816,  816,
      816,    0,    0,  813,  812,  817,    0,  817,  817,  817,
      818,  813,  818,  818,  818,    0,    0,  814,    0,    0,

        0,  811,  819,  814,  819,  819,  819,  820,    0,  820,
      820,  820,  813,    0,  815,  816,  821,    0,  821,  821,
      821,    0,    0,  822,  816,  822,  822,  822,  823,    0,
      823,  823,  823,  817,    0,    0,    0,  824,  818,  824,
      824,  824,    0,    0,  816,  825,  820,  825,  825,  825,
      819,    0,  823,    0,    0,  820,    0,  827,  824,  827,
      827,  827,    0,  822,  821,  826,  825,  826,  826,  826,
      828,  822,  828,  828,  828,  820,  823,  829,    0,  829,
      829,  829,  823,    0,    0,  824,    0,    0,  824,    0,
      826,    0,  822,  825,    0,  830,  825,  830,  830,  830,

      831,    0,  831,  831,  831,  827,    0,    0,  832,  829,
      832,  832,  832,  826,    0,    0,    0,    0,  828,  833,
      826,  833,  833,  833,  834,  829,  834,  834,  834,  835,
        0,  835,  835,  835,    0,    0,  831,    0,  836,  829,
      836,  836,  836,  830,  833,    0,  834,    0,  831,    0,
      837,  835,  837,  837,  837,    0,  832,    0,  838,    0,
      838,  838,  838,    0,    0,    0,  831,  833,    0,    0,
        0,    0,  834,    0,  833,  837,  834,  835,    0,  838,
      839,  835,  839,  839,  839,  840,  836,  840,  840,  840,
      841,    0,  841,  841,  841,    0,    0,  842,  837,  842,

      842,  842,    0,    0,    0,  837,  838,    0,  843,  838,
      843,  843,  843,    0,    0,    0,    0,  840,    0,    0,
        0,  844,  841,  844,  844,  844,    0,    0,  839,    0,
        0,  843,    0,  840,    0,  842,    0,  845,  841,  845,
      845,  845,    0,    0,    0,  842,  844,  840,    0,    0,
        0,  846,  841,  846,  846,  846,  843,    0,    0,    0,
        0,  843,  845,  847,  842,  847,  847,  847,  848,  844,
      848,  848,  848,    0,    0,  849,  844,  849,  849,  849,
      850,    0,  850,  850,  850,  845,    0,    0,  847,    0,
        0,    0,  845,    0,    0,    0,    0,    0,    0,  846,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  847,    0,    0,    0,    0,  848,    0,  847,    0,
        0,    0,    0,  849,    0,    0,    0,    0,  850,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  857,
        0,  857,  857,  857,  857,  857,  858,  858,  858,  859,
      859,    0,  859,    0,  859,  859,  859,  859,  859,  860,

      860,    0,  860,  860,  860,  860,  860,  860,  860,  861,
        0,    0,  861,  861,    0,    0,  861,  861,  861,  862,
        0,    0,  862,  862,    0,    0,  862,  862,  862,  863,
        0,    0,  863,  863,    0,    0,  863,  863,  863,  864,
      864,  865,  865,    0,  865,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[232] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #define YY_DECL int yylex()

    bool DEBUG = false;

    bool endsWith(const std::string & str, const std::string & suffix);
    void removeUnderline(std::string * str);
    void removeUnderline(char * str);

    struct Date {
        int day = 0;
        int month = 0;
        int year = -1;
    };

    enum TimeFormat {
        AM, PM, HOURS_24
    };

    struct Time {
        int hour = 0;
        int minute = 0;
        int second = 0;
        TimeFormat format = HOURS_24;
    };

    struct DateTime {
        Date* date = nullptr;
        Time* time = nullptr;
    };

    void printDateTimeLiteral(DateTime& datetime);
#line 2455 "lexer.flex.cpp"

#line 2457 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2
#define DATETIME 3
#define DATE 4
#define TIME 5

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 56 "lexer.l"



#line 60 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;



#line 2693 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 852 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 851 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 72 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 74 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 100 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 102 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 103 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 104 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 105 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 107 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 108 "lexer.l"
{printf("Found keyword : %s\n", yytext);}    
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 109 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 113 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 114 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 115 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 116 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 117 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 118 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 119 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 120 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 121 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 122 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 123 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 124 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 125 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 126 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 129 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 130 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 131 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 132 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 133 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 134 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 135 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 136 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 137 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 138 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 139 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 140 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 141 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 142 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 143 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 144 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 145 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 146 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 147 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 148 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 149 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 150 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 151 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 152 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 153 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 154 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 155 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 156 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 157 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 158 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 159 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 160 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 161 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 162 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 163 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 164 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 165 "lexer.l"
{printf("Found keyword : %s\n", yytext);}   
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 166 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 167 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 168 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 169 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 170 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 171 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 172 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 173 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 174 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 175 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 176 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 177 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 178 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 179 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 180 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 181 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 182 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 183 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 184 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 185 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 186 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 187 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 188 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 189 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 190 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 191 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 192 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 193 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 194 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 195 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 196 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 197 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 198 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 199 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 200 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 201 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 202 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 203 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 204 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 205 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 206 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 207 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 208 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 209 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 210 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 211 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 212 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 213 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 214 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 215 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 216 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 217 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 218 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 219 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 221 "lexer.l"
{printf("Found nothing literal\n");}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 222 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 223 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 226 "lexer.l"
{printf("Found a XOR operator: %s\n", yytext);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 227 "lexer.l"
{printf("Found a MUL operator: %s\n", yytext);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 228 "lexer.l"
{printf("Found a FLOOR_DIV operator: %s\n", yytext);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 229 "lexer.l"
{printf("Found a DIV operator: %s\n", yytext);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 230 "lexer.l"
{printf("Found a PLUS operator: %s\n", yytext);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 231 "lexer.l"
{printf("Found a MINUS operator: %s\n", yytext);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 232 "lexer.l"
{printf("Found an ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 233 "lexer.l"
{printf("Found a XOR_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 234 "lexer.l"
{printf("Found a MUL_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 235 "lexer.l"
{printf("Found a ADD_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 236 "lexer.l"
{printf("Found a SUB_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 237 "lexer.l"
{printf("Found a LESS_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 238 "lexer.l"
{printf("Found a LESS operator: %s\n", yytext);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 239 "lexer.l"
{printf("Found a GREATER operator: %s\n", yytext);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 240 "lexer.l"
{printf("Found a GREATER_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 241 "lexer.l"
{printf("Found a NOT_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 242 "lexer.l"
{printf("Found a STR_CONCAT operator: %s\n", yytext);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 243 "lexer.l"
{printf("Found a STR_CONCAT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 244 "lexer.l"
{printf("Found a RSHIFT operator: %s\n", yytext);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 245 "lexer.l"
{printf("Found a LSHIFT operator: %s\n", yytext);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 246 "lexer.l"
{printf("Found a LSHIFT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 247 "lexer.l"
{printf("Found a RSHIFT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 248 "lexer.l"
{printf("Found an FLOOR_DIV_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 249 "lexer.l"
{printf("Found a DIV_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 251 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 252 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 253 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 254 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 256 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 257 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 258 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 259 "lexer.l"
{printf("Error: String literal wasn't closed\n"); yyterminate();}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 260 "lexer.l"
{
    printf("Error: String literal wasn't closed at line %d\n", yylineno - 1); 
    if (!DEBUG) {
        yyterminate();
    }
    else {
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 269 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        printf("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
    } else {
        printf("Error: character literal can have only one character, not string, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 279 "lexer.l"
{printf("Found a string literal: %s\n", strLiteral.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 282 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 287 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 292 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 298 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = atoi(intLiteral); printf("Found a integer value: %d\n", intValue);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 314 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 16);
    printf("Found a hex integer value: %d\n", intValue);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 331 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 8);
    printf("Found a oct integer value: %d\n", intValue);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 348 "lexer.l"
{
    std::string lexeme(yytext);
    removeUnderline(&lexeme);
    doubleValue = atof(lexeme.c_str());
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 355 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    removeUnderline(floatLiteral);
    doubleValue = atof(floatLiteral);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 363 "lexer.l"
{
    printf("Invalid float literal: %s at line %d\n", yytext, yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 368 "lexer.l"
{BEGIN(DATETIME); datetime = DateTime(); printf("Found opening datetime literal lexeme\n");}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 369 "lexer.l"
{printf("Found a whitespace inside datetime literal\n");}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 370 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
    dateOrTimePositionIndex = 0;
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 374 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = AM;
    tempIntLiteral = -1;
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 380 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = PM;
    tempIntLiteral = -1;
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 386 "lexer.l"
{
    if (datetime.time != nullptr) {
        printf("Error: Time must not be declared before date, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date = new Date();
    datetime.date->month = tempIntLiteral;
    dateOrTimePositionIndex++;
    BEGIN(DATE);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 396 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 399 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.date->day = tempIntLiteral;
            break;
        default:
            printf("Error: date has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    }
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 410 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components\n");
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    BEGIN(INITIAL);
    BEGIN(DATETIME);
    tempIntLiteral = -1;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 420 "lexer.l"
{
    BEGIN(TIME);
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 427 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 430 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.time->minute = tempIntLiteral;
            break;
        default:
            printf("Error: time has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    };
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 441 "lexer.l"
{
    datetime.time->format = AM;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 444 "lexer.l"
{
    datetime.time->format = PM;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 447 "lexer.l"
{
    printf("Error: date literal characters in time literal: %d\n", yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 452 "lexer.l"
{
    if (datetime.date == nullptr && datetime.time == nullptr) {
        printf("Error: Unrecognized date literal at line %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    if (tempIntLiteral != -1) {
        printf("Error: Unrecognized int literal: %d at line %d\n", tempIntLiteral, yylineno);
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 466 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    printf("Found a date literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 478 "lexer.l"
{
    if (dateOrTimePositionIndex < 1) {
        printf("Error: Missing time components: %d\n", yylineno);
    } else if (dateOrTimePositionIndex == 1) {
        datetime.time->minute = tempIntLiteral;
    } else if (dateOrTimePositionIndex == 2) {
        datetime.time->second = tempIntLiteral;
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 492 "lexer.l"
{
    printf("Error: invalid characters in datetime literal at line %d: %s\n", yylineno, yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 497 "lexer.l"
{
    printf("Error: invalid characters in datetime literal at line %d: %s\n", yylineno, yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 502 "lexer.l"
{
    printf("Error: invalid characters in datetime literal at line %d: %s\n", yylineno, yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 507 "lexer.l"
{printf("Error: line break in datetime literal at line %d\n", yylineno);}
	YY_BREAK
case YY_STATE_EOF(DATETIME):
#line 508 "lexer.l"
{printf("Error: unexpected file end in datetime literal at line %d\n", yylineno); yyterminate(); }
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 510 "lexer.l"
{printf("Error: line break in datetime literal at line %d\n", yylineno); if (!DEBUG) yyterminate(); }
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 511 "lexer.l"
{ printf("Error: line break in datetime literal at line %d\n", yylineno); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 514 "lexer.l"
{ printf("Found a separator left parenthesis: %s\n", yytext); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 515 "lexer.l"
{printf("Found a separator right parenthesis: %s\n", yytext);}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 516 "lexer.l"
{printf("Found a separator left curly brace: %s\n", yytext); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 517 "lexer.l"
{ printf("Found a separator right curly brace: %s\n", yytext); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 518 "lexer.l"
{printf("Found a separator question mark: %s\n", yytext); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 519 "lexer.l"
{printf("Found a separator point: %s\n", yytext); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 520 "lexer.l"
{printf("Found a separator exclamation mark: %s\n", yytext); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 521 "lexer.l"
{ printf("Found a separator comma: %s\n", yytext); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 522 "lexer.l"
{printf("Found a separator colon: %s\n", yytext); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 524 "lexer.l"
{printf("Found a identifier: %s\n", yytext);}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 526 "lexer.l"
{printf("Found a whitespace\n");}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 527 "lexer.l"
{printf("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 528 "lexer.l"
{printf("Found end of line %d\n\n", yylineno - 1);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(TIME):
#line 529 "lexer.l"
{printf("File ended\n"); yyterminate();}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 531 "lexer.l"
ECHO;
	YY_BREAK
#line 4130 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 852 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 852 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 851);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 531 "lexer.l"


void removeUnderline(std::string* str) {
    if (str == nullptr) {
        return; 
    }
    str->erase(std::remove(str->begin(), str->end(), '_'), str->end());
}

void removeUnderline(char* str) {
    if (str == nullptr) {
        return; 
    }

    char* writePtr = str;
    char* readPtr = str;

    while (*readPtr != '\0') {
        if (*readPtr != '_') {
            *writePtr = *readPtr;
            writePtr++;
        }
        readPtr++;
    }

    *writePtr = '\0';
}


bool endsWith(const std::string& str, const std::string& suffix)
{
    return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
}

void printDateTimeLiteral(DateTime& datetime) {
    if (datetime.date != nullptr) {
        printf("Month: %d\n", datetime.date->month);
        printf("Day: %d\n", datetime.date->day);
        printf("Year: %d\n", datetime.date->year);
    }
    if (datetime.time != nullptr) {
        printf("Hour: %d\n", datetime.time->hour);
        printf("Minute: %d\n", datetime.time->minute);
        printf("Second: %d\n", datetime.time->second);
        printf("Time format: ");
        if (datetime.time->format == AM) {
            printf("AM\n");
        }
        else if (datetime.time->format == PM) {
            printf("PM\n");
        }
        else {
            printf("24-hour format\n");
        }
    }
}

void runTests() {
    DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };
    int numFiles = sizeof(files) / sizeof(files[0]);
    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        printf("Processing file: %s\n", files[i]);
        yylex();
        fclose(yyin);
        BEGIN(INITIAL);
        yylineno = 1;
    }
}

int main(int argc, char** argv) {
    if (argc > 1) {
        if (strcmp(argv[1], "--debug") == 0) {
            runTests();
            return 0;
        }
        fopen_s(&yyin, argv[1], "r");
        yylex();
    }
    else {
        printf("File not found");
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
+ Скобки и управляющие символы (Микулина)
*/
