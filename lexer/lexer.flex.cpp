#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 232
#define YY_END_OF_BUFFER 233
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[846] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  233,  232,  229,  231,  225,  179,  199,  168,
      176,  219,  220,  153,  156,  226,  157,  224,  155,  193,
      227,  164,  158,  165,  223,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  232,  154,  152,
      232,  221,  222,  180,  187,  189,  232,  177,  178,  217,
      200,  218,  214,  204,  201,  208,  217,  217,  207,  215,
      206,  205,  216,  213,  209,  210,  232,  232,  229,    0,
      231,  169,    0,    0,  160,  161,  162,  196,  175,    0,

      193,    0,  193,  193,  193,    0,  190,  171,  163,  167,
      166,  170,  228,  228,  228,  228,  228,   40,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,   49,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   54,  228,   18,   19,  228,  228,  228,  132,  228,
      228,  228,  228,  228,  228,  228,  135,   25,  228,   26,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  108,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,    0,  174,  159,

        0,  228,  180,  186,  188,  185,  182,  183,  184,  181,
      177,  217,  200,  213,  201,  202,  203,  207,  205,  209,
      211,  212,    0,  194,  195,  196,  197,    0,    0,  196,
        0,  196,  193,  193,  193,    0,    0,  190,  190,  190,
        0,  172,  173,  228,  228,  113,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  122,  228,  228,
      228,  228,   87,  228,  228,  228,  228,  228,  228,  228,
      126,  228,  228,   89,  228,  228,  228,  228,  228,  228,

      228,  228,   94,  131,  228,  228,  228,   21,  228,  228,
      228,  228,  228,   23,  228,   98,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  176,  228,
      228,  228,  228,   31,  228,  228,  228,  228,  228,  228,
      228,  107,  228,  228,  228,  228,   35,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  148,
        0,  228,  230,  194,  194,  194,  194,    0,  191,  195,
      195,  195,  195,    0,  192,    0,  196,  196,    0,    0,
        0,    0,  198,  190,  190,  190,  228,  228,  228,  228,
      228,  228,    3,  228,   78,  115,  228,  228,  228,  228,

      228,   43,   80,  117,    6,  228,   81,  118,  228,  228,
      228,  228,    8,   46,  228,  228,  228,  228,   84,  228,
      228,  228,  228,  228,  228,  123,   12,  228,   13,  228,
      228,  228,   14,  228,  228,  228,  228,  228,  228,  228,
      228,  128,  228,  228,  228,  228,  228,  228,   20,   57,
       95,  228,  228,  228,  228,  228,  228,   60,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  106,  143,  228,  228,  228,
       34,  228,  150,  228,  228,  228,  228,  228,  228,  228,

       37,   74,  228,  228,   38,  228,    0,  198,  194,  194,
      194,  191,  191,  191,    0,  195,  195,  195,  192,  192,
      192,    0,    0,  196,    0,  198,  198,  228,  228,   76,
      228,  228,  114,   41,    4,   42,   79,  116,    5,   44,
        7,  228,  228,  228,   83,  120,    9,  228,  228,  228,
      228,  228,  228,  228,  228,  124,   51,   88,  125,  151,
      228,  228,  228,  228,  228,  228,   91,  228,  228,  228,
      228,  228,  228,   56,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,   66,  228,

      228,  228,  104,  228,  228,  228,  142,  228,  228,  228,
      228,  228,   71,  228,  228,  228,   36,  228,  110,  228,
      111,  228,  228,  228,    0,  191,  191,  191,  192,  192,
      192,    0,  228,  228,  228,  228,  228,   82,  119,  228,
      228,  228,  228,  228,  228,   86,   50,  228,   15,  228,
      228,  228,   53,  228,  228,  228,  228,  228,  228,   58,
      228,  228,   22,  228,  228,  228,  228,  228,  228,   99,
      228,  100,   63,  228,  228,  228,  228,  228,  228,  228,
      103,  228,  228,  228,   30,   67,  141,  228,  105,   32,
       69,   33,  228,  228,  228,  109,  228,   73,  228,  228,

      228,  228,    0,  198,    0,  198,  228,  228,    2,   77,
      228,   47,  121,   10,   48,  228,  228,   90,  228,  127,
      228,   17,  228,  129,  228,   93,  228,  228,  228,   59,
      228,  228,  149,  228,  228,  228,  228,  228,  228,  228,
      102,  138,  228,  228,  228,  228,  228,   68,  228,  228,
       72,  228,  146,  228,  228,  228,  228,  228,   45,   85,
      228,   52,  228,  228,   55,  228,  228,  228,  228,  228,
      228,  228,   62,  136,  228,  228,  228,  228,   28,  228,
      228,   29,  228,  228,  144,  145,  147,  228,  228,  228,
       39,  228,  228,  228,  130,  228,  228,   97,  134,  228,

      228,  101,  228,   27,  228,   65,  228,  228,   70,  228,
      112,    1,   11,  228,   92,  228,  228,  228,  228,  228,
       64,  139,  228,   75,  228,   96,  228,  228,  228,  137,
      228,  228,  133,  228,  228,  228,  228,  228,  228,  140,
      228,   24,   61,   16,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    1,   21,
       22,   23,   24,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   41,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   41,   71,   72,   73,   74,   75,   76,   77,
       78,   41,   79,    1,   80,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    2,    3,    4,    5,    6,    4,    4,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    7,    7,    2,
        1,    1,    1,    1,    8,    8,    8,    8,    8,    8,
        9,    9,   10,    9,    9,   10,    9,    9,    9,    9,
        9,    9,   10,    9,   10,    9,    9,    9,    9,    1,
        5,    4,    1,   10,    8,    8,    8,    8,    8,    8,
        9,    9,   10,    9,    9,   10,    9,    9,    9,    9,
        9,   10,    9,   10,    9,    9,    9,    9,    1,    1
    } ;

static const flex_int16_t yy_base[857] =
    {   0,
        0,    0,   78,   79,  299,  292,   83,  107,  131,  137,
      151,  167,  293, 7295,   86,  284, 7295, 7295, 7295,   72,
     7295, 7295, 7295,  262,  258, 7295,  255,   72,  230,  222,
     7295,   74, 7295,   70, 7295,  293,  112,  362,  433,  499,
      190,  191,  192,  573,  204,  250,  278,  253,  620,  358,
      285,  670,  415,  506,  356,  524,  442,  194,  217,  214,
      126, 7295, 7295,    0, 7295,  101,  427,    0, 7295,    0,
      229, 7295, 7295,   90,   96, 7295,   50,   98,  226, 7295,
     7295,  141, 7295,  157,  160, 7295,  126,  130,  216,  207,
      201, 7295,    0,  165, 7295, 7295, 7295,  578, 7295,  170,

        0,  253, 7295, 7295, 7295,  310,  733,  153, 7295, 7295,
     7295,  114,   79,  371,  615,  519,  620,  512, 7295,  678,
      749,  766,  772,  819,  668,  734,  777,  840,  848,  913,
      853,  860,  881,  907,  940,  954,  648,  972,  981,  994,
      964, 1014, 1006, 1023, 1044, 1056, 1072, 1077, 1086, 1091,
     1099,  876, 1105, 1104, 1172, 1110, 1178, 1183, 1189, 1195,
     1211, 1238, 1225, 1251, 1262, 1267, 1272, 1278, 1303, 1309,
     1314, 1333, 1319, 1363, 1373, 1412, 1386, 1395, 1358, 1422,
     1444, 1437, 1488,  735, 1401, 1442, 1498, 1515, 1521, 1503,
     1535, 1540, 1522, 1590, 1595, 1603, 1608,  176, 7295, 7295,

      183, 1613,    0, 7295, 7295, 7295, 7295, 7295, 7295, 7295,
        0,    0,  119,  188,  195,    0,    0,  110,  207,  215,
     7295, 7295,  240, 1590, 1607, 1657, 7295,  397,  244, 1664,
      251,  571, 7295, 7295, 7295,  255,  515, 7295, 7295, 7295,
     1293, 7295, 7295, 1668, 1701, 1730, 1736, 1741, 1754, 1759,
     1767, 1772, 1783, 1790, 1801, 1814, 1819, 1842, 1830, 1848,
     1854, 1869, 1895, 1903, 1909, 1916, 1924, 1938, 1932, 1971,
     1979, 1994, 2001, 2006, 2012, 2018, 2030, 1877, 2048, 2077,
     2084, 2089, 2098, 2105, 2113, 2119, 2131, 2145, 2160, 2169,
     2174, 2194, 2200, 2207, 2230, 2236, 2254, 2259, 2264, 2269,

     2318, 2288, 2301, 2328, 2335, 2344, 2352, 2361, 2375, 2382,
     2393, 2404, 2410, 2417, 2424, 2411, 2471, 2479, 2484, 2497,
     2502, 2507, 2512, 2531, 2520, 2562, 2570, 2584, 2602, 2612,
     2617, 2623, 2631, 2636, 2642, 2670, 2695, 2700, 2710, 2717,
     2725, 2730, 2757, 2768, 2785, 2790, 2796, 2804, 2821, 2809,
     2837, 2860, 2851, 2874, 2879, 2884, 2889, 2901, 2915, 2931,
      272, 2938,   96, 2919, 7295, 7295, 7295, 1516, 2932, 2933,
     7295, 7295, 7295, 2967, 2983,  316, 2990, 2993,  525,  320,
      331,  339, 3026, 7295, 7295, 7295, 3063, 3069, 3074, 3083,
     3095, 3100, 3088, 3105, 3125, 3130, 3155, 3160, 3166, 3172,

     3177, 3182, 3193, 3215, 3224, 3231, 3240, 3245, 3250, 3255,
     3262, 3273, 3278, 3304, 3313, 3325, 3330, 3341, 3347, 3360,
     3367, 3379, 3397, 3407, 3429, 3434, 3439, 3444, 3462, 3469,
     3481, 3486, 3493, 3502, 3511, 3518, 3528, 3533, 3542, 3558,
     3567, 3583, 3591, 3596, 3608, 3614, 3622, 3632, 3638, 3655,
     3661, 3674, 2626, 3690, 3695, 3708, 3715, 3721, 3730, 3737,
     3749, 3764, 3779, 3770, 3790, 3804, 3811, 3819, 3843, 3837,
     3851, 3879, 3884, 3893, 3898, 3911, 3916, 3922, 3940, 3933,
     3948, 3969, 3974, 3997, 4002, 4007, 4016, 4023, 4030, 4036,
     4044, 4063, 4070, 4086, 4077, 4091, 4097, 4117, 4126, 4147,

     4156, 4167, 4175, 4185, 4199, 4207,  433, 4202, 7295, 7295,
     7295, 7295, 7295, 7295, 4104, 7295, 7295, 7295, 7295, 7295,
     7295, 4202,  353, 4222,  437, 4257, 7295, 4284, 4290, 4190,
     4296, 4301, 4218, 4306, 4317, 4323, 4337, 4343, 4353, 4359,
     4366, 4372, 4377, 4386, 4392, 4408, 4413, 4419, 4427, 4435,
     4442, 4447, 4460, 4485, 4509, 4477, 4503, 4514, 4519, 4524,
     4534, 4539, 4544, 4550, 4556, 4574, 4581, 4605, 4610, 4597,
     4617, 4623, 4631, 4638, 4647, 4659, 4680, 4688, 4694, 4701,
     4712, 4706, 4717, 4744, 4774, 4779, 4786, 4791, 4801, 4652,
     4807, 4821, 4857, 4829, 4871, 4879, 4885, 4904, 4909, 4914,

     4941, 4946, 4951, 4961, 4970, 4979, 4956, 5012, 4988, 5017,
     5022, 5045, 5050, 5055, 5069, 5079, 5084, 5097, 5105, 5112,
     5126, 5138, 5131, 5147,  599, 7295, 7295, 7295, 7295, 7295,
     7295,  646, 5159, 5152, 5168, 5190, 5215, 5223, 5228, 5239,
     5245, 5255, 5264, 5286, 5292, 5270, 5298, 5317, 5325, 5335,
     5347, 5356, 5364, 5374, 5382, 5406, 5415, 5421, 5429, 5444,
     5458, 5464, 5449, 5479, 5500, 5491, 5505, 5511, 5522, 5531,
     5538, 5554, 5561, 5574, 5580, 5588, 5597, 5608, 5613, 5635,
     5640, 5647, 5662, 5668, 5674, 5697, 5703, 5709, 5717, 5725,
     5730, 5735, 5740, 5752, 5758, 5764, 5782, 5787, 5792, 5799,

     5811, 5816,  374, 5827,  424, 5830, 5867, 5872, 5885, 5898,
     5906, 5914, 5919, 5924, 5932, 5938, 5947, 5953, 5971, 5979,
     5985, 6000, 6007, 6012, 6018, 6026, 6040, 6047, 6065, 6073,
     6078, 6094, 6087, 6105, 6112, 6136, 6120, 6145, 6130, 6173,
     6188, 6194, 6202, 6210, 6216, 6222, 6227, 6249, 6257, 6277,
     6282, 6288, 6298, 6310, 6315, 6329, 6339, 6348, 6366, 6378,
     6386, 6395, 6403, 6408, 6413, 6419, 6427, 6435, 6455, 6460,
     6468, 6482, 6488, 6496, 6518, 6529, 6535, 6543, 6550, 6556,
     6565, 6585, 6593, 6605, 6614, 6619, 6632, 6642, 6647, 6661,
     6652, 6666, 6671, 6681, 6713, 6730, 6736, 6742, 6748, 6753,

     6764, 6769, 6777, 6783, 6800, 6811, 6824, 6830, 6838, 6849,
     6858, 6863, 6873, 6879, 6887, 6892, 6898, 6905, 6912, 6934,
     6939, 6962, 6967, 6972, 6977, 6988, 6993, 7001, 7024, 7030,
     7035, 7052, 7059, 7064, 7077, 7082, 7095, 7089, 7102, 7113,
     7129, 7119, 7138, 7156, 7295, 7208, 7218, 7228, 7238, 7245,
     7248, 7258, 7268, 7278, 7282, 7284
    } ;

static const flex_int16_t yy_def[857] =
    {   0,
      845,    1,  846,  846,  847,  847,  848,  848,  849,  849,
      849,  849,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  850,  850,  850,  850,  850,
       39,   39,  850,  850,  850,   39,   39,   39,   44,   41,
       39,   47,   47,  850,  850,   53,  850,  851,  845,  845,
      851,  845,  845,  852,  845,  845,  845,  853,  845,  854,
      845,  845,  845,  845,  845,  845,  854,  854,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  855,  845,  845,  845,  845,  845,  845,  845,

       30,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  850,  850,  850,  850,  850,  845,  850,
      850,  850,   53,  850,   39,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  130,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,   39,  850,  850,   44,  850,  850,   39,  850,
       39,  850,  850,   56,  850,   47,  850,  850,  850,   56,
      850,  850,   56,  850,  850,  850,  850,  851,  845,  845,

      845,  850,  852,  845,  845,  845,  845,  845,  845,  845,
      853,  854,  845,  845,  845,  854,  854,  845,  845,  845,
      845,  845,  845,  856,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,   56,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,   56,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      845,  850,  845,  856,  845,  845,  845,  845,  364,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,   39,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  845,  845,  845,  845,  845,  845,
      845,  845,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  845,  845,  845,  845,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,   39,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,    0,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845
    } ;

static const flex_int16_t yy_nxt[7376] =
    {   0,
       14,   15,   16,   17,   18,   19,   14,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   45,   46,   47,   48,   49,   50,
       45,   51,   52,   53,   54,   55,   56,   57,   45,   58,
       59,   14,   60,   61,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   45,   62,   63,
       65,   65,   66,   66,   71,   72,  216,   89,   73,   98,
       98,  111,  112,   92,  108,  109,  110,   74,  363,   74,

       75,   75,   76,   93,  214,  204,  214,   77,   71,   72,
       94,  218,   73,  215,  215,  113,  216,  113,  113,  113,
      213,   74,   78,   74,   75,   75,   76,  205,   67,   67,
      119,   77,   79,   93,  217,  243,   80,   77,   79,   90,
       94,  201,   80,  197,  197,   81,   78,   81,   82,   82,
      120,   81,   78,   81,   82,   82,   83,  205,  219,  219,
      121,   77,  221,  119,  217,   84,  222,   84,   85,   85,
       86,  214,   83,  214,  242,   87,   78,  220,  220,  202,
      120,   84,  225,   84,   85,   85,   86,  230,  230,  121,
       88,   87,  221,  197,  197,  113,  222,  113,  113,  113,

      361,  361,  214,   91,  214,   87,   88,  113,  223,  113,
      113,  113,  215,  215,  143,  114,  151,   89,  114,  148,
       88,   87,  144,  114,  219,  219,  149,  218,  145,  150,
      213,  146,  220,  220,  147,  200,   88,  100,  199,  101,
      101,  223,  363,  119,  143,  114,  151,  198,  114,  148,
      102,   99,  144,  114,  103,  119,  149,  104,  145,  150,
      146,  226,  226,  147,  105,  231,  106,  231,  232,  232,
      232,  232,  381,  381,  114,  107,   97,  163,  156,   96,
      102,  164,  157,   95,  103,  114,   91,  104,  158,  507,
      507,  165,  845,  105,   69,  106,  113,  229,  113,  113,

      113,   69,  114,  845,  114,  845,  159,  163,  156,  175,
      114,  164,  157,  176,  845,  114,  160,  114,  158,  845,
      115,  165,  161,  114,  845,  508,  162,  845,  116,  845,
      117,  845,  114,  377,  377,  118,  159,  378,  378,  175,
      114,  845,  233,  176,  119,  234,  160,  114,  525,  525,
      115,  161,  235,  114,  845,  162,  383,  383,  116,  113,
      117,  113,  113,  113,  118,  113,  845,  113,  113,  113,
      524,  524,  233,  380,  113,  234,  113,  113,  113,  845,
      191,  235,  172,  845,  526,  845,  122,  123,  124,  125,
      114,  704,  704,  126,  127,  845,  114,  128,  845,  173,

      129,  845,  174,  845,  130,  131,  132,  119,  845,  376,
      191,  376,  172,  119,  377,  377,  122,  123,  124,  125,
      114,  845,  119,  126,  127,  845,  114,  128,  173,  845,
      129,  174,  845,  130,  131,  132,  113,  845,  113,  113,
      113,  706,  706,  114,  845,  113,  184,  113,  113,  113,
      507,  507,  206,  185,  525,  525,  186,  133,  845,  114,
      845,  134,  845,  187,  207,  135,  845,  845,  208,  845,
      209,  136,  845,  114,  845,  845,  184,  210,  845,  845,
      196,  845,  206,  185,  119,  186,  508,  133,  114,  845,
      526,  134,  187,  119,  207,  135,  845,  208,  845,  209,

      845,  136,  113,  845,  113,  113,  113,  845,  845,  113,
      196,  113,  113,  113,  845,  113,  845,  113,  113,  113,
      845,  845,  113,  137,  113,  113,  113,  382,  845,  382,
      845,  845,  383,  383,  138,  845,  139,  523,  188,  523,
      140,  189,  524,  524,  141,  845,  142,  845,  190,  845,
      119,  245,  192,  137,  845,  193,  194,  119,  845,  845,
      845,  845,  114,  119,  138,  195,  139,  845,  188,  140,
      119,  189,  114,  141,  845,  142,  113,  190,  113,  113,
      113,  245,  192,  845,  845,  193,  194,  845,  232,  232,
      845,  845,  114,  845,  195,  226,  226,  845,  227,  845,

      227,  114,  152,  845,  845,  227,  228,  227,  845,  153,
      154,  703,  227,  703,  845,  155,  704,  704,  113,  227,
      113,  113,  113,  113,  119,  113,  113,  113,  227,  845,
      227,  229,  152,  845,  845,  227,  228,  227,  845,  153,
      154,  227,  244,  845,  155,  166,  845,  246,  227,  167,
      845,  113,  845,  113,  113,  113,  114,  168,  705,  169,
      705,  170,  114,  706,  706,  171,  119,  845,  845,  845,
      845,  119,  244,  845,  281,  166,  845,  246,  845,  167,
      845,  113,  845,  113,  113,  113,  114,  168,  845,  169,
      170,  114,  257,  258,  171,  177,  259,  845,  178,  119,

      114,  179,  180,  845,  281,  845,  114,  845,  114,  845,
      845,  845,  845,  181,  182,  845,  247,  845,  183,  845,
      845,  845,  257,  258,  845,  177,  259,  845,  178,  119,
      114,  179,  180,  845,  845,  845,  114,  113,  114,  113,
      113,  113,  181,  182,  845,  845,  247,  183,  236,  845,
      101,  101,  113,  845,  113,  113,  113,  845,  260,  845,
      845,  237,  845,  344,  845,  238,  114,  114,  239,  113,
      845,  113,  113,  113,  845,  240,  345,  241,  845,  845,
      113,  845,  113,  113,  113,  119,  107,  845,  260,  845,
      248,  237,  249,  344,  250,  238,  114,  114,  239,  845,

      119,  251,  845,  114,  240,  345,  241,  845,  252,  253,
      254,  845,  845,  114,  261,  845,  845,  119,  845,  248,
      255,  249,  113,  250,  113,  113,  113,  845,  119,  845,
      845,  251,  845,  114,  845,  845,  845,  252,  253,  845,
      254,  845,  114,  113,  261,  113,  113,  113,  845,  255,
      256,  113,  845,  113,  113,  113,  113,  845,  113,  113,
      113,  845,  845,  113,  262,  113,  113,  113,  845,  845,
      119,  845,  845,  264,  845,  845,  845,  263,  845,  113,
      256,  113,  113,  113,  113,  265,  113,  113,  113,  845,
      845,  119,  271,  845,  262,  272,  845,  845,  845,  119,

      845,  270,  273,  264,  119,  845,  845,  263,  845,  845,
      113,  119,  113,  113,  113,  265,  113,  845,  113,  113,
      113,  845,  271,  845,  274,  272,  845,  119,  845,  845,
      270,  273,  119,  275,  845,  845,  276,  845,  266,  845,
      845,  845,  277,  113,  267,  113,  113,  113,  845,  845,
      268,  845,  845,  274,  845,  845,  269,  113,  119,  113,
      113,  113,  845,  275,  119,  845,  276,  113,  266,  113,
      113,  113,  277,  845,  267,  113,  278,  113,  113,  113,
      268,  279,  845,  845,  113,  269,  113,  113,  113,  845,
      845,  119,  287,  845,  845,  845,  845,  113,  280,  113,

      113,  113,  845,  845,  845,  119,  278,  845,  283,  113,
      279,  113,  113,  113,  282,  119,  845,  113,  285,  113,
      113,  113,  287,  119,  845,  284,  113,  280,  113,  113,
      113,  845,  119,  845,  845,  286,  845,  845,  283,  845,
      845,  289,  845,  282,  845,  119,  288,  113,  285,  113,
      113,  113,  845,  845,  284,  845,  845,  119,  845,  113,
      290,  113,  113,  113,  286,  119,  845,  845,  845,  845,
      845,  289,  845,  845,  119,  113,  288,  113,  113,  113,
      113,  845,  113,  113,  113,  291,  845,  845,  292,  113,
      290,  113,  113,  113,  113,  119,  113,  113,  113,  845,

      845,  845,  113,  845,  113,  113,  113,  119,  113,  293,
      113,  113,  113,  113,  291,  113,  113,  113,  292,  845,
      294,  845,  845,  119,  295,  845,  845,  845,  119,  114,
      845,  845,  845,  296,  297,  300,  298,  119,  845,  293,
      845,  114,  119,  845,  299,  845,  845,  301,  845,  294,
      119,  845,  845,  303,  295,  845,  119,  845,  845,  114,
      845,  119,  296,  297,  845,  300,  298,  845,  845,  845,
      845,  114,  845,  845,  299,  113,  301,  113,  113,  113,
      845,  113,  303,  113,  113,  113,  113,  845,  113,  113,
      113,  845,  113,  845,  113,  113,  113,  845,  113,  845,

      113,  113,  113,  304,  845,  845,  845,  845,  845,  302,
      845,  845,  305,  845,  113,  845,  113,  113,  113,  845,
      306,  307,  308,  119,  845,  845,  845,  845,  113,  119,
      113,  113,  113,  304,  119,  845,  845,  845,  845,  302,
      119,  113,  305,  113,  113,  113,  119,  845,  845,  845,
      306,  307,  308,  309,  113,  845,  113,  113,  113,  845,
      845,  312,  119,  310,  311,  113,  313,  113,  113,  113,
      113,  845,  113,  113,  113,  113,  119,  113,  113,  113,
      845,  113,  309,  113,  113,  113,  845,  845,  845,  119,
      845,  312,  845,  310,  311,  313,  845,  314,  315,  845,

      317,  845,  119,  845,  845,  316,  113,  845,  113,  113,
      113,  845,  113,  119,  113,  113,  113,  113,  119,  113,
      113,  113,  845,  119,  845,  384,  314,  315,  385,  119,
      317,  318,  845,  845,  316,  386,  113,  320,  113,  113,
      113,  845,  321,  114,  845,  845,  319,  114,  845,  845,
      845,  323,  845,  845,  119,  384,  845,  324,  385,  845,
      119,  318,  845,  845,  386,  119,  113,  320,  113,  113,
      113,  845,  321,  114,  322,  319,  113,  114,  113,  113,
      113,  323,  335,  845,  119,  845,  114,  324,  325,  113,
      114,  113,  113,  113,  845,  845,  336,  845,  113,  845,

      113,  113,  113,  322,  113,  326,  113,  113,  113,  845,
      845,  845,  335,  845,  119,  845,  114,  845,  325,  845,
      114,  845,  845,  845,  119,  113,  336,  113,  113,  113,
      333,  845,  845,  845,  332,  326,  327,  119,  334,  328,
      113,  114,  113,  113,  113,  845,  119,  845,  329,  114,
      845,  845,  119,  845,  330,  331,  845,  845,  845,  337,
      333,  845,  342,  332,  845,  845,  327,  334,  338,  328,
      114,  114,  339,  119,  845,  845,  114,  845,  329,  114,
      114,  845,  340,  330,  331,  341,  346,  845,  119,  337,
      347,  113,  342,  113,  113,  113,  845,  845,  338,  845,

      114,  113,  339,  113,  113,  113,  114,  845,  845,  845,
      114,  845,  340,  845,  341,  346,  845,  845,  113,  347,
      113,  113,  113,  845,  113,  343,  113,  113,  113,  845,
      845,  114,  845,  845,  351,  352,  845,  348,  113,  119,
      113,  113,  113,  113,  114,  113,  113,  113,  509,  119,
      355,  510,  349,  114,  356,  343,  845,  845,  511,  350,
      845,  114,  845,  114,  351,  352,  119,  348,  845,  845,
      845,  845,  119,  114,  845,  845,  353,  354,  509,  845,
      355,  510,  349,  114,  356,  845,  119,  511,  845,  350,
      845,  119,  114,  113,  845,  113,  113,  113,  113,  845,

      113,  113,  113,  845,  845,  353,  113,  354,  113,  113,
      113,  113,  845,  113,  113,  113,  113,  357,  113,  113,
      113,  845,  365,  845,  370,  366,  845,  359,  201,  845,
      845,  845,  367,  358,  368,  845,  845,  845,  845,  371,
      845,  119,  372,  369,  360,  845,  119,  357,  845,  373,
      845,  374,  365,  845,  119,  366,  845,  359,  845,  119,
      375,  367,  358,  368,  119,  845,  362,  845,  845,  371,
      845,  845,  372,  360,  226,  226,  845,  845,  373,  845,
      374,  378,  378,  845,  227,  228,  227,  845,  845,  845,
      845,  227,  379,  227,  845,  845,  114,  845,  227,  387,

      114,  845,  845,  845,  113,  227,  113,  113,  113,  388,
      229,  845,  845,  845,  227,  228,  227,  380,  845,  845,
      845,  227,  379,  227,  845,  389,  114,  227,  845,  387,
      114,  845,  845,  113,  227,  113,  113,  113,  388,  113,
      845,  113,  113,  113,  113,  845,  113,  113,  113,  845,
      845,  845,  119,  845,  390,  389,  845,  113,  845,  113,
      113,  113,  113,  845,  113,  113,  113,  845,  845,  392,
      113,  391,  113,  113,  113,  113,  845,  113,  113,  113,
      845,  119,  393,  394,  390,  845,  113,  119,  113,  113,
      113,  845,  119,  113,  845,  113,  113,  113,  845,  392,

      396,  391,  395,  845,  113,  119,  113,  113,  113,  397,
      119,  845,  393,  394,  845,  845,  845,  113,  119,  113,
      113,  113,  113,  119,  113,  113,  113,  845,  398,  845,
      396,  845,  395,  113,  119,  113,  113,  113,  400,  397,
      845,  119,  845,  845,  399,  113,  845,  113,  113,  113,
      845,  113,  119,  113,  113,  113,  403,  113,  398,  113,
      113,  113,  401,  845,  845,  119,  845,  845,  400,  845,
      119,  845,  113,  399,  113,  113,  113,  402,  845,  845,
      113,  119,  113,  113,  113,  845,  403,  845,  845,  404,
      845,  401,  845,  119,  845,  845,  845,  405,  113,  119,

      113,  113,  113,  845,  845,  119,  113,  402,  113,  113,
      113,  406,  113,  845,  113,  113,  113,  845,  404,  113,
      119,  113,  113,  113,  845,  407,  405,  113,  119,  113,
      113,  113,  845,  845,  845,  113,  408,  113,  113,  113,
      406,  113,  845,  113,  113,  113,  119,  845,  845,  845,
      845,  409,  410,  845,  119,  407,  845,  845,  845,  845,
      119,  845,  412,  845,  411,  845,  408,  119,  413,  845,
      845,  845,  845,  414,  113,  119,  113,  113,  113,  845,
      409,  410,  113,  119,  113,  113,  113,  845,  845,  119,
      845,  845,  412,  411,  845,  845,  845,  113,  413,  113,

      113,  113,  414,  845,  113,  845,  113,  113,  113,  113,
      415,  113,  113,  113,  845,  113,  416,  113,  113,  113,
      845,  113,  119,  113,  113,  113,  845,  845,  845,  845,
      119,  417,  418,  113,  419,  113,  113,  113,  845,  845,
      415,  845,  422,  845,  420,  119,  416,  421,  845,  845,
      845,  113,  119,  113,  113,  113,  845,  119,  423,  845,
      845,  417,  418,  119,  419,  845,  845,  845,  845,  119,
      845,  845,  422,  845,  420,  845,  424,  421,  845,  845,
      113,  119,  113,  113,  113,  845,  845,  113,  423,  113,
      113,  113,  113,  845,  113,  113,  113,  845,  845,  119,

      845,  113,  425,  113,  113,  113,  424,  845,  113,  845,
      113,  113,  113,  845,  845,  426,  113,  427,  113,  113,
      113,  845,  113,  845,  113,  113,  113,  845,  119,  845,
      428,  845,  425,  845,  113,  119,  113,  113,  113,  845,
      119,  429,  845,  845,  845,  426,  845,  427,  113,  119,
      113,  113,  113,  845,  845,  430,  119,  431,  845,  845,
      428,  845,  845,  113,  119,  113,  113,  113,  432,  845,
      119,  429,  113,  845,  113,  113,  113,  113,  845,  113,
      113,  113,  119,  845,  430,  845,  845,  431,  433,  845,
      845,  845,  845,  435,  845,  845,  119,  113,  432,  113,

      113,  113,  434,  113,  845,  113,  113,  113,  845,  845,
      113,  119,  113,  113,  113,  845,  845,  433,  845,  845,
      119,  845,  436,  435,  845,  119,  437,  845,  845,  845,
      845,  434,  845,  113,  845,  113,  113,  113,  845,  113,
      845,  113,  113,  113,  845,  119,  845,  845,  845,  845,
      438,  119,  436,  845,  439,  440,  437,  113,  119,  113,
      113,  113,  113,  845,  113,  113,  113,  113,  845,  113,
      113,  113,  113,  845,  113,  113,  113,  845,  845,  438,
      441,  119,  845,  439,  845,  440,  443,  119,  845,  845,
      845,  113,  442,  113,  113,  113,  845,  446,  845,  444,

      845,  845,  445,  845,  113,  119,  113,  113,  113,  441,
      119,  845,  845,  845,  845,  119,  443,  845,  845,  845,
      119,  113,  442,  113,  113,  113,  448,  446,  845,  444,
      845,  113,  445,  113,  113,  113,  845,  845,  113,  119,
      113,  113,  113,  845,  845,  845,  447,  113,  845,  113,
      113,  113,  119,  845,  845,  113,  448,  113,  113,  113,
      845,  845,  845,  449,  113,  845,  113,  113,  113,  119,
      845,  845,  845,  845,  450,  845,  447,  845,  113,  119,
      113,  113,  113,  845,  845,  113,  119,  113,  113,  113,
      845,  451,  845,  449,  845,  119,  113,  845,  113,  113,

      113,  845,  845,  119,  450,  452,  454,  113,  845,  113,
      113,  113,  119,  113,  845,  113,  113,  113,  453,  845,
      113,  451,  113,  113,  113,  845,  119,  113,  455,  113,
      113,  113,  456,  119,  452,  845,  454,  845,  845,  114,
      845,  845,  459,  460,  119,  845,  845,  453,  845,  461,
      845,  457,  114,  845,  845,  119,  845,  845,  455,  845,
      845,  119,  456,  845,  845,  845,  845,  458,  119,  114,
      845,  845,  459,  460,  113,  119,  113,  113,  113,  461,
      457,  114,  113,  845,  113,  113,  113,  113,  845,  113,
      113,  113,  845,  845,  845,  845,  458,  845,  845,  462,

      113,  845,  113,  113,  113,  113,  845,  113,  113,  113,
      113,  845,  113,  113,  113,  113,  464,  113,  113,  113,
      463,  845,  119,  113,  845,  113,  113,  113,  845,  462,
      119,  467,  465,  845,  113,  119,  113,  113,  113,  845,
      845,  845,  845,  466,  845,  845,  464,  845,  119,  463,
      468,  845,  845,  119,  845,  472,  845,  469,  119,  845,
      845,  467,  465,  119,  845,  113,  845,  113,  113,  113,
      470,  119,  466,  113,  471,  113,  113,  113,  845,  468,
      845,  845,  119,  845,  845,  472,  469,  113,  845,  113,
      113,  113,  845,  845,  845,  845,  845,  474,  845,  845,

      470,  845,  845,  471,  473,  113,  845,  113,  113,  113,
      845,  845,  845,  119,  845,  113,  475,  113,  113,  113,
      113,  119,  113,  113,  113,  845,  113,  474,  113,  113,
      113,  845,  845,  473,  113,  119,  113,  113,  113,  113,
      476,  113,  113,  113,  845,  113,  475,  113,  113,  113,
      114,  845,  845,  119,  114,  845,  477,  845,  576,  480,
      845,  478,  845,  119,  577,  845,  479,  845,  119,  481,
      476,  845,  845,  113,  119,  113,  113,  113,  845,  845,
      114,  845,  119,  482,  114,  477,  845,  119,  576,  480,
      478,  845,  845,  119,  577,  479,  845,  845,  113,  481,

      113,  113,  113,  113,  845,  113,  113,  113,  845,  845,
      845,  483,  482,  113,  845,  113,  113,  113,  845,  845,
      113,  119,  113,  113,  113,  484,  845,  845,  113,  845,
      113,  113,  113,  113,  845,  113,  113,  113,  845,  845,
      483,  845,  845,  485,  845,  845,  119,  845,  845,  486,
      845,  119,  845,  845,  845,  484,  487,  488,  845,  845,
      113,  119,  113,  113,  113,  845,  845,  845,  119,  489,
      845,  113,  485,  113,  113,  113,  119,  845,  845,  486,
      845,  119,  845,  490,  845,  845,  487,  488,  113,  845,
      113,  113,  113,  113,  845,  113,  113,  113,  489,  113,

      845,  113,  113,  113,  845,  491,  845,  113,  119,  113,
      113,  113,  113,  490,  113,  113,  113,  845,  493,  119,
      845,  845,  494,  492,  113,  845,  113,  113,  113,  845,
      845,  845,  495,  845,  845,  491,  119,  845,  845,  845,
      113,  119,  113,  113,  113,  845,  497,  119,  493,  845,
      845,  845,  494,  492,  113,  119,  113,  113,  113,  845,
      119,  845,  495,  113,  496,  113,  113,  113,  845,  845,
      845,  845,  119,  845,  845,  498,  497,  113,  845,  113,
      113,  113,  113,  500,  113,  113,  113,  113,  119,  113,
      113,  113,  113,  496,  113,  113,  113,  499,  845,  845,

      845,  501,  119,  845,  113,  498,  113,  113,  113,  845,
      845,  119,  845,  500,  845,  845,  502,  504,  113,  503,
      113,  113,  113,  845,  845,  119,  845,  499,  845,  845,
      119,  501,  505,  845,  113,  119,  113,  113,  113,  845,
      119,  113,  845,  113,  113,  113,  502,  504,  845,  503,
      370,  365,  119,  201,  366,  845,  845,  845,  506,  845,
      845,  367,  505,  368,  512,  371,  119,  513,  372,  845,
      845,  845,  369,  845,  514,  373,  515,  374,  845,  845,
      845,  365,  119,  845,  366,  845,  375,  506,  845,  119,
      367,  362,  368,  845,  512,  371,  845,  513,  372,  516,

      370,  845,  517,  514,  373,  515,  374,  377,  377,  518,
      378,  378,  845,  845,  845,  519,  845,  227,  520,  227,
      227,  379,  227,  845,  845,  521,  845,  522,  845,  516,
      845,  227,  517,  845,  227,  845,  375,  845,  518,  845,
      845,  845,  845,  383,  383,  519,  380,  227,  520,  227,
      227,  379,  227,  527,  521,  527,  522,  845,  845,  845,
      227,  845,  845,  227,  845,  845,  113,  527,  113,  113,
      113,  845,  113,  845,  113,  113,  113,  113,  845,  113,
      113,  113,  845,  527,  845,  527,  113,  528,  113,  113,
      113,  113,  845,  113,  113,  113,  527,  529,  113,  845,

      113,  113,  113,  113,  845,  113,  113,  113,  113,  845,
      113,  113,  113,  845,  119,  845,  530,  528,  531,  845,
      119,  845,  845,  532,  845,  119,  845,  529,  113,  533,
      113,  113,  113,  113,  119,  113,  113,  113,  845,  119,
      534,  845,  845,  845,  845,  530,  119,  845,  531,  845,
      845,  119,  845,  532,  845,  845,  119,  845,  113,  533,
      113,  113,  113,  113,  845,  113,  113,  113,  845,  113,
      534,  113,  113,  113,  845,  113,  119,  113,  113,  113,
      113,  119,  113,  113,  113,  113,  535,  113,  113,  113,
      845,  845,  845,  845,  537,  536,  113,  845,  113,  113,

      113,  845,  845,  845,  845,  539,  119,  845,  845,  845,
      845,  119,  845,  538,  845,  845,  535,  119,  113,  845,
      113,  113,  113,  119,  537,  536,  845,  113,  119,  113,
      113,  113,  845,  119,  113,  539,  113,  113,  113,  845,
      845,  845,  538,  113,  119,  113,  113,  113,  113,  845,
      113,  113,  113,  113,  845,  113,  113,  113,  113,  845,
      113,  113,  113,  845,  845,  113,  119,  113,  113,  113,
      845,  845,  845,  540,  845,  119,  113,  845,  113,  113,
      113,  113,  119,  113,  113,  113,  845,  542,  845,  845,
      845,  119,  845,  541,  845,  845,  119,  845,  845,  845,

      845,  119,  540,  845,  845,  543,  119,  113,  845,  113,
      113,  113,  845,  119,  544,  845,  113,  542,  113,  113,
      113,  845,  541,  845,  119,  845,  845,  845,  113,  119,
      113,  113,  113,  113,  543,  113,  113,  113,  845,  845,
      845,  545,  845,  544,  113,  845,  113,  113,  113,  845,
      113,  845,  113,  113,  113,  119,  845,  845,  845,  845,
      547,  845,  845,  113,  119,  113,  113,  113,  546,  845,
      113,  545,  113,  113,  113,  845,  119,  845,  845,  548,
      845,  119,  113,  845,  113,  113,  113,  845,  845,  845,
      547,  550,  119,  845,  845,  845,  549,  546,  119,  845,

      113,  845,  113,  113,  113,  845,  845,  845,  845,  548,
      113,  119,  113,  113,  113,  845,  845,  845,  119,  845,
      845,  550,  845,  551,  845,  845,  549,  552,  845,  845,
      119,  845,  113,  553,  113,  113,  113,  113,  845,  113,
      113,  113,  113,  845,  113,  113,  113,  113,  119,  113,
      113,  113,  551,  845,  845,  845,  845,  552,  119,  845,
      845,  845,  845,  553,  554,  113,  845,  113,  113,  113,
      845,  555,  113,  556,  113,  113,  113,  845,  845,  845,
      119,  845,  845,  845,  113,  119,  113,  113,  113,  113,
      119,  113,  113,  113,  554,  119,  113,  557,  113,  113,

      113,  555,  845,  556,  845,  113,  845,  113,  113,  113,
      845,  845,  845,  119,  113,  845,  113,  113,  113,  845,
      119,  113,  558,  113,  113,  113,  845,  557,  845,  559,
      560,  113,  119,  113,  113,  113,  113,  119,  113,  113,
      113,  845,  845,  845,  119,  113,  561,  113,  113,  113,
      845,  558,  845,  119,  845,  562,  845,  845,  559,  845,
      560,  113,  119,  113,  113,  113,  845,  845,  845,  119,
      113,  563,  113,  113,  113,  845,  561,  845,  565,  119,
      845,  564,  566,  845,  119,  562,  113,  845,  113,  113,
      113,  845,  567,  119,  113,  845,  113,  113,  113,  113,

      563,  113,  113,  113,  845,  845,  845,  845,  565,  119,
      564,  113,  566,  113,  113,  113,  845,  113,  119,  113,
      113,  113,  567,  845,  569,  113,  568,  113,  113,  113,
      845,  845,  845,  845,  119,  113,  845,  113,  113,  113,
      845,  113,  119,  113,  113,  113,  845,  119,  845,  570,
      845,  845,  572,  845,  569,  571,  568,  845,  113,  119,
      113,  113,  113,  573,  113,  119,  113,  113,  113,  845,
      845,  845,  845,  119,  845,  574,  845,  113,  570,  113,
      113,  113,  572,  119,  571,  845,  845,  845,  845,  119,
      845,  845,  573,  113,  845,  113,  113,  113,  113,  845,

      113,  113,  113,  845,  574,  845,  119,  845,  845,  575,
      845,  113,  119,  113,  113,  113,  845,  845,  113,  579,
      113,  113,  113,  845,  113,  119,  113,  113,  113,  845,
      845,  845,  578,  113,  845,  113,  113,  113,  845,  575,
      113,  119,  113,  113,  113,  845,  119,  845,  845,  579,
      580,  845,  113,  581,  113,  113,  113,  845,  845,  119,
      845,  578,  582,  845,  845,  845,  119,  113,  845,  113,
      113,  113,  119,  113,  583,  113,  113,  113,  845,  580,
      845,  119,  113,  581,  113,  113,  113,  845,  119,  845,
      585,  845,  582,  113,  584,  113,  113,  113,  845,  845,

      119,  845,  845,  586,  583,  845,  845,  113,  587,  113,
      113,  113,  845,  845,  113,  119,  113,  113,  113,  845,
      585,  119,  113,  584,  113,  113,  113,  845,  845,  845,
      119,  845,  588,  586,  845,  845,  845,  845,  587,  589,
      113,  119,  113,  113,  113,  590,  113,  591,  113,  113,
      113,  592,  845,  845,  113,  119,  113,  113,  113,  845,
      845,  588,  119,  845,  845,  594,  845,  593,  845,  589,
      119,  845,  845,  845,  590,  845,  845,  591,  845,  595,
      845,  592,  113,  845,  113,  113,  113,  113,  119,  113,
      113,  113,  845,  845,  119,  594,  113,  593,  113,  113,

      113,  113,  119,  113,  113,  113,  845,  845,  845,  595,
      845,  596,  597,  845,  113,  845,  113,  113,  113,  113,
      845,  113,  113,  113,  845,  113,  845,  113,  113,  113,
      119,  598,  845,  845,  599,  119,  113,  845,  113,  113,
      113,  596,  597,  113,  119,  113,  113,  113,  845,  119,
      845,  113,  601,  113,  113,  113,  600,  845,  845,  604,
      845,  598,  119,  602,  599,  845,  845,  119,  603,  845,
      845,  845,  113,  119,  113,  113,  113,  113,  845,  113,
      113,  113,  601,  845,  119,  600,  605,  845,  845,  604,
      845,  119,  602,  845,  845,  845,  845,  606,  603,  119,

      113,  845,  113,  113,  113,  113,  845,  113,  113,  113,
      113,  845,  113,  113,  113,  845,  605,  607,  845,  113,
      119,  113,  113,  113,  845,  119,  113,  606,  113,  113,
      113,  845,  608,  113,  609,  113,  113,  113,  845,  113,
      845,  113,  113,  113,  845,  845,  607,  113,  119,  113,
      113,  113,  845,  119,  845,  845,  611,  845,  119,  845,
      610,  845,  608,  845,  609,  845,  113,  119,  113,  113,
      113,  612,  845,  113,  119,  113,  113,  113,  845,  845,
      113,  119,  113,  113,  113,  845,  611,  119,  845,  113,
      610,  113,  113,  113,  113,  119,  113,  113,  113,  845,

      113,  612,  113,  113,  113,  845,  845,  845,  845,  613,
      614,  845,  845,  845,  119,  615,  845,  845,  845,  616,
      113,  119,  113,  113,  113,  845,  845,  617,  119,  113,
      845,  113,  113,  113,  845,  845,  626,  119,  613,  627,
      614,  845,  119,  845,  845,  615,  628,  845,  119,  616,
      113,  845,  113,  113,  113,  845,  619,  617,  618,  113,
      845,  113,  113,  113,  845,  845,  626,  845,  119,  627,
      113,  620,  113,  113,  113,  628,  845,  119,  113,  845,
      113,  113,  113,  845,  845,  845,  619,  618,  113,  845,
      113,  113,  113,  113,  845,  113,  113,  113,  119,  845,

      845,  620,  113,  621,  113,  113,  113,  119,  845,  845,
      113,  845,  113,  113,  113,  845,  845,  845,  119,  507,
      507,  113,  622,  113,  113,  113,  119,  623,  845,  527,
      625,  527,  845,  621,  629,  624,  119,  630,  845,  524,
      524,  119,  845,  527,  631,  845,  845,  845,  845,  227,
      119,  227,  622,  845,  845,  508,  845,  623,  119,  527,
      625,  527,  845,  227,  629,  624,  845,  630,  845,  119,
      845,  845,  527,  631,  525,  525,  845,  845,  845,  227,
      845,  227,  845,  845,  527,  632,  527,  113,  845,  113,
      113,  113,  227,  113,  845,  113,  113,  113,  527,  113,

      845,  113,  113,  113,  113,  845,  113,  113,  113,  113,
      526,  113,  113,  113,  527,  632,  527,  845,  845,  845,
      113,  633,  113,  113,  113,  636,  113,  527,  113,  113,
      113,  845,  634,  845,  845,  119,  845,  845,  635,  845,
      113,  119,  113,  113,  113,  845,  113,  119,  113,  113,
      113,  633,  119,  845,  845,  636,  113,  119,  113,  113,
      113,  634,  113,  845,  113,  113,  113,  635,  119,  113,
      845,  113,  113,  113,  119,  113,  845,  113,  113,  113,
      113,  845,  113,  113,  113,  845,  845,  845,  119,  113,
      845,  113,  113,  113,  119,  113,  845,  113,  113,  113,

      845,  845,  845,  845,  119,  638,  845,  845,  845,  637,
      119,  113,  845,  113,  113,  113,  113,  119,  113,  113,
      113,  845,  113,  119,  113,  113,  113,  845,  119,  639,
      113,  845,  113,  113,  113,  638,  845,  119,  113,  637,
      113,  113,  113,  119,  845,  113,  845,  113,  113,  113,
      113,  641,  113,  113,  113,  845,  845,  845,  639,  119,
      640,  845,  845,  113,  119,  113,  113,  113,  845,  845,
      119,  644,  845,  845,  845,  845,  642,  643,  119,  845,
      113,  641,  113,  113,  113,  845,  119,  845,  113,  640,
      113,  113,  113,  119,  845,  845,  845,  845,  119,  845,

      845,  644,  845,  645,  845,  642,  113,  643,  113,  113,
      113,  119,  113,  646,  113,  113,  113,  113,  845,  113,
      113,  113,  113,  845,  113,  113,  113,  113,  119,  113,
      113,  113,  645,  845,  845,  845,  119,  113,  647,  113,
      113,  113,  113,  646,  113,  113,  113,  113,  845,  113,
      113,  113,  845,  113,  119,  113,  113,  113,  845,  113,
      119,  113,  113,  113,  845,  119,  649,  845,  647,  648,
      119,  845,  845,  845,  845,  119,  650,  113,  845,  113,
      113,  113,  845,  845,  113,  119,  113,  113,  113,  651,
      119,  652,  845,  845,  845,  119,  649,  845,  845,  648,

      113,  119,  113,  113,  113,  845,  650,  119,  113,  653,
      113,  113,  113,  113,  845,  113,  113,  113,  845,  651,
      113,  652,  113,  113,  113,  119,  113,  845,  113,  113,
      113,  845,  119,  654,  113,  845,  113,  113,  113,  653,
      656,  113,  845,  113,  113,  113,  655,  845,  119,  657,
      113,  658,  113,  113,  113,  113,  119,  113,  113,  113,
      659,  119,  113,  654,  113,  113,  113,  845,  119,  656,
      845,  845,  845,  845,  119,  660,  655,  845,  845,  657,
      845,  658,  119,  113,  675,  113,  113,  113,  845,  119,
      659,  113,  845,  113,  113,  113,  661,  113,  119,  113,

      113,  113,  845,  119,  113,  660,  113,  113,  113,  113,
      119,  113,  113,  113,  675,  113,  663,  113,  113,  113,
      113,  845,  113,  113,  113,  662,  661,  845,  845,  845,
      845,  119,  845,  845,  845,  845,  664,  845,  845,  119,
      665,  845,  845,  667,  845,  119,  663,  113,  668,  113,
      113,  113,  119,  845,  662,  845,  845,  119,  666,  845,
      845,  845,  845,  119,  845,  664,  845,  845,  119,  845,
      665,  845,  669,  667,  845,  845,  845,  113,  668,  113,
      113,  113,  113,  845,  113,  113,  113,  666,  845,  113,
      845,  113,  113,  113,  113,  119,  113,  113,  113,  845,

      845,  845,  669,  845,  113,  845,  113,  113,  113,  845,
      113,  845,  113,  113,  113,  845,  845,  670,  845,  673,
      845,  845,  671,  672,  113,  119,  113,  113,  113,  845,
      119,  676,  113,  845,  113,  113,  113,  119,  845,  674,
      845,  845,  119,  845,  845,  677,  670,  845,  845,  673,
      845,  671,  119,  672,  845,  845,  845,  845,  119,  845,
      113,  676,  113,  113,  113,  845,  845,  845,  845,  674,
      679,  845,  119,  845,  113,  677,  113,  113,  113,  845,
      119,  845,  113,  845,  113,  113,  113,  845,  113,  845,
      113,  113,  113,  845,  845,  845,  845,  680,  845,  679,

      678,  845,  845,  845,  845,  681,  845,  113,  119,  113,
      113,  113,  113,  682,  113,  113,  113,  113,  845,  113,
      113,  113,  119,  845,  845,  845,  845,  680,  845,  678,
      119,  845,  845,  845,  845,  681,  119,  845,  845,  845,
      845,  683,  684,  682,  113,  845,  113,  113,  113,  113,
      845,  113,  113,  113,  113,  119,  113,  113,  113,  113,
      119,  113,  113,  113,  113,  119,  113,  113,  113,  685,
      845,  683,  684,  113,  845,  113,  113,  113,  845,  845,
      845,  845,  113,  686,  113,  113,  113,  845,  845,  845,
      845,  113,  119,  113,  113,  113,  845,  119,  845,  685,

      845,  845,  119,  845,  687,  845,  689,  119,  845,  845,
      845,  845,  119,  686,  691,  113,  688,  113,  113,  113,
      113,  119,  113,  113,  113,  113,  845,  113,  113,  113,
      119,  845,  845,  687,  845,  845,  689,  845,  845,  119,
      690,  845,  845,  845,  691,  688,  845,  692,  113,  845,
      113,  113,  113,  113,  845,  113,  113,  113,  113,  845,
      113,  113,  113,  119,  845,  693,  845,  845,  119,  845,
      690,  845,  113,  119,  113,  113,  113,  692,  845,  845,
      845,  845,  113,  694,  113,  113,  113,  113,  845,  113,
      113,  113,  845,  845,  693,  845,  119,  695,  696,  845,

      113,  119,  113,  113,  113,  845,  119,  845,  113,  697,
      113,  113,  113,  694,  845,  113,  845,  113,  113,  113,
      119,  845,  845,  845,  845,  845,  695,  845,  696,  113,
      119,  113,  113,  113,  113,  119,  113,  113,  113,  697,
      698,  113,  845,  113,  113,  113,  845,  845,  119,  699,
      113,  845,  113,  113,  113,  113,  119,  113,  113,  113,
      845,  845,  113,  119,  113,  113,  113,  845,  845,  698,
      700,  113,  845,  113,  113,  113,  701,  119,  845,  699,
      845,  845,  119,  845,  845,  702,  707,  845,  845,  119,
      845,  845,  845,  113,  708,  113,  113,  113,  119,  845,

      700,  845,  845,  119,  845,  701,  709,  845,  845,  845,
      119,  845,  845,  845,  845,  702,  707,  845,  113,  119,
      113,  113,  113,  708,  845,  845,  113,  710,  113,  113,
      113,  113,  845,  113,  113,  113,  709,  845,  845,  845,
      845,  119,  113,  845,  113,  113,  113,  845,  113,  845,
      113,  113,  113,  845,  845,  845,  845,  710,  113,  711,
      113,  113,  113,  845,  845,  845,  119,  113,  845,  113,
      113,  113,  845,  113,  119,  113,  113,  113,  845,  119,
      713,  845,  712,  714,  845,  845,  845,  845,  711,  113,
      119,  113,  113,  113,  845,  113,  119,  113,  113,  113,

      845,  113,  845,  113,  113,  113,  119,  715,  845,  845,
      713,  712,  845,  714,  845,  119,  845,  845,  717,  845,
      113,  119,  113,  113,  113,  845,  845,  845,  113,  716,
      113,  113,  113,  845,  845,  845,  715,  119,  113,  845,
      113,  113,  113,  119,  845,  845,  845,  845,  717,  119,
      113,  845,  113,  113,  113,  845,  845,  845,  716,  113,
      845,  113,  113,  113,  845,  718,  845,  113,  119,  113,
      113,  113,  845,  719,  845,  720,  119,  113,  845,  113,
      113,  113,  845,  845,  845,  113,  119,  113,  113,  113,
      845,  845,  845,  721,  718,  845,  845,  845,  119,  845,

      845,  845,  845,  719,  845,  720,  845,  119,  845,  113,
      723,  113,  113,  113,  845,  119,  722,  845,  113,  845,
      113,  113,  113,  721,  113,  119,  113,  113,  113,  845,
      845,  845,  113,  119,  113,  113,  113,  845,  845,  845,
      723,  845,  845,  845,  845,  722,  845,  113,  724,  113,
      113,  113,  113,  727,  113,  113,  113,  119,  725,  845,
      845,  113,  726,  113,  113,  113,  119,  113,  845,  113,
      113,  113,  119,  845,  845,  845,  845,  724,  845,  845,
      119,  845,  113,  727,  113,  113,  113,  725,  845,  728,
      845,  726,  729,  845,  113,  119,  113,  113,  113,  845,

      119,  845,  845,  113,  845,  113,  113,  113,  113,  119,
      113,  113,  113,  845,  113,  119,  113,  113,  113,  728,
      845,  730,  729,  732,  731,  113,  845,  113,  113,  113,
      119,  845,  845,  845,  113,  733,  113,  113,  113,  734,
      845,  113,  119,  113,  113,  113,  845,  845,  845,  845,
      730,  119,  845,  732,  731,  845,  119,  113,  845,  113,
      113,  113,  119,  735,  113,  733,  113,  113,  113,  734,
      845,  845,  845,  119,  845,  845,  736,  113,  737,  113,
      113,  113,  119,  113,  845,  113,  113,  113,  845,  119,
      845,  113,  735,  113,  113,  113,  845,  845,  738,  845,

      113,  845,  113,  113,  113,  119,  736,  739,  737,  845,
      845,  113,  119,  113,  113,  113,  113,  845,  113,  113,
      113,  845,  845,  845,  845,  119,  845,  845,  738,  740,
      845,  119,  741,  845,  845,  845,  742,  739,  113,  119,
      113,  113,  113,  113,  845,  113,  113,  113,  119,  845,
      113,  845,  113,  113,  113,  845,  743,  845,  740,  119,
      845,  845,  741,  845,  119,  113,  742,  113,  113,  113,
      845,  113,  845,  113,  113,  113,  845,  113,  744,  113,
      113,  113,  845,  845,  845,  743,  119,  845,  845,  845,
      845,  119,  745,  845,  845,  845,  845,  746,  119,  747,

      113,  845,  113,  113,  113,  845,  113,  744,  113,  113,
      113,  845,  113,  119,  113,  113,  113,  845,  845,  119,
      113,  745,  113,  113,  113,  119,  845,  746,  113,  747,
      113,  113,  113,  113,  845,  113,  113,  113,  113,  845,
      113,  113,  113,  113,  845,  113,  113,  113,  119,  845,
      845,  748,  845,  845,  119,  113,  845,  113,  113,  113,
      119,  113,  845,  113,  113,  113,  845,  113,  119,  113,
      113,  113,  845,  845,  845,  845,  119,  845,  750,  845,
      748,  119,  845,  845,  749,  113,  119,  113,  113,  113,
      113,  119,  113,  113,  113,  113,  845,  113,  113,  113,

      845,  751,  113,  119,  113,  113,  113,  845,  750,  119,
      752,  845,  845,  749,  113,  119,  113,  113,  113,  113,
      845,  113,  113,  113,  845,  845,  845,  845,  845,  845,
      751,  845,  845,  119,  845,  753,  754,  845,  119,  755,
      752,  845,  845,  119,  704,  704,  845,  706,  706,  845,
      119,  845,  845,  756,  527,  845,  527,  527,  845,  527,
      845,  845,  119,  845,  753,  845,  754,  119,  527,  755,
      113,  527,  113,  113,  113,  113,  845,  113,  113,  113,
      845,  845,  845,  756,  527,  845,  527,  527,  113,  527,
      113,  113,  113,  845,  845,  845,  845,  527,  845,  845,

      527,  113,  757,  113,  113,  113,  845,  845,  845,  113,
      758,  113,  113,  113,  845,  845,  845,  113,  119,  113,
      113,  113,  113,  119,  113,  113,  113,  113,  845,  113,
      113,  113,  757,  845,  759,  113,  119,  113,  113,  113,
      758,  113,  845,  113,  113,  113,  845,  845,  845,  119,
      113,  845,  113,  113,  113,  845,  113,  119,  113,  113,
      113,  845,  845,  845,  759,  119,  760,  845,  845,  845,
      119,  761,  845,  845,  113,  119,  113,  113,  113,  845,
      845,  845,  113,  119,  113,  113,  113,  845,  113,  119,
      113,  113,  113,  845,  845,  845,  760,  845,  119,  845,

      845,  761,  845,  113,  119,  113,  113,  113,  762,  763,
      113,  845,  113,  113,  113,  113,  845,  113,  113,  113,
      845,  113,  119,  113,  113,  113,  845,  845,  845,  113,
      119,  113,  113,  113,  845,  845,  119,  845,  762,  763,
      845,  845,  845,  113,  764,  113,  113,  113,  845,  845,
      113,  119,  113,  113,  113,  845,  845,  845,  119,  845,
      765,  845,  845,  119,  845,  845,  766,  845,  113,  119,
      113,  113,  113,  845,  764,  767,  113,  119,  113,  113,
      113,  113,  845,  113,  113,  113,  845,  845,  845,  765,
      113,  119,  113,  113,  113,  845,  766,  113,  119,  113,

      113,  113,  845,  845,  769,  767,  768,  845,  113,  845,
      113,  113,  113,  845,  845,  113,  119,  113,  113,  113,
      845,  845,  845,  113,  119,  113,  113,  113,  845,  119,
      845,  770,  845,  845,  769,  768,  845,  845,  119,  113,
      845,  113,  113,  113,  845,  119,  771,  845,  113,  845,
      113,  113,  113,  772,  776,  774,  119,  845,  777,  845,
      845,  770,  114,  119,  845,  845,  845,  845,  114,  845,
      845,  119,  775,  845,  845,  771,  113,  773,  113,  113,
      113,  845,  772,  845,  776,  774,  845,  119,  777,  845,
      845,  113,  114,  113,  113,  113,  119,  113,  114,  113,

      113,  113,  775,  845,  845,  113,  773,  113,  113,  113,
      845,  845,  845,  113,  778,  113,  113,  113,  845,  113,
      845,  113,  113,  113,  119,  113,  845,  113,  113,  113,
      113,  845,  113,  113,  113,  845,  845,  845,  780,  119,
      845,  845,  845,  778,  781,  119,  845,  845,  845,  845,
      779,  783,  113,  119,  113,  113,  113,  845,  845,  845,
      113,  119,  113,  113,  113,  845,  845,  119,  780,  845,
      782,  845,  845,  119,  781,  845,  845,  845,  119,  779,
      113,  783,  113,  113,  113,  113,  845,  113,  113,  113,
      845,  113,  845,  113,  113,  113,  845,  845,  784,  782,

      119,  113,  845,  113,  113,  113,  845,  845,  119,  845,
      845,  785,  845,  113,  845,  113,  113,  113,  113,  845,
      113,  113,  113,  845,  845,  845,  845,  784,  119,  786,
      845,  845,  113,  119,  113,  113,  113,  845,  845,  119,
      787,  785,  113,  845,  113,  113,  113,  845,  845,  119,
      845,  113,  788,  113,  113,  113,  845,  845,  786,  845,
      845,  119,  845,  845,  789,  845,  119,  790,  845,  113,
      787,  113,  113,  113,  845,  845,  845,  791,  845,  845,
      119,  113,  788,  113,  113,  113,  845,  845,  845,  113,
      119,  113,  113,  113,  789,  845,  845,  790,  113,  119,

      113,  113,  113,  845,  845,  845,  113,  791,  113,  113,
      113,  113,  845,  113,  113,  113,  113,  119,  113,  113,
      113,  845,  113,  845,  113,  113,  113,  845,  792,  119,
      113,  845,  113,  113,  113,  845,  845,  119,  113,  793,
      113,  113,  113,  845,  845,  845,  119,  795,  845,  845,
      845,  794,  845,  845,  119,  845,  845,  792,  113,  119,
      113,  113,  113,  113,  119,  113,  113,  113,  796,  793,
      119,  113,  845,  113,  113,  113,  797,  795,  119,  845,
      794,  845,  845,  798,  845,  113,  119,  113,  113,  113,
      799,  113,  845,  113,  113,  113,  845,  796,  845,  113,

      800,  113,  113,  113,  845,  797,  119,  845,  845,  845,
      845,  119,  845,  798,  801,  845,  845,  845,  845,  119,
      799,  113,  845,  113,  113,  113,  845,  845,  845,  845,
      800,  845,  113,  119,  113,  113,  113,  845,  113,  119,
      113,  113,  113,  845,  801,  845,  113,  119,  113,  113,
      113,  845,  845,  113,  803,  113,  113,  113,  845,  113,
      802,  113,  113,  113,  845,  845,  845,  805,  113,  119,
      113,  113,  113,  845,  845,  845,  845,  804,  845,  845,
      119,  845,  845,  806,  803,  845,  119,  845,  113,  802,
      113,  113,  113,  845,  119,  845,  113,  805,  113,  113,

      113,  119,  807,  845,  845,  845,  804,  119,  113,  845,
      113,  113,  113,  806,  845,  845,  119,  113,  845,  113,
      113,  113,  113,  845,  113,  113,  113,  845,  845,  845,
      808,  845,  807,  809,  845,  113,  119,  113,  113,  113,
      845,  845,  845,  845,  119,  113,  845,  113,  113,  113,
      113,  845,  113,  113,  113,  113,  119,  113,  113,  113,
      808,  845,  845,  809,  113,  119,  113,  113,  113,  113,
      119,  113,  113,  113,  113,  845,  113,  113,  113,  845,
      845,  845,  845,  119,  113,  810,  113,  113,  113,  845,
      845,  845,  845,  119,  845,  811,  845,  845,  119,  814,

      845,  845,  812,  119,  845,  845,  845,  845,  845,  813,
      845,  845,  119,  845,  810,  845,  113,  119,  113,  113,
      113,  845,  119,  815,  811,  845,  845,  845,  845,  814,
      845,  812,  119,  113,  845,  113,  113,  113,  813,  113,
      845,  113,  113,  113,  845,  113,  845,  113,  113,  113,
      845,  113,  815,  113,  113,  113,  113,  845,  113,  113,
      113,  845,  816,  845,  119,  845,  845,  113,  817,  113,
      113,  113,  113,  845,  113,  113,  113,  845,  845,  845,
      113,  119,  113,  113,  113,  845,  113,  119,  113,  113,
      113,  819,  816,  119,  845,  845,  818,  845,  817,  119,

      845,  845,  845,  113,  119,  113,  113,  113,  845,  845,
      845,  845,  820,  845,  113,  119,  113,  113,  113,  845,
      119,  819,  845,  845,  845,  818,  845,  113,  119,  113,
      113,  113,  845,  113,  119,  113,  113,  113,  845,  845,
      845,  113,  820,  113,  113,  113,  845,  845,  821,  845,
      845,  119,  113,  845,  113,  113,  113,  823,  845,  845,
      845,  113,  119,  113,  113,  113,  113,  822,  113,  113,
      113,  845,  845,  845,  845,  119,  113,  821,  113,  113,
      113,  119,  113,  845,  113,  113,  113,  823,  845,  119,
      113,  824,  113,  113,  113,  113,  822,  113,  113,  113,

      119,  113,  845,  113,  113,  113,  845,  845,  113,  119,
      113,  113,  113,  845,  119,  113,  845,  113,  113,  113,
      824,  825,  845,  845,  119,  827,  845,  845,  845,  828,
      119,  845,  845,  845,  845,  826,  829,  113,  119,  113,
      113,  113,  113,  119,  113,  113,  113,  845,  845,  119,
      825,  845,  845,  845,  845,  827,  119,  845,  845,  828,
      845,  845,  830,  119,  826,  113,  829,  113,  113,  113,
      113,  845,  113,  113,  113,  113,  845,  113,  113,  113,
      113,  845,  113,  113,  113,  119,  845,  845,  845,  845,
      119,  113,  830,  113,  113,  113,  113,  845,  113,  113,

      113,  845,  831,  845,  113,  845,  113,  113,  113,  845,
      845,  845,  845,  119,  845,  845,  832,  845,  119,  845,
      845,  833,  845,  119,  845,  845,  834,  113,  119,  113,
      113,  113,  831,  113,  845,  113,  113,  113,  113,  119,
      113,  113,  113,  845,  119,  845,  832,  845,  845,  835,
      845,  833,  119,  845,  845,  113,  834,  113,  113,  113,
      845,  845,  113,  836,  113,  113,  113,  113,  845,  113,
      113,  113,  845,  845,  845,  119,  837,  845,  845,  835,
      113,  119,  113,  113,  113,  113,  119,  113,  113,  113,
      845,  845,  113,  836,  113,  113,  113,  845,  113,  838,

      113,  113,  113,  119,  845,  113,  837,  113,  113,  113,
      119,  845,  839,  845,  845,  119,  113,  842,  113,  113,
      113,  841,  113,  840,  113,  113,  113,  845,  119,  838,
      843,  845,  113,  119,  113,  113,  113,  845,  845,  845,
      119,  113,  839,  113,  113,  113,  119,  842,  845,  845,
      845,  841,  840,  119,  845,  845,  845,  844,  845,  113,
      843,  113,  113,  113,  119,  845,  845,  845,  845,  845,
      119,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      119,  845,  845,  845,  845,  845,  845,  844,  845,  119,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  119,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,  114,  845,
      114,  114,  114,  114,  114,  197,  197,  197,  203,  203,
      845,  203,  845,  203,  203,  203,  203,  203,  211,  211,
      845,  211,  211,  211,  211,  211,  211,  211,  212,  845,
      845,  212,  212,  845,  845,  212,  212,  212,  224,  224,
      364,  364,  845,  364,   13,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845
    } ;

static const flex_int16_t yy_chk[7376] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    3,    4,    7,    7,   77,   15,    7,   28,
       28,   34,   34,   20,   32,   32,   32,    7,  363,    7,

        7,    7,    7,   20,   74,   66,   74,    7,    8,    8,
       20,  218,    8,   75,   75,   37,   77,   37,   37,   37,
      213,    8,    7,    8,    8,    8,    8,   66,    3,    4,
      113,    8,    9,   20,   78,  112,    9,    7,   10,   15,
       20,   61,   10,   61,   61,    9,    8,    9,    9,    9,
       37,   10,    7,   10,   10,   10,   11,   66,   82,   82,
       37,    8,   87,   37,   78,   11,   88,   11,   11,   11,
       11,   84,   12,   84,  108,   11,    8,   85,   85,   61,
       37,   12,   94,   12,   12,   12,   12,  100,  100,   37,
       11,   12,   87,  198,  198,   43,   88,   43,   43,   43,

      201,  201,  214,   91,  214,   11,   12,   45,   90,   45,
       45,   45,  215,  215,   41,   42,   43,   89,   41,   42,
       11,   12,   41,   42,  219,  219,   42,   79,   41,   42,
       71,   41,  220,  220,   41,   60,   12,   30,   59,   30,
       30,  223,  223,   43,   41,   42,   43,   58,   41,   42,
       30,   29,   41,   42,   30,   45,   42,   30,   41,   42,
       41,  229,  229,   41,   30,  102,   30,  102,  231,  231,
      102,  102,  236,  236,   46,   30,   27,   48,   46,   25,
       30,   48,   46,   24,   30,   48,   16,   30,   46,  361,
      361,   48,   13,   30,    6,   30,   36,  229,   36,   36,

       36,    5,   47,    0,   46,    0,   47,   48,   46,   51,
       47,   48,   46,   51,    0,   48,   47,   51,   46,    0,
       36,   48,   47,   51,    0,  361,   47,    0,   36,    0,
       36,    0,   47,  376,  376,   36,   47,  380,  380,   51,
       47,    0,  106,   51,   36,  106,   47,   51,  381,  381,
       36,   47,  106,   51,    0,   47,  382,  382,   36,   55,
       36,   55,   55,   55,   36,   38,    0,   38,   38,   38,
      523,  523,  106,  380,  114,  106,  114,  114,  114,    0,
       55,  106,   50,    0,  381,    0,   38,   38,   38,   38,
       50,  703,  703,   38,   38,    0,   50,   38,    0,   50,

       38,    0,   50,    0,   38,   38,   38,   55,    0,  228,
       55,  228,   50,   38,  228,  228,   38,   38,   38,   38,
       50,    0,  114,   38,   38,    0,   50,   38,   50,    0,
       38,   50,    0,   38,   38,   38,   39,    0,   39,   39,
       39,  705,  705,   53,    0,   57,   53,   57,   57,   57,
      507,  507,   67,   53,  525,  525,   53,   39,    0,   53,
        0,   39,    0,   53,   67,   39,    0,    0,   67,    0,
       67,   39,    0,   53,    0,    0,   53,   67,    0,    0,
       57,    0,   67,   53,   39,   53,  507,   39,   53,    0,
      525,   39,   53,   57,   67,   39,    0,   67,    0,   67,

        0,   39,   40,    0,   40,   40,   40,    0,    0,   54,
       57,   54,   54,   54,    0,  118,    0,  118,  118,  118,
        0,    0,  116,   40,  116,  116,  116,  237,    0,  237,
        0,    0,  237,  237,   40,    0,   40,  379,   54,  379,
       40,   54,  379,  379,   40,    0,   40,    0,   54,    0,
       40,  116,   56,   40,    0,   56,   56,   54,    0,    0,
        0,    0,   56,  118,   40,   56,   40,    0,   54,   40,
      116,   54,   56,   40,    0,   40,   44,   54,   44,   44,
       44,  116,   56,    0,    0,   56,   56,    0,  232,  232,
        0,    0,   56,    0,   56,   98,   98,    0,  232,    0,

      232,   56,   44,    0,    0,   98,   98,   98,    0,   44,
       44,  625,  232,  625,    0,   44,  625,  625,  115,   98,
      115,  115,  115,  117,   44,  117,  117,  117,  232,    0,
      232,   98,   44,    0,    0,   98,   98,   98,    0,   44,
       44,  232,  115,    0,   44,   49,    0,  117,   98,   49,
        0,  137,    0,  137,  137,  137,   49,   49,  632,   49,
      632,   49,   49,  632,  632,   49,  115,    0,    0,    0,
        0,  117,  115,    0,  137,   49,    0,  117,    0,   49,
        0,  120,    0,  120,  120,  120,   49,   49,    0,   49,
       49,   49,  125,  125,   49,   52,  125,    0,   52,  137,

      125,   52,   52,    0,  137,    0,  125,    0,   52,    0,
        0,    0,    0,   52,   52,    0,  120,    0,   52,    0,
        0,    0,  125,  125,    0,   52,  125,    0,   52,  120,
      125,   52,   52,    0,    0,    0,  125,  126,   52,  126,
      126,  126,   52,   52,    0,    0,  120,   52,  107,    0,
      107,  107,  121,    0,  121,  121,  121,    0,  126,    0,
        0,  107,    0,  184,    0,  107,  184,  184,  107,  122,
        0,  122,  122,  122,    0,  107,  184,  107,    0,    0,
      127,    0,  127,  127,  127,  126,  107,    0,  126,    0,
      121,  107,  121,  184,  121,  107,  184,  184,  107,    0,

      121,  122,    0,  123,  107,  184,  107,    0,  122,  122,
      123,    0,    0,  123,  127,    0,    0,  122,    0,  121,
      123,  121,  124,  121,  124,  124,  124,    0,  127,    0,
        0,  122,    0,  123,    0,    0,    0,  122,  122,    0,
      123,    0,  123,  128,  127,  128,  128,  128,    0,  123,
      124,  129,    0,  129,  129,  129,  131,    0,  131,  131,
      131,    0,    0,  132,  128,  132,  132,  132,    0,    0,
      124,    0,    0,  129,    0,    0,    0,  128,    0,  152,
      124,  152,  152,  152,  133,  129,  133,  133,  133,    0,
        0,  128,  132,    0,  128,  132,    0,    0,    0,  129,

        0,  131,  132,  129,  131,    0,    0,  128,    0,    0,
      134,  132,  134,  134,  134,  129,  130,    0,  130,  130,
      130,    0,  132,    0,  133,  132,    0,  152,    0,    0,
      131,  132,  133,  134,    0,    0,  134,    0,  130,    0,
        0,    0,  134,  135,  130,  135,  135,  135,    0,    0,
      130,    0,    0,  133,    0,    0,  130,  136,  134,  136,
      136,  136,    0,  134,  130,    0,  134,  141,  130,  141,
      141,  141,  134,    0,  130,  138,  135,  138,  138,  138,
      130,  135,    0,    0,  139,  130,  139,  139,  139,    0,
        0,  135,  141,    0,    0,    0,    0,  140,  136,  140,

      140,  140,    0,    0,    0,  136,  135,    0,  139,  143,
      135,  143,  143,  143,  138,  141,    0,  142,  140,  142,
      142,  142,  141,  138,    0,  139,  144,  136,  144,  144,
      144,    0,  139,    0,    0,  140,    0,    0,  139,    0,
        0,  143,    0,  138,    0,  140,  142,  145,  140,  145,
      145,  145,    0,    0,  139,    0,    0,  143,    0,  146,
      144,  146,  146,  146,  140,  142,    0,    0,    0,    0,
        0,  143,    0,    0,  144,  147,  142,  147,  147,  147,
      148,    0,  148,  148,  148,  145,    0,    0,  146,  149,
      144,  149,  149,  149,  150,  145,  150,  150,  150,    0,

        0,    0,  151,    0,  151,  151,  151,  146,  153,  147,
      153,  153,  153,  156,  145,  156,  156,  156,  146,    0,
      148,    0,    0,  147,  149,    0,    0,    0,  148,  154,
        0,    0,    0,  150,  150,  154,  151,  149,    0,  147,
        0,  154,  150,    0,  153,    0,    0,  154,    0,  148,
      151,    0,    0,  156,  149,    0,  153,    0,    0,  154,
        0,  156,  150,  150,    0,  154,  151,    0,    0,    0,
        0,  154,    0,    0,  153,  155,  154,  155,  155,  155,
        0,  157,  156,  157,  157,  157,  158,    0,  158,  158,
      158,    0,  159,    0,  159,  159,  159,    0,  160,    0,

      160,  160,  160,  157,    0,    0,    0,    0,    0,  155,
        0,    0,  157,    0,  161,    0,  161,  161,  161,    0,
      158,  158,  160,  155,    0,    0,    0,    0,  163,  157,
      163,  163,  163,  157,  158,    0,    0,    0,    0,  155,
      159,  162,  157,  162,  162,  162,  160,    0,    0,    0,
      158,  158,  160,  161,  164,    0,  164,  164,  164,    0,
        0,  163,  161,  162,  162,  165,  163,  165,  165,  165,
      166,    0,  166,  166,  166,  167,  163,  167,  167,  167,
        0,  168,  161,  168,  168,  168,    0,    0,    0,  162,
        0,  163,    0,  162,  162,  163,    0,  164,  164,    0,

      166,    0,  164,    0,    0,  165,  169,    0,  169,  169,
      169,    0,  170,  165,  170,  170,  170,  171,  166,  171,
      171,  171,    0,  167,    0,  241,  164,  164,  241,  168,
      166,  169,    0,    0,  165,  241,  172,  170,  172,  172,
      172,    0,  171,  173,    0,    0,  169,  173,    0,    0,
        0,  173,    0,    0,  169,  241,    0,  173,  241,    0,
      170,  169,    0,    0,  241,  171,  174,  170,  174,  174,
      174,    0,  171,  173,  172,  169,  175,  173,  175,  175,
      175,  173,  179,    0,  172,    0,  179,  173,  174,  177,
      179,  177,  177,  177,    0,    0,  179,    0,  178,    0,

      178,  178,  178,  172,  185,  175,  185,  185,  185,    0,
        0,    0,  179,    0,  174,    0,  179,    0,  174,    0,
      179,    0,    0,    0,  175,  180,  179,  180,  180,  180,
      178,    0,    0,    0,  177,  175,  176,  177,  178,  176,
      182,  176,  182,  182,  182,    0,  178,    0,  176,  176,
        0,    0,  185,    0,  176,  176,    0,    0,    0,  180,
      178,    0,  182,  177,    0,    0,  176,  178,  181,  176,
      186,  176,  181,  180,    0,    0,  181,    0,  176,  176,
      186,    0,  181,  176,  176,  181,  186,    0,  182,  180,
      186,  183,  182,  183,  183,  183,    0,    0,  181,    0,

      186,  187,  181,  187,  187,  187,  181,    0,    0,    0,
      186,    0,  181,    0,  181,  186,    0,    0,  188,  186,
      188,  188,  188,    0,  189,  183,  189,  189,  189,    0,
        0,  190,    0,    0,  190,  190,    0,  187,  191,  183,
      191,  191,  191,  192,  190,  192,  192,  192,  368,  187,
      193,  368,  188,  193,  193,  183,    0,    0,  368,  189,
        0,  190,    0,  193,  190,  190,  188,  187,    0,    0,
        0,    0,  189,  190,    0,    0,  191,  192,  368,    0,
      193,  368,  188,  193,  193,    0,  191,  368,    0,  189,
        0,  192,  193,  194,    0,  194,  194,  194,  195,    0,

      195,  195,  195,    0,    0,  191,  196,  192,  196,  196,
      196,  197,    0,  197,  197,  197,  202,  194,  202,  202,
      202,    0,  224,    0,  225,  224,    0,  195,  202,    0,
        0,    0,  224,  194,  224,    0,    0,    0,    0,  225,
        0,  194,  225,  224,  196,    0,  195,  194,    0,  225,
        0,  225,  224,    0,  196,  224,    0,  195,    0,  197,
      225,  224,  194,  224,  202,    0,  202,    0,    0,  225,
        0,    0,  225,  196,  226,  226,    0,    0,  225,    0,
      225,  230,  230,    0,  226,  226,  226,    0,    0,    0,
        0,  230,  230,  230,    0,    0,  244,    0,  226,  244,

      244,    0,    0,    0,  245,  230,  245,  245,  245,  244,
      226,    0,    0,    0,  226,  226,  226,  230,    0,    0,
        0,  230,  230,  230,    0,  245,  244,  226,    0,  244,
      244,    0,    0,  246,  230,  246,  246,  246,  244,  247,
        0,  247,  247,  247,  248,    0,  248,  248,  248,    0,
        0,    0,  245,    0,  246,  245,    0,  249,    0,  249,
      249,  249,  250,    0,  250,  250,  250,    0,    0,  248,
      251,  247,  251,  251,  251,  252,    0,  252,  252,  252,
        0,  246,  249,  250,  246,    0,  253,  247,  253,  253,
      253,    0,  248,  254,    0,  254,  254,  254,    0,  248,

      252,  247,  251,    0,  255,  249,  255,  255,  255,  253,
      250,    0,  249,  250,    0,    0,    0,  256,  251,  256,
      256,  256,  257,  252,  257,  257,  257,    0,  254,    0,
      252,    0,  251,  259,  253,  259,  259,  259,  256,  253,
        0,  254,    0,    0,  255,  258,    0,  258,  258,  258,
        0,  260,  255,  260,  260,  260,  259,  261,  254,  261,
      261,  261,  257,    0,    0,  256,    0,    0,  256,    0,
      257,    0,  262,  255,  262,  262,  262,  258,    0,    0,
      278,  259,  278,  278,  278,    0,  259,    0,    0,  260,
        0,  257,    0,  258,    0,    0,    0,  261,  263,  260,

      263,  263,  263,    0,    0,  261,  264,  258,  264,  264,
      264,  262,  265,    0,  265,  265,  265,    0,  260,  266,
      262,  266,  266,  266,    0,  263,  261,  267,  278,  267,
      267,  267,    0,    0,    0,  269,  264,  269,  269,  269,
      262,  268,    0,  268,  268,  268,  263,    0,    0,    0,
        0,  265,  265,    0,  264,  263,    0,    0,    0,    0,
      265,    0,  267,    0,  266,    0,  264,  266,  268,    0,
        0,    0,    0,  269,  270,  267,  270,  270,  270,    0,
      265,  265,  271,  269,  271,  271,  271,    0,    0,  268,
        0,    0,  267,  266,    0,    0,    0,  272,  268,  272,

      272,  272,  269,    0,  273,    0,  273,  273,  273,  274,
      270,  274,  274,  274,    0,  275,  271,  275,  275,  275,
        0,  276,  270,  276,  276,  276,    0,    0,    0,    0,
      271,  272,  273,  277,  274,  277,  277,  277,    0,    0,
      270,    0,  276,    0,  275,  272,  271,  275,    0,    0,
        0,  279,  273,  279,  279,  279,    0,  274,  277,    0,
        0,  272,  273,  275,  274,    0,    0,    0,    0,  276,
        0,    0,  276,    0,  275,    0,  279,  275,    0,    0,
      280,  277,  280,  280,  280,    0,    0,  281,  277,  281,
      281,  281,  282,    0,  282,  282,  282,    0,    0,  279,

        0,  283,  280,  283,  283,  283,  279,    0,  284,    0,
      284,  284,  284,    0,    0,  281,  285,  282,  285,  285,
      285,    0,  286,    0,  286,  286,  286,    0,  280,    0,
      283,    0,  280,    0,  287,  281,  287,  287,  287,    0,
      282,  284,    0,    0,    0,  281,    0,  282,  288,  283,
      288,  288,  288,    0,    0,  285,  284,  286,    0,    0,
      283,    0,    0,  289,  285,  289,  289,  289,  287,    0,
      286,  284,  290,    0,  290,  290,  290,  291,    0,  291,
      291,  291,  287,    0,  285,    0,    0,  286,  288,    0,
        0,    0,    0,  290,    0,    0,  288,  292,  287,  292,

      292,  292,  289,  293,    0,  293,  293,  293,    0,    0,
      294,  289,  294,  294,  294,    0,    0,  288,    0,    0,
      290,    0,  292,  290,    0,  291,  293,    0,    0,    0,
        0,  289,    0,  295,    0,  295,  295,  295,    0,  296,
        0,  296,  296,  296,    0,  292,    0,    0,    0,    0,
      294,  293,  292,    0,  294,  295,  293,  297,  294,  297,
      297,  297,  298,    0,  298,  298,  298,  299,    0,  299,
      299,  299,  300,    0,  300,  300,  300,    0,    0,  294,
      296,  295,    0,  294,    0,  295,  298,  296,    0,    0,
        0,  302,  297,  302,  302,  302,    0,  300,    0,  299,

        0,    0,  299,    0,  303,  297,  303,  303,  303,  296,
      298,    0,    0,    0,    0,  299,  298,    0,    0,    0,
      300,  301,  297,  301,  301,  301,  302,  300,    0,  299,
        0,  304,  299,  304,  304,  304,    0,    0,  305,  302,
      305,  305,  305,    0,    0,    0,  301,  306,    0,  306,
      306,  306,  303,    0,    0,  307,  302,  307,  307,  307,
        0,    0,    0,  305,  308,    0,  308,  308,  308,  301,
        0,    0,    0,    0,  306,    0,  301,    0,  309,  304,
      309,  309,  309,    0,    0,  310,  305,  310,  310,  310,
        0,  307,    0,  305,    0,  306,  311,    0,  311,  311,

      311,    0,    0,  307,  306,  308,  310,  312,    0,  312,
      312,  312,  308,  313,    0,  313,  313,  313,  309,    0,
      314,  307,  314,  314,  314,    0,  309,  315,  311,  315,
      315,  315,  312,  310,  308,    0,  310,    0,    0,  316,
        0,    0,  316,  316,  311,    0,    0,  309,    0,  316,
        0,  313,  316,    0,    0,  312,    0,    0,  311,    0,
        0,  313,  312,    0,    0,    0,    0,  315,  314,  316,
        0,    0,  316,  316,  317,  315,  317,  317,  317,  316,
      313,  316,  318,    0,  318,  318,  318,  319,    0,  319,
      319,  319,    0,    0,    0,    0,  315,    0,    0,  317,

      320,    0,  320,  320,  320,  321,    0,  321,  321,  321,
      322,    0,  322,  322,  322,  323,  319,  323,  323,  323,
      318,    0,  317,  325,    0,  325,  325,  325,    0,  317,
      318,  322,  320,    0,  324,  319,  324,  324,  324,    0,
        0,    0,    0,  321,    0,    0,  319,    0,  320,  318,
      322,    0,    0,  321,    0,  325,    0,  323,  322,    0,
        0,  322,  320,  323,    0,  326,    0,  326,  326,  326,
      324,  325,  321,  327,  324,  327,  327,  327,    0,  322,
        0,    0,  324,    0,    0,  325,  323,  328,    0,  328,
      328,  328,    0,    0,    0,    0,    0,  327,    0,    0,

      324,    0,    0,  324,  326,  329,    0,  329,  329,  329,
        0,    0,    0,  326,    0,  330,  328,  330,  330,  330,
      331,  327,  331,  331,  331,    0,  332,  327,  332,  332,
      332,    0,    0,  326,  333,  328,  333,  333,  333,  334,
      329,  334,  334,  334,    0,  335,  328,  335,  335,  335,
      453,    0,    0,  329,  453,    0,  330,    0,  453,  333,
        0,  331,    0,  330,  453,    0,  332,    0,  331,  335,
      329,    0,    0,  336,  332,  336,  336,  336,    0,    0,
      453,    0,  333,  335,  453,  330,    0,  334,  453,  333,
      331,    0,    0,  335,  453,  332,    0,    0,  337,  335,

      337,  337,  337,  338,    0,  338,  338,  338,    0,    0,
        0,  336,  335,  339,    0,  339,  339,  339,    0,    0,
      340,  336,  340,  340,  340,  337,    0,    0,  341,    0,
      341,  341,  341,  342,    0,  342,  342,  342,    0,    0,
      336,    0,    0,  338,    0,    0,  337,    0,    0,  339,
        0,  338,    0,    0,    0,  337,  340,  341,    0,    0,
      343,  339,  343,  343,  343,    0,    0,    0,  340,  341,
        0,  344,  338,  344,  344,  344,  341,    0,    0,  339,
        0,  342,    0,  343,    0,    0,  340,  341,  345,    0,
      345,  345,  345,  346,    0,  346,  346,  346,  341,  347,

        0,  347,  347,  347,    0,  344,    0,  348,  343,  348,
      348,  348,  350,  343,  350,  350,  350,    0,  346,  344,
        0,    0,  347,  345,  349,    0,  349,  349,  349,    0,
        0,    0,  348,    0,    0,  344,  345,    0,    0,    0,
      351,  346,  351,  351,  351,    0,  350,  347,  346,    0,
        0,    0,  347,  345,  353,  348,  353,  353,  353,    0,
      350,    0,  348,  352,  349,  352,  352,  352,    0,    0,
        0,    0,  349,    0,    0,  351,  350,  354,    0,  354,
      354,  354,  355,  353,  355,  355,  355,  356,  351,  356,
      356,  356,  357,  349,  357,  357,  357,  352,    0,    0,

        0,  354,  353,    0,  358,  351,  358,  358,  358,    0,
        0,  352,    0,  353,    0,    0,  355,  357,  359,  356,
      359,  359,  359,    0,    0,  354,    0,  352,    0,    0,
      355,  354,  358,    0,  360,  356,  360,  360,  360,    0,
      357,  362,    0,  362,  362,  362,  355,  357,    0,  356,
      370,  364,  358,  362,  364,    0,    0,    0,  359,    0,
        0,  364,  358,  364,  369,  370,  359,  369,  370,    0,
        0,    0,  364,    0,  369,  370,  369,  370,    0,    0,
        0,  364,  360,    0,  364,    0,  370,  359,    0,  362,
      364,  362,  364,    0,  369,  370,    0,  369,  370,  374,

      375,    0,  374,  369,  370,  369,  370,  377,  377,  374,
      378,  378,    0,    0,    0,  375,    0,  377,  375,  377,
      378,  378,  378,    0,    0,  375,    0,  375,    0,  374,
        0,  377,  374,    0,  378,    0,  375,    0,  374,    0,
        0,    0,    0,  383,  383,  375,  378,  377,  375,  377,
      378,  378,  378,  383,  375,  383,  375,    0,    0,    0,
      377,    0,    0,  378,    0,    0,  387,  383,  387,  387,
      387,    0,  388,    0,  388,  388,  388,  389,    0,  389,
      389,  389,    0,  383,    0,  383,  390,  387,  390,  390,
      390,  393,    0,  393,  393,  393,  383,  388,  391,    0,

      391,  391,  391,  392,    0,  392,  392,  392,  394,    0,
      394,  394,  394,    0,  387,    0,  389,  387,  390,    0,
      388,    0,    0,  391,    0,  389,    0,  388,  395,  392,
      395,  395,  395,  396,  390,  396,  396,  396,    0,  393,
      394,    0,    0,    0,    0,  389,  391,    0,  390,    0,
        0,  392,    0,  391,    0,    0,  394,    0,  397,  392,
      397,  397,  397,  398,    0,  398,  398,  398,    0,  399,
      394,  399,  399,  399,    0,  400,  395,  400,  400,  400,
      401,  396,  401,  401,  401,  402,  397,  402,  402,  402,
        0,    0,    0,    0,  399,  398,  403,    0,  403,  403,

      403,    0,    0,    0,    0,  401,  397,    0,    0,    0,
        0,  398,    0,  400,    0,    0,  397,  399,  404,    0,
      404,  404,  404,  400,  399,  398,    0,  405,  401,  405,
      405,  405,    0,  402,  406,  401,  406,  406,  406,    0,
        0,    0,  400,  407,  403,  407,  407,  407,  408,    0,
      408,  408,  408,  409,    0,  409,  409,  409,  410,    0,
      410,  410,  410,    0,    0,  411,  404,  411,  411,  411,
        0,    0,    0,  406,    0,  405,  412,    0,  412,  412,
      412,  413,  406,  413,  413,  413,    0,  410,    0,    0,
        0,  407,    0,  409,    0,    0,  408,    0,    0,    0,

        0,  409,  406,    0,    0,  411,  410,  414,    0,  414,
      414,  414,    0,  411,  412,    0,  415,  410,  415,  415,
      415,    0,  409,    0,  412,    0,    0,    0,  416,  413,
      416,  416,  416,  417,  411,  417,  417,  417,    0,    0,
        0,  415,    0,  412,  418,    0,  418,  418,  418,    0,
      419,    0,  419,  419,  419,  414,    0,    0,    0,    0,
      417,    0,    0,  420,  415,  420,  420,  420,  416,    0,
      421,  415,  421,  421,  421,    0,  416,    0,    0,  418,
        0,  417,  422,    0,  422,  422,  422,    0,    0,    0,
      417,  421,  418,    0,    0,    0,  420,  416,  419,    0,

      423,    0,  423,  423,  423,    0,    0,    0,    0,  418,
      424,  420,  424,  424,  424,    0,    0,    0,  421,    0,
        0,  421,    0,  422,    0,    0,  420,  423,    0,    0,
      422,    0,  425,  424,  425,  425,  425,  426,    0,  426,
      426,  426,  427,    0,  427,  427,  427,  428,  423,  428,
      428,  428,  422,    0,    0,    0,    0,  423,  424,    0,
        0,    0,    0,  424,  425,  429,    0,  429,  429,  429,
        0,  427,  430,  428,  430,  430,  430,    0,    0,    0,
      425,    0,    0,    0,  431,  426,  431,  431,  431,  432,
      427,  432,  432,  432,  425,  428,  433,  430,  433,  433,

      433,  427,    0,  428,    0,  434,    0,  434,  434,  434,
        0,    0,    0,  429,  435,    0,  435,  435,  435,    0,
      430,  436,  431,  436,  436,  436,    0,  430,    0,  432,
      434,  437,  431,  437,  437,  437,  438,  432,  438,  438,
      438,    0,    0,    0,  433,  439,  435,  439,  439,  439,
        0,  431,    0,  434,    0,  436,    0,    0,  432,    0,
      434,  440,  435,  440,  440,  440,    0,    0,    0,  436,
      441,  437,  441,  441,  441,    0,  435,    0,  439,  437,
        0,  438,  440,    0,  438,  436,  442,    0,  442,  442,
      442,    0,  441,  439,  443,    0,  443,  443,  443,  444,

      437,  444,  444,  444,    0,    0,    0,    0,  439,  440,
      438,  445,  440,  445,  445,  445,    0,  446,  441,  446,
      446,  446,  441,    0,  444,  447,  443,  447,  447,  447,
        0,    0,    0,    0,  442,  448,    0,  448,  448,  448,
        0,  449,  443,  449,  449,  449,    0,  444,    0,  445,
        0,    0,  447,    0,  444,  446,  443,    0,  450,  445,
      450,  450,  450,  447,  451,  446,  451,  451,  451,    0,
        0,    0,    0,  447,    0,  448,    0,  452,  445,  452,
      452,  452,  447,  448,  446,    0,    0,    0,    0,  449,
        0,    0,  447,  454,    0,  454,  454,  454,  455,    0,

      455,  455,  455,    0,  448,    0,  450,    0,    0,  452,
        0,  456,  451,  456,  456,  456,    0,    0,  457,  455,
      457,  457,  457,    0,  458,  452,  458,  458,  458,    0,
        0,    0,  454,  459,    0,  459,  459,  459,    0,  452,
      460,  454,  460,  460,  460,    0,  455,    0,    0,  455,
      456,    0,  461,  457,  461,  461,  461,    0,    0,  456,
        0,  454,  459,    0,    0,    0,  457,  462,    0,  462,
      462,  462,  458,  464,  460,  464,  464,  464,    0,  456,
        0,  459,  463,  457,  463,  463,  463,    0,  460,    0,
      462,    0,  459,  465,  461,  465,  465,  465,    0,    0,

      461,    0,    0,  463,  460,    0,    0,  466,  464,  466,
      466,  466,    0,    0,  467,  462,  467,  467,  467,    0,
      462,  464,  468,  461,  468,  468,  468,    0,    0,    0,
      463,    0,  465,  463,    0,    0,    0,    0,  464,  466,
      470,  465,  470,  470,  470,  466,  469,  467,  469,  469,
      469,  468,    0,    0,  471,  466,  471,  471,  471,    0,
        0,  465,  467,    0,    0,  470,    0,  469,    0,  466,
      468,    0,    0,    0,  466,    0,    0,  467,    0,  471,
        0,  468,  472,    0,  472,  472,  472,  473,  470,  473,
      473,  473,    0,    0,  469,  470,  474,  469,  474,  474,

      474,  475,  471,  475,  475,  475,    0,    0,    0,  471,
        0,  472,  473,    0,  476,    0,  476,  476,  476,  477,
        0,  477,  477,  477,    0,  478,    0,  478,  478,  478,
      472,  474,    0,    0,  475,  473,  480,    0,  480,  480,
      480,  472,  473,  479,  474,  479,  479,  479,    0,  475,
        0,  481,  477,  481,  481,  481,  476,    0,    0,  480,
        0,  474,  476,  478,  475,    0,    0,  477,  479,    0,
        0,    0,  482,  478,  482,  482,  482,  483,    0,  483,
      483,  483,  477,    0,  480,  476,  481,    0,    0,  480,
        0,  479,  478,    0,    0,    0,    0,  482,  479,  481,

      484,    0,  484,  484,  484,  485,    0,  485,  485,  485,
      486,    0,  486,  486,  486,    0,  481,  483,    0,  487,
      482,  487,  487,  487,    0,  483,  488,  482,  488,  488,
      488,    0,  484,  489,  485,  489,  489,  489,    0,  490,
        0,  490,  490,  490,    0,    0,  483,  491,  484,  491,
      491,  491,    0,  485,    0,    0,  489,    0,  486,    0,
      488,    0,  484,    0,  485,    0,  492,  487,  492,  492,
      492,  490,    0,  493,  488,  493,  493,  493,    0,    0,
      495,  489,  495,  495,  495,    0,  489,  490,    0,  494,
      488,  494,  494,  494,  496,  491,  496,  496,  496,    0,

      497,  490,  497,  497,  497,    0,    0,    0,    0,  492,
      494,    0,    0,    0,  492,  495,    0,    0,    0,  496,
      498,  493,  498,  498,  498,    0,    0,  497,  495,  499,
        0,  499,  499,  499,    0,    0,  515,  494,  492,  515,
      494,    0,  496,    0,    0,  495,  515,    0,  497,  496,
      500,    0,  500,  500,  500,    0,  499,  497,  498,  501,
        0,  501,  501,  501,    0,    0,  515,    0,  498,  515,
      502,  500,  502,  502,  502,  515,    0,  499,  503,    0,
      503,  503,  503,    0,    0,    0,  499,  498,  504,    0,
      504,  504,  504,  530,    0,  530,  530,  530,  500,    0,

        0,  500,  505,  503,  505,  505,  505,  501,    0,    0,
      506,    0,  506,  506,  506,    0,    0,    0,  502,  508,
      508,  533,  504,  533,  533,  533,  503,  505,    0,  508,
      508,  508,    0,  503,  522,  506,  504,  522,    0,  524,
      524,  530,    0,  508,  522,    0,    0,    0,    0,  524,
      505,  524,  504,    0,    0,  508,    0,  505,  506,  508,
      508,  508,    0,  524,  522,  506,    0,  522,    0,  533,
        0,    0,  508,  522,  526,  526,    0,    0,    0,  524,
        0,  524,    0,    0,  526,  526,  526,  528,    0,  528,
      528,  528,  524,  529,    0,  529,  529,  529,  526,  531,

        0,  531,  531,  531,  532,    0,  532,  532,  532,  534,
      526,  534,  534,  534,  526,  526,  526,    0,    0,    0,
      535,  528,  535,  535,  535,  532,  536,  526,  536,  536,
      536,    0,  529,    0,    0,  528,    0,    0,  531,    0,
      537,  529,  537,  537,  537,    0,  538,  531,  538,  538,
      538,  528,  532,    0,    0,  532,  539,  534,  539,  539,
      539,  529,  540,    0,  540,  540,  540,  531,  535,  541,
        0,  541,  541,  541,  536,  542,    0,  542,  542,  542,
      543,    0,  543,  543,  543,    0,    0,    0,  537,  544,
        0,  544,  544,  544,  538,  545,    0,  545,  545,  545,

        0,    0,    0,    0,  539,  543,    0,    0,    0,  542,
      540,  546,    0,  546,  546,  546,  547,  541,  547,  547,
      547,    0,  548,  542,  548,  548,  548,    0,  543,  544,
      549,    0,  549,  549,  549,  543,    0,  544,  550,  542,
      550,  550,  550,  545,    0,  551,    0,  551,  551,  551,
      552,  549,  552,  552,  552,    0,    0,    0,  544,  546,
      548,    0,    0,  553,  547,  553,  553,  553,    0,    0,
      548,  552,    0,    0,    0,    0,  550,  551,  549,    0,
      556,  549,  556,  556,  556,    0,  550,    0,  554,  548,
      554,  554,  554,  551,    0,    0,    0,    0,  552,    0,

        0,  552,    0,  553,    0,  550,  557,  551,  557,  557,
      557,  553,  555,  554,  555,  555,  555,  558,    0,  558,
      558,  558,  559,    0,  559,  559,  559,  560,  556,  560,
      560,  560,  553,    0,    0,    0,  554,  561,  555,  561,
      561,  561,  562,  554,  562,  562,  562,  563,    0,  563,
      563,  563,    0,  564,  557,  564,  564,  564,    0,  565,
      555,  565,  565,  565,    0,  558,  562,    0,  555,  561,
      559,    0,    0,    0,    0,  560,  563,  566,    0,  566,
      566,  566,    0,    0,  567,  561,  567,  567,  567,  564,
      562,  565,    0,    0,    0,  563,  562,    0,    0,  561,

      570,  564,  570,  570,  570,    0,  563,  565,  568,  566,
      568,  568,  568,  569,    0,  569,  569,  569,    0,  564,
      571,  565,  571,  571,  571,  566,  572,    0,  572,  572,
      572,    0,  567,  568,  573,    0,  573,  573,  573,  566,
      570,  574,    0,  574,  574,  574,  569,    0,  570,  571,
      575,  572,  575,  575,  575,  590,  568,  590,  590,  590,
      573,  569,  576,  568,  576,  576,  576,    0,  571,  570,
        0,    0,    0,    0,  572,  575,  569,    0,    0,  571,
        0,  572,  573,  577,  590,  577,  577,  577,    0,  574,
      573,  578,    0,  578,  578,  578,  576,  579,  575,  579,

      579,  579,    0,  590,  580,  575,  580,  580,  580,  582,
      576,  582,  582,  582,  590,  581,  578,  581,  581,  581,
      583,    0,  583,  583,  583,  577,  576,    0,    0,    0,
        0,  577,    0,    0,    0,    0,  579,    0,    0,  578,
      580,    0,    0,  582,    0,  579,  578,  584,  583,  584,
      584,  584,  580,    0,  577,    0,    0,  582,  581,    0,
        0,    0,    0,  581,    0,  579,    0,    0,  583,    0,
      580,    0,  584,  582,    0,    0,    0,  585,  583,  585,
      585,  585,  586,    0,  586,  586,  586,  581,    0,  587,
        0,  587,  587,  587,  588,  584,  588,  588,  588,    0,

        0,    0,  584,    0,  589,    0,  589,  589,  589,    0,
      591,    0,  591,  591,  591,    0,    0,  585,    0,  588,
        0,    0,  586,  587,  592,  585,  592,  592,  592,    0,
      586,  591,  594,    0,  594,  594,  594,  587,    0,  589,
        0,    0,  588,    0,    0,  592,  585,    0,    0,  588,
        0,  586,  589,  587,    0,    0,    0,    0,  591,    0,
      593,  591,  593,  593,  593,    0,    0,    0,    0,  589,
      594,    0,  592,    0,  595,  592,  595,  595,  595,    0,
      594,    0,  596,    0,  596,  596,  596,    0,  597,    0,
      597,  597,  597,    0,    0,    0,    0,  595,    0,  594,

      593,    0,    0,    0,    0,  596,    0,  598,  593,  598,
      598,  598,  599,  597,  599,  599,  599,  600,    0,  600,
      600,  600,  595,    0,    0,    0,    0,  595,    0,  593,
      596,    0,    0,    0,    0,  596,  597,    0,    0,    0,
        0,  598,  600,  597,  601,    0,  601,  601,  601,  602,
        0,  602,  602,  602,  603,  598,  603,  603,  603,  607,
      599,  607,  607,  607,  604,  600,  604,  604,  604,  601,
        0,  598,  600,  605,    0,  605,  605,  605,    0,    0,
        0,    0,  606,  602,  606,  606,  606,    0,    0,    0,
        0,  609,  601,  609,  609,  609,    0,  602,    0,  601,

        0,    0,  603,    0,  604,    0,  606,  607,    0,    0,
        0,    0,  604,  602,  609,  608,  605,  608,  608,  608,
      610,  605,  610,  610,  610,  611,    0,  611,  611,  611,
      606,    0,    0,  604,    0,    0,  606,    0,    0,  609,
      608,    0,    0,    0,  609,  605,    0,  610,  612,    0,
      612,  612,  612,  613,    0,  613,  613,  613,  614,    0,
      614,  614,  614,  608,    0,  611,    0,    0,  610,    0,
      608,    0,  615,  611,  615,  615,  615,  610,    0,    0,
        0,    0,  616,  612,  616,  616,  616,  617,    0,  617,
      617,  617,    0,    0,  611,    0,  612,  614,  615,    0,

      618,  613,  618,  618,  618,    0,  614,    0,  619,  616,
      619,  619,  619,  612,    0,  620,    0,  620,  620,  620,
      615,    0,    0,    0,    0,    0,  614,    0,  615,  621,
      616,  621,  621,  621,  623,  617,  623,  623,  623,  616,
      618,  622,    0,  622,  622,  622,    0,    0,  618,  620,
      624,    0,  624,  624,  624,  634,  619,  634,  634,  634,
        0,    0,  633,  620,  633,  633,  633,    0,    0,  618,
      622,  635,    0,  635,  635,  635,  623,  621,    0,  620,
        0,    0,  623,    0,    0,  624,  633,    0,    0,  622,
        0,    0,    0,  636,  634,  636,  636,  636,  624,    0,

      622,    0,    0,  634,    0,  623,  635,    0,    0,    0,
      633,    0,    0,    0,    0,  624,  633,    0,  637,  635,
      637,  637,  637,  634,    0,    0,  638,  636,  638,  638,
      638,  639,    0,  639,  639,  639,  635,    0,    0,    0,
        0,  636,  640,    0,  640,  640,  640,    0,  641,    0,
      641,  641,  641,    0,    0,    0,    0,  636,  642,  637,
      642,  642,  642,    0,    0,    0,  637,  643,    0,  643,
      643,  643,    0,  646,  638,  646,  646,  646,    0,  639,
      641,    0,  640,  642,    0,    0,    0,    0,  637,  644,
      640,  644,  644,  644,    0,  645,  641,  645,  645,  645,

        0,  647,    0,  647,  647,  647,  642,  643,    0,    0,
      641,  640,    0,  642,    0,  643,    0,    0,  645,    0,
      648,  646,  648,  648,  648,    0,    0,    0,  649,  644,
      649,  649,  649,    0,    0,    0,  643,  644,  650,    0,
      650,  650,  650,  645,    0,    0,    0,    0,  645,  647,
      651,    0,  651,  651,  651,    0,    0,    0,  644,  652,
        0,  652,  652,  652,    0,  648,    0,  653,  648,  653,
      653,  653,    0,  650,    0,  651,  649,  654,    0,  654,
      654,  654,    0,    0,    0,  655,  650,  655,  655,  655,
        0,    0,    0,  652,  648,    0,    0,    0,  651,    0,

        0,    0,    0,  650,    0,  651,    0,  652,    0,  656,
      655,  656,  656,  656,    0,  653,  654,    0,  657,    0,
      657,  657,  657,  652,  658,  654,  658,  658,  658,    0,
        0,    0,  659,  655,  659,  659,  659,    0,    0,    0,
      655,    0,    0,    0,    0,  654,    0,  660,  656,  660,
      660,  660,  663,  659,  663,  663,  663,  656,  657,    0,
        0,  661,  658,  661,  661,  661,  657,  662,    0,  662,
      662,  662,  658,    0,    0,    0,    0,  656,    0,    0,
      659,    0,  664,  659,  664,  664,  664,  657,    0,  661,
        0,  658,  662,    0,  666,  660,  666,  666,  666,    0,

      663,    0,    0,  665,    0,  665,  665,  665,  667,  661,
      667,  667,  667,    0,  668,  662,  668,  668,  668,  661,
        0,  664,  662,  666,  665,  669,    0,  669,  669,  669,
      664,    0,    0,    0,  670,  667,  670,  670,  670,  668,
        0,  671,  666,  671,  671,  671,    0,    0,    0,    0,
      664,  665,    0,  666,  665,    0,  667,  672,    0,  672,
      672,  672,  668,  669,  673,  667,  673,  673,  673,  668,
        0,    0,    0,  669,    0,    0,  671,  674,  672,  674,
      674,  674,  670,  675,    0,  675,  675,  675,    0,  671,
        0,  676,  669,  676,  676,  676,    0,    0,  674,    0,

      677,    0,  677,  677,  677,  672,  671,  675,  672,    0,
        0,  678,  673,  678,  678,  678,  679,    0,  679,  679,
      679,    0,    0,    0,    0,  674,    0,    0,  674,  676,
        0,  675,  677,    0,    0,    0,  678,  675,  680,  676,
      680,  680,  680,  681,    0,  681,  681,  681,  677,    0,
      682,    0,  682,  682,  682,    0,  679,    0,  676,  678,
        0,    0,  677,    0,  679,  683,  678,  683,  683,  683,
        0,  684,    0,  684,  684,  684,    0,  685,  680,  685,
      685,  685,    0,    0,    0,  679,  680,    0,    0,    0,
        0,  681,  682,    0,    0,    0,    0,  683,  682,  684,

      686,    0,  686,  686,  686,    0,  687,  680,  687,  687,
      687,    0,  688,  683,  688,  688,  688,    0,    0,  684,
      689,  682,  689,  689,  689,  685,    0,  683,  690,  684,
      690,  690,  690,  691,    0,  691,  691,  691,  692,    0,
      692,  692,  692,  693,    0,  693,  693,  693,  686,    0,
        0,  688,    0,    0,  687,  694,    0,  694,  694,  694,
      688,  695,    0,  695,  695,  695,    0,  696,  689,  696,
      696,  696,    0,    0,    0,    0,  690,    0,  694,    0,
      688,  691,    0,    0,  693,  697,  692,  697,  697,  697,
      698,  693,  698,  698,  698,  699,    0,  699,  699,  699,

        0,  695,  700,  694,  700,  700,  700,    0,  694,  695,
      697,    0,    0,  693,  701,  696,  701,  701,  701,  702,
        0,  702,  702,  702,    0,    0,    0,    0,    0,    0,
      695,    0,    0,  697,    0,  699,  700,    0,  698,  701,
      697,    0,    0,  699,  704,  704,    0,  706,  706,    0,
      700,    0,    0,  702,  704,    0,  704,  706,    0,  706,
        0,    0,  701,    0,  699,    0,  700,  702,  704,  701,
      707,  706,  707,  707,  707,  708,    0,  708,  708,  708,
        0,    0,    0,  702,  704,    0,  704,  706,  709,  706,
      709,  709,  709,    0,    0,    0,    0,  704,    0,    0,

      706,  710,  707,  710,  710,  710,    0,    0,    0,  711,
      708,  711,  711,  711,    0,    0,    0,  712,  707,  712,
      712,  712,  713,  708,  713,  713,  713,  714,    0,  714,
      714,  714,  707,    0,  711,  715,  709,  715,  715,  715,
      708,  716,    0,  716,  716,  716,    0,    0,    0,  710,
      717,    0,  717,  717,  717,    0,  718,  711,  718,  718,
      718,    0,    0,    0,  711,  712,  716,    0,    0,    0,
      713,  717,    0,    0,  719,  714,  719,  719,  719,    0,
        0,    0,  720,  715,  720,  720,  720,    0,  721,  716,
      721,  721,  721,    0,    0,    0,  716,    0,  717,    0,

        0,  717,    0,  722,  718,  722,  722,  722,  719,  721,
      723,    0,  723,  723,  723,  724,    0,  724,  724,  724,
        0,  725,  719,  725,  725,  725,    0,    0,    0,  726,
      720,  726,  726,  726,    0,    0,  721,    0,  719,  721,
        0,    0,    0,  727,  723,  727,  727,  727,    0,    0,
      728,  722,  728,  728,  728,    0,    0,    0,  723,    0,
      725,    0,    0,  724,    0,    0,  727,    0,  729,  725,
      729,  729,  729,    0,  723,  728,  730,  726,  730,  730,
      730,  731,    0,  731,  731,  731,    0,    0,    0,  725,
      733,  727,  733,  733,  733,    0,  727,  732,  728,  732,

      732,  732,    0,    0,  731,  728,  729,    0,  734,    0,
      734,  734,  734,    0,    0,  735,  729,  735,  735,  735,
        0,    0,    0,  737,  730,  737,  737,  737,    0,  731,
        0,  732,    0,    0,  731,  729,    0,    0,  733,  736,
        0,  736,  736,  736,    0,  732,  734,    0,  738,    0,
      738,  738,  738,  735,  739,  737,  734,    0,  739,    0,
        0,  732,  739,  735,    0,    0,    0,    0,  739,    0,
        0,  737,  738,    0,    0,  734,  740,  736,  740,  740,
      740,    0,  735,    0,  739,  737,    0,  736,  739,    0,
        0,  741,  739,  741,  741,  741,  738,  742,  739,  742,

      742,  742,  738,    0,    0,  743,  736,  743,  743,  743,
        0,    0,    0,  744,  740,  744,  744,  744,    0,  745,
        0,  745,  745,  745,  740,  746,    0,  746,  746,  746,
      747,    0,  747,  747,  747,    0,    0,    0,  744,  741,
        0,    0,    0,  740,  745,  742,    0,    0,    0,    0,
      743,  747,  748,  743,  748,  748,  748,    0,    0,    0,
      749,  744,  749,  749,  749,    0,    0,  745,  744,    0,
      746,    0,    0,  746,  745,    0,    0,    0,  747,  743,
      750,  747,  750,  750,  750,  751,    0,  751,  751,  751,
        0,  752,    0,  752,  752,  752,    0,    0,  749,  746,

      748,  753,    0,  753,  753,  753,    0,    0,  749,    0,
        0,  750,    0,  754,    0,  754,  754,  754,  755,    0,
      755,  755,  755,    0,    0,    0,    0,  749,  750,  752,
        0,    0,  756,  751,  756,  756,  756,    0,    0,  752,
      754,  750,  757,    0,  757,  757,  757,    0,    0,  753,
        0,  758,  755,  758,  758,  758,    0,    0,  752,    0,
        0,  754,    0,    0,  756,    0,  755,  757,    0,  759,
      754,  759,  759,  759,    0,    0,    0,  758,    0,    0,
      756,  760,  755,  760,  760,  760,    0,    0,    0,  761,
      757,  761,  761,  761,  756,    0,    0,  757,  762,  758,

      762,  762,  762,    0,    0,    0,  763,  758,  763,  763,
      763,  764,    0,  764,  764,  764,  765,  759,  765,  765,
      765,    0,  766,    0,  766,  766,  766,    0,  761,  760,
      767,    0,  767,  767,  767,    0,    0,  761,  768,  763,
      768,  768,  768,    0,    0,    0,  762,  766,    0,    0,
        0,  764,    0,    0,  763,    0,    0,  761,  769,  764,
      769,  769,  769,  770,  765,  770,  770,  770,  767,  763,
      766,  771,    0,  771,  771,  771,  768,  766,  767,    0,
      764,    0,    0,  769,    0,  772,  768,  772,  772,  772,
      770,  773,    0,  773,  773,  773,    0,  767,    0,  774,

      771,  774,  774,  774,    0,  768,  769,    0,    0,    0,
        0,  770,    0,  769,  772,    0,    0,    0,    0,  771,
      770,  775,    0,  775,  775,  775,    0,    0,    0,    0,
      771,    0,  776,  772,  776,  776,  776,    0,  777,  773,
      777,  777,  777,    0,  772,    0,  778,  774,  778,  778,
      778,    0,    0,  779,  776,  779,  779,  779,    0,  780,
      775,  780,  780,  780,    0,    0,    0,  778,  781,  775,
      781,  781,  781,    0,    0,    0,    0,  777,    0,    0,
      776,    0,    0,  780,  776,    0,  777,    0,  782,  775,
      782,  782,  782,    0,  778,    0,  783,  778,  783,  783,

      783,  779,  781,    0,    0,    0,  777,  780,  784,    0,
      784,  784,  784,  780,    0,    0,  781,  785,    0,  785,
      785,  785,  786,    0,  786,  786,  786,    0,    0,    0,
      783,    0,  781,  784,    0,  787,  782,  787,  787,  787,
        0,    0,    0,    0,  783,  788,    0,  788,  788,  788,
      789,    0,  789,  789,  789,  791,  784,  791,  791,  791,
      783,    0,    0,  784,  790,  785,  790,  790,  790,  792,
      786,  792,  792,  792,  793,    0,  793,  793,  793,    0,
        0,    0,    0,  787,  794,  788,  794,  794,  794,    0,
        0,    0,    0,  788,    0,  789,    0,    0,  789,  793,

        0,    0,  790,  791,    0,    0,    0,    0,    0,  792,
        0,    0,  790,    0,  788,    0,  795,  792,  795,  795,
      795,    0,  793,  794,  789,    0,    0,    0,    0,  793,
        0,  790,  794,  796,    0,  796,  796,  796,  792,  797,
        0,  797,  797,  797,    0,  798,    0,  798,  798,  798,
        0,  799,  794,  799,  799,  799,  800,    0,  800,  800,
      800,    0,  796,    0,  795,    0,    0,  801,  797,  801,
      801,  801,  802,    0,  802,  802,  802,    0,    0,    0,
      803,  796,  803,  803,  803,    0,  804,  797,  804,  804,
      804,  801,  796,  798,    0,    0,  800,    0,  797,  799,

        0,    0,    0,  805,  800,  805,  805,  805,    0,    0,
        0,    0,  803,    0,  806,  801,  806,  806,  806,    0,
      802,  801,    0,    0,    0,  800,    0,  807,  803,  807,
      807,  807,    0,  808,  804,  808,  808,  808,    0,    0,
        0,  809,  803,  809,  809,  809,    0,    0,  805,    0,
        0,  805,  810,    0,  810,  810,  810,  808,    0,    0,
        0,  811,  806,  811,  811,  811,  812,  807,  812,  812,
      812,    0,    0,    0,    0,  807,  813,  805,  813,  813,
      813,  808,  814,    0,  814,  814,  814,  808,    0,  809,
      815,  810,  815,  815,  815,  816,  807,  816,  816,  816,

      810,  817,    0,  817,  817,  817,    0,    0,  818,  811,
      818,  818,  818,    0,  812,  819,    0,  819,  819,  819,
      810,  814,    0,    0,  813,  817,    0,    0,    0,  818,
      814,    0,    0,    0,    0,  816,  819,  820,  815,  820,
      820,  820,  821,  816,  821,  821,  821,    0,    0,  817,
      814,    0,    0,    0,    0,  817,  818,    0,    0,  818,
        0,    0,  820,  819,  816,  822,  819,  822,  822,  822,
      823,    0,  823,  823,  823,  824,    0,  824,  824,  824,
      825,    0,  825,  825,  825,  820,    0,    0,    0,    0,
      821,  826,  820,  826,  826,  826,  827,    0,  827,  827,

      827,    0,  823,    0,  828,    0,  828,  828,  828,    0,
        0,    0,    0,  822,    0,    0,  825,    0,  823,    0,
        0,  827,    0,  824,    0,    0,  828,  829,  825,  829,
      829,  829,  823,  830,    0,  830,  830,  830,  831,  826,
      831,  831,  831,    0,  827,    0,  825,    0,    0,  829,
        0,  827,  828,    0,    0,  832,  828,  832,  832,  832,
        0,    0,  833,  831,  833,  833,  833,  834,    0,  834,
      834,  834,    0,    0,    0,  829,  832,    0,    0,  829,
      835,  830,  835,  835,  835,  836,  831,  836,  836,  836,
        0,    0,  838,  831,  838,  838,  838,    0,  837,  834,

      837,  837,  837,  832,    0,  839,  832,  839,  839,  839,
      833,    0,  835,    0,    0,  834,  840,  838,  840,  840,
      840,  837,  842,  836,  842,  842,  842,    0,  835,  834,
      839,    0,  841,  836,  841,  841,  841,    0,    0,    0,
      838,  843,  835,  843,  843,  843,  837,  838,    0,    0,
        0,  837,  836,  839,    0,    0,    0,  841,    0,  844,
      839,  844,  844,  844,  840,    0,    0,    0,    0,    0,
      842,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      841,    0,    0,    0,    0,    0,    0,  841,    0,  843,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  844,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  850,    0,
      850,  850,  850,  850,  850,  851,  851,  851,  852,  852,
        0,  852,    0,  852,  852,  852,  852,  852,  853,  853,
        0,  853,  853,  853,  853,  853,  853,  853,  854,    0,
        0,  854,  854,    0,    0,  854,  854,  854,  855,  855,
      856,  856,    0,  856,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[233] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #define YY_DECL int yylex()

    bool DEBUG = false;

    bool endsWith(const std::string & str, const std::string & suffix);
    void removeUnderline(std::string * str);
    void removeUnderline(char * str);

    struct Date {
        int day = 0;
        int month = 0;
        int year = -1;
    };

    enum TimeFormat {
        AM, PM, HOURS_24
    };

    struct Time {
        int hour = 0;
        int minute = 0;
        int second = 0;
        TimeFormat format = HOURS_24;
    };

    struct DateTime {
        Date* date = nullptr;
        Time* time = nullptr;
    };

    void printDateTimeLiteral(DateTime& datetime);
#line 2418 "lexer.flex.cpp"

#line 2420 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2
#define DATETIME 3
#define DATE 4
#define TIME 5

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 55 "lexer.l"



#line 59 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;



#line 2656 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 846 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 845 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 74 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 78 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 81 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 83 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 84 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 85 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 92 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 105 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 106 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 107 "lexer.l"
{printf("Found keyword : %s\n", yytext);}    
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 108 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 109 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 110 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 111 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 112 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 113 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 114 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 115 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 116 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 117 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 118 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 119 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 120 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 121 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 122 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 123 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 126 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 127 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 128 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 129 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 130 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 131 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 132 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 133 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 134 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 135 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 136 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 137 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 138 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 139 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 140 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 141 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 142 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 143 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 144 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 147 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 148 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 149 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 150 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 151 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 152 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 154 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 155 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 156 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 157 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 158 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 159 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 160 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 161 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 162 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 163 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 164 "lexer.l"
{printf("Found keyword : %s\n", yytext);}   
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 165 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 166 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 167 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 168 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 169 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 170 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 171 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 172 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 173 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 174 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 175 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 176 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 177 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 178 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 179 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 180 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 181 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 182 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 183 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 184 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 185 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 186 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 187 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 188 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 189 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 190 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 191 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 192 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 193 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 194 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 195 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 196 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 197 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 198 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 199 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 200 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 201 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 202 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 203 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 204 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 205 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 206 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 207 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 208 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 209 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 210 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 211 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 212 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 213 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 214 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 215 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 216 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 217 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 218 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 220 "lexer.l"
{printf("Found nothing literal\n");}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 221 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 222 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 225 "lexer.l"
{printf("Found a XOR operator: %s\n", yytext);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 226 "lexer.l"
{printf("Found a MUL operator: %s\n", yytext);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 227 "lexer.l"
{printf("Found a FLOOR_DIV operator: %s\n", yytext);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 228 "lexer.l"
{printf("Found a DIV operator: %s\n", yytext);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 229 "lexer.l"
{printf("Found a PLUS operator: %s\n", yytext);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 230 "lexer.l"
{printf("Found a MINUS operator: %s\n", yytext);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 231 "lexer.l"
{printf("Found an ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 232 "lexer.l"
{printf("Found a XOR_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 233 "lexer.l"
{printf("Found a MUL_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 234 "lexer.l"
{printf("Found a ADD_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 235 "lexer.l"
{printf("Found a SUB_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 236 "lexer.l"
{printf("Found a LESS_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 237 "lexer.l"
{printf("Found a LESS operator: %s\n", yytext);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 238 "lexer.l"
{printf("Found a GREATER operator: %s\n", yytext);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 239 "lexer.l"
{printf("Found a GREATER_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 240 "lexer.l"
{printf("Found a NOT_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 241 "lexer.l"
{printf("Found a STR_CONCAT operator: %s\n", yytext);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 242 "lexer.l"
{printf("Found a STR_CONCAT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 243 "lexer.l"
{printf("Found a RSHIFT operator: %s\n", yytext);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 244 "lexer.l"
{printf("Found a LSHIFT operator: %s\n", yytext);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 245 "lexer.l"
{printf("Found a LSHIFT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 246 "lexer.l"
{printf("Found a RSHIFT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 247 "lexer.l"
{printf("Found an FLOOR_DIV_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 248 "lexer.l"
{printf("Found a DIV_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 250 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 251 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 252 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 253 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 255 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 256 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 257 "lexer.l"
{strLiteral += "\\";}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 258 "lexer.l"
{strLiteral += "\n";}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 259 "lexer.l"
{strLiteral += "\r";}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 260 "lexer.l"
{strLiteral += "\t";}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 261 "lexer.l"
{strLiteral += "\b";}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 262 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 263 "lexer.l"
{printf("Error: String literal wasn't closed\n"); yyterminate();}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 264 "lexer.l"
{
    printf("Error: String literal wasn't closed at line %d\n", yylineno - 1); 
    if (!DEBUG) {
        yyterminate();
    }
    else {
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 273 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        printf("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
    } else {
        printf("Error: character literal can have only one character, not string, line: %d", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 283 "lexer.l"
{printf("Found a string literal: %s\n", strLiteral.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 286 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 291 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 296 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 302 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = atoi(intLiteral); printf("Found a integer value: %d\n", intValue);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 318 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 16);
    printf("Found a hex integer value: %d\n", intValue);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 335 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 8);
    printf("Found a oct integer value: %d\n", intValue);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 352 "lexer.l"
{
    std::string lexeme(yytext);
    removeUnderline(&lexeme);
    doubleValue = atof(lexeme.c_str());
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 359 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    removeUnderline(floatLiteral);
    doubleValue = atof(floatLiteral);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 367 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 372 "lexer.l"
{BEGIN(DATETIME); datetime = DateTime(); printf("Found opening datetime literal lexeme\n");}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 373 "lexer.l"
{printf("Found a whitespace inside datetime literal\n");}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 374 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
    dateOrTimePositionIndex = 0;
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 378 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = AM;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 383 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = PM;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 388 "lexer.l"
{
    if (datetime.time != nullptr) {
        printf("Error: Time must not be declared before date, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date = new Date();
    datetime.date->month = tempIntLiteral;
    dateOrTimePositionIndex++;
    BEGIN(DATE);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 398 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 401 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.date->day = tempIntLiteral;
            break;
        default:
            printf("Error: date has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    }
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 412 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components\n");
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    BEGIN(INITIAL);
    BEGIN(DATETIME);
    tempIntLiteral = -1;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 422 "lexer.l"
{
    BEGIN(TIME);
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 429 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 432 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.time->minute = tempIntLiteral;
            break;
        default:
            printf("Error: time has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    };
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 443 "lexer.l"
{
    datetime.time->format = AM;
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 446 "lexer.l"
{
    datetime.time->format = PM;
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 449 "lexer.l"
{
    printf("Error: date literal characters in time literal: %d\n", yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 454 "lexer.l"
{
    if (datetime.date == nullptr && datetime.time == nullptr) {
        printf("Error: Unrecognized date literal at line %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    if (tempIntLiteral != -1) {
        printf("Error: Unrecognized int literal: %d at line %d\n", tempIntLiteral, yylineno);
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 468 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 480 "lexer.l"
{
    if (dateOrTimePositionIndex < 1) {
        printf("Error: Missing time components: %d\n", yylineno);
    } else if (dateOrTimePositionIndex == 1) {
        datetime.time->minute = tempIntLiteral;
    } else if (dateOrTimePositionIndex == 2) {
        datetime.time->second = tempIntLiteral;
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 494 "lexer.l"
{
    printf("Error: invalid characters in datetime literal at line %d: %s\n", yylineno, yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 498 "lexer.l"
{printf("Error: line break in datetime literal at line %d", yylineno);}
	YY_BREAK
case YY_STATE_EOF(DATETIME):
#line 499 "lexer.l"
{printf("Error: unexpected file end in datetime literal at line %d", yylineno); yyterminate(); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 501 "lexer.l"
{ printf("Found a separator left parenthesis: %s\n", yytext); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 502 "lexer.l"
{printf("Found a separator right parenthesis: %s\n", yytext);}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 503 "lexer.l"
{printf("Found a separator left curly brace: %s\n", yytext); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 504 "lexer.l"
{ printf("Found a separator right curly brace: %s\n", yytext); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 505 "lexer.l"
{printf("Found a separator question mark: %s\n", yytext); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 506 "lexer.l"
{printf("Found a separator point: %s\n", yytext); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 507 "lexer.l"
{printf("Found a separator exclamation mark: %s\n", yytext); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 508 "lexer.l"
{ printf("Found a separator comma: %s\n", yytext); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 509 "lexer.l"
{printf("Found a separator colon: %s\n", yytext); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 511 "lexer.l"
{printf("Found a identifier: %s\n", yytext);}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 513 "lexer.l"
{printf("Found a whitespace\n");}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 514 "lexer.l"
{printf("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 515 "lexer.l"
{printf("Found end of line %d\n\n", yylineno - 1);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(TIME):
#line 516 "lexer.l"
{printf("File ended\n"); yyterminate();}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 518 "lexer.l"
ECHO;
	YY_BREAK
#line 4088 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 846 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 846 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 845);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 518 "lexer.l"


void removeUnderline(std::string* str) {
    if (str == nullptr) {
        return; 
    }
    str->erase(std::remove(str->begin(), str->end(), '_'), str->end());
}

void removeUnderline(char* str) {
    if (str == nullptr) {
        return; 
    }

    char* writePtr = str;
    char* readPtr = str;

    while (*readPtr != '\0') {
        if (*readPtr != '_') {
            *writePtr = *readPtr;
            writePtr++;
        }
        readPtr++;
    }

    *writePtr = '\0';
}


bool endsWith(const std::string& str, const std::string& suffix)
{
    return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
}

void printDateTimeLiteral(DateTime& datetime) {
    if (datetime.date != nullptr) {
        printf("Month: %d\n", datetime.date->month);
        printf("Day: %d\n", datetime.date->day);
        printf("Year: %d\n", datetime.date->year);
    }
    if (datetime.time != nullptr) {
        printf("Hour: %d\n", datetime.time->hour);
        printf("Minute: %d\n", datetime.time->minute);
        printf("Second: %d\n", datetime.time->second);
        printf("Time format: ");
        if (datetime.time->format == AM) {
            printf("AM\n");
        }
        else if (datetime.time->format == PM) {
            printf("PM\n");
        }
        else {
            printf("24-hour format\n");
        }
    }
}

void runTests() {
    DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };
    int numFiles = sizeof(files) / sizeof(files[0]);
    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        printf("Processing file: %s\n", files[i]);
        yylex();
        fclose(yyin);
        BEGIN(INITIAL);
        yylineno = 1;
    }
}

int main(int argc, char** argv) {
    if (argc > 1) {
        if (strcmp(argv[1], "--debug") == 0) {
            runTests();
            return 0;
        }
        fopen_s(&yyin, argv[1], "r");
        yylex();
    }
    else {
        printf("File not found");
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
+ Скобки и управляющие символы (Микулина)
*/
