#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 228
#define YY_END_OF_BUFFER 229
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[798] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  229,  228,  225,  227,  158,  188,  204,  177,
      185,  152,  153,  162,  165,  159,  166,  157,  228,  199,
      160,  173,  167,  174,  156,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  228,  163,  161,
      228,  154,  155,  189,  196,  198,  228,  186,  187,  222,
      205,  223,  219,  209,  206,  213,  222,  222,  212,  220,
      211,  210,  221,  218,  214,  215,  228,  228,  225,    0,
      227,  178,    0,    0,  169,    0,  199,  170,  171,  202,

      164,    0,    0,  199,  199,  199,    0,  180,  172,  176,
      175,  179,  224,  224,  224,  224,  224,   40,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,   49,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,   54,  224,   18,   19,  224,  224,  224,  132,  224,
      224,  224,  224,  224,  224,  224,  135,   25,  224,   26,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  108,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,    0,  183,  168,

      189,  195,  197,  194,  191,  192,  193,  190,  186,  222,
      205,  218,  206,  207,  208,  212,  210,  214,  216,  217,
        0,  200,  201,  203,    0,  184,  202,    0,  202,  199,
      199,  199,  181,  182,  224,  224,  113,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  122,  224,
      224,  224,  224,   87,  224,  224,  224,  224,  224,  224,
      224,  126,  224,  224,   89,  224,  224,  224,  224,  224,
      224,  224,  224,   94,  131,  224,  224,  224,   21,  224,

      224,  224,  224,  224,   23,  224,   98,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  185,
      224,  224,  224,  224,   31,  224,  224,  224,  224,  224,
      224,  224,  107,  224,  224,  224,  224,   35,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      148,  226,  200,  200,  200,    0,  201,  201,  201,    0,
        0,  202,    0,  224,  224,  224,  224,  224,  224,    3,
      224,   78,  115,  224,  224,  224,  224,  224,   43,   80,
      117,    6,  224,   81,  118,  224,  224,  224,  224,    8,
       46,  224,  224,  224,  224,   84,  224,  224,  224,  224,

      224,  224,  123,   12,  224,   13,  224,  224,  224,   14,
      224,  224,  224,  224,  224,  224,  224,  224,  128,  224,
      224,  224,  224,  224,  224,   20,   57,   95,  224,  224,
      224,  224,  224,  224,   60,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  106,  143,  224,  224,  224,   34,  224,  150,
      224,  224,  224,  224,  224,  224,  224,   37,   74,  224,
      224,   38,  224,  200,  200,  200,  201,  201,  201,    0,
      202,  224,  224,   76,  224,  224,  114,   41,    4,   42,

       79,  116,    5,   44,    7,  224,  224,  224,   83,  120,
        9,  224,  224,  224,  224,  224,  224,  224,  224,  124,
       51,   88,  125,  151,  224,  224,  224,  224,  224,  224,
       91,  224,  224,  224,  224,  224,  224,   56,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,   66,  224,  224,  224,  104,  224,  224,  224,
      142,  224,  224,  224,  224,  224,   71,  224,  224,  224,
       36,  224,  110,  224,  111,  224,  224,  224,  224,  224,
      224,  224,  224,   82,  119,  224,  224,  224,  224,  224,

      224,   86,   50,  224,   15,  224,  224,  224,   53,  224,
      224,  224,  224,  224,  224,   58,  224,  224,   22,  224,
      224,  224,  224,  224,  224,   99,  224,  100,   63,  224,
      224,  224,  224,  224,  224,  224,  103,  224,  224,  224,
       30,   67,  141,  224,  105,   32,   69,   33,  224,  224,
      224,  109,  224,   73,  224,  224,  224,  224,  224,  224,
        2,   77,  224,   47,  121,   10,   48,  224,  224,   90,
      224,  127,  224,   17,  224,  129,  224,   93,  224,  224,
      224,   59,  224,  224,  149,  224,  224,  224,  224,  224,
      224,  224,  102,  138,  224,  224,  224,  224,  224,   68,

      224,  224,   72,  224,  146,  224,  224,  224,  224,  224,
       45,   85,  224,   52,  224,  224,   55,  224,  224,  224,
      224,  224,  224,  224,   62,  136,  224,  224,  224,  224,
       28,  224,  224,   29,  224,  224,  144,  145,  147,  224,
      224,  224,   39,  224,  224,  224,  130,  224,  224,   97,
      134,  224,  224,  101,  224,   27,  224,   65,  224,  224,
       70,  224,  112,    1,   11,  224,   92,  224,  224,  224,
      224,  224,   64,  139,  224,   75,  224,   96,  224,  224,
      224,  137,  224,  224,  133,  224,  224,  224,  224,  224,
      224,  140,  224,   24,   61,   16,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    1,   21,
       22,   23,   24,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   41,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   41,   71,   72,   73,   74,   75,   76,   77,
       78,   41,   79,    1,   80,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    2,    3,    4,    5,    6,    4,    4,    1,    1,
        1,    1,    1,    1,    2,    1,    2,    7,    7,    2,
        1,    1,    1,    1,    8,    8,    8,    8,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    1,
        5,    4,    1,    9,    8,    8,    8,    8,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    1,    1
    } ;

static const flex_int16_t yy_base[808] =
    {   0,
        0,    0,   78,   79,  295,  288,   83,  107,  131,  137,
      151,  167,  287, 6995,   86,  279, 6995, 6995, 6995,   72,
     6995, 6995, 6995,  250,   74, 6995,   96,   87,  245,  222,
     6995,   98, 6995,   94, 6995,  293,  190,  362,  433,  499,
      221,  250,  209,  573,  157,  278,  279,  353,  620,  358,
      418,  670,  481,  446,  219,  524,  204,  203,  211,  209,
      117, 6995, 6995,    0, 6995,  162,  556,    0, 6995,    0,
      226, 6995, 6995,   80,  126, 6995,   91,  105,  222, 6995,
     6995,  141, 6995,  163,  156, 6995,  114,  151,  218,  212,
      202, 6995,    0,  172, 6995,  181,    0, 6995, 6995,  682,

      161,  183,  217, 6995, 6995, 6995,  313,  157, 6995, 6995,
     6995,  109,   55,  241,  463,  584,  615,  319, 6995,  678,
      714,  755,  500,  645,  609,  438,  763,  768,  774,  839,
      788,  845,  850,  892,  868,  810,  923,  930,  939,  953,
      947,  979,  962, 1003, 1011, 1026, 1031, 1040, 1054, 1060,
     1069, 1090, 1110, 1096, 1123, 1137, 1147, 1159, 1164, 1179,
     1170, 1188, 1213, 1226, 1245, 1252, 1260, 1275, 1284, 1292,
     1301, 1316, 1286, 1355, 1331, 1387, 1325, 1384, 1317, 1394,
     1380, 1457, 1462, 1176, 1389, 1041, 1467, 1472, 1481, 1463,
     1535, 1540, 1503, 1545, 1550, 1563, 1578,  185, 6995, 6995,

        0, 6995, 6995, 6995, 6995, 6995, 6995, 6995,    0,    0,
       97,  178,  234,    0,    0,   89,  251,  259, 6995, 6995,
      312, 1574, 1578, 6995,  345, 6995, 1635,  321, 1638, 6995,
     6995, 6995, 6995, 6995, 1596, 1587, 1665, 1675, 1681, 1693,
     1717, 1708, 1724, 1730, 1742, 1755, 1760, 1782, 1794, 1802,
     1771, 1789, 1813, 1832, 1843, 1860, 1865, 1872, 1884, 1892,
     1902, 1912, 1919, 1945, 1931, 1962, 1978, 1998, 1985, 2009,
     2014, 2028, 2035, 2040, 2045, 2068, 2077, 2092, 2098, 2111,
     2004, 2117, 2127, 2141, 2151, 2158, 2166, 2174, 2181, 2198,
     2213, 2223, 2240, 2247, 2252, 2262, 2270, 2277, 2282, 2289,

     2299, 2312, 2331, 2351, 2336, 2361, 2347, 2367, 2391, 2417,
     2423, 2431, 2438, 2445, 2460, 2470, 2480, 2488, 2501, 2511,
     2520, 2531, 2537, 2550, 2562, 2578, 2589, 2567, 2609, 2617,
     2631, 2639, 2644, 2658, 2669, 2686, 2691, 2720, 2710, 2726,
     2738, 2745, 2750, 2759, 2767, 2775, 2797, 2822, 2828, 2833,
     2840,   84, 6995, 6995, 6995,  957, 6995, 6995, 6995, 2348,
      325, 2836,  362, 2861, 2891, 2896, 2904, 2915, 2921, 2926,
     2951, 2956, 2976, 2982, 2987, 2993, 2998, 3003, 3012, 3023,
     3029, 3050, 3064, 3059, 3070, 3076, 3081, 3086, 3093, 3102,
     3111, 3117, 3133, 3144, 3149, 3164, 3174, 3183, 3191, 3196,

     3206, 3215, 3224, 3238, 3248, 3262, 3276, 3281, 3287, 3303,
     3309, 3314, 3336, 3341, 3350, 3363, 3369, 3375, 3383, 3401,
     3412, 3432, 3438, 3444, 3450, 3455, 3462, 3475, 3481, 3479,
     3493, 3518, 3524, 3533, 3545, 3551, 3556, 3571, 3582, 3612,
     3621, 3634, 3643, 3650, 3655, 3664, 3674, 3692, 3704, 3716,
     3721, 3728, 3735, 3742, 3751, 3778, 3792, 3807, 3798, 3817,
     3827, 3832, 3847, 3860, 3866, 3874, 3881, 3890, 3899, 3907,
     3915, 3921, 3937, 3931, 3946, 3970, 3957, 3987, 3996, 4007,
     4012, 4017, 4022, 6995, 6995, 6995, 6995, 6995, 6995,  336,
     4015, 4054, 4048, 4064, 4081, 4089, 4095, 4103, 4111, 4119,

     4124, 4130, 4142, 4150, 4158, 4166, 4171, 4177, 4183, 4189,
     4199, 4205, 4218, 4232, 4252, 4238, 4258, 4271, 4290, 4301,
     4307, 4318, 4328, 4333, 4339, 4348, 4356, 4361, 4375, 4380,
     4386, 4391, 4417, 4422, 4429, 4441, 4449, 4469, 4479, 4490,
     4498, 4507, 4512, 4539, 4518, 4533, 4545, 4574, 4568, 4592,
     4607, 4598, 4582, 4631, 4624, 4648, 4654, 4662, 4674, 4680,
     4689, 4704, 4709, 4715, 4739, 4732, 4745, 4751, 4758, 4771,
     4779, 4786, 4800, 4810, 4829, 4836, 4842, 4847, 4852, 4861,
     4872, 4879, 4889, 4902, 4910, 4922, 4929, 4938, 4943, 4953,
     4959, 4972, 4985, 4980, 5008, 5013, 5027, 5035, 5040, 5045,

     5063, 5069, 5074, 5092, 5097, 5103, 5121, 5126, 5131, 5139,
     5150, 5155, 5161, 5180, 5189, 5211, 5217, 5229, 5222, 5239,
     5246, 5253, 5258, 5286, 5300, 5269, 5316, 5321, 5326, 5350,
     5355, 5373, 5380, 5388, 5393, 5404, 5415, 5422, 5427, 5446,
     5435, 5451, 5465, 5476, 5482, 5488, 5498, 5503, 5508, 5514,
     5523, 5529, 5539, 5550, 5555, 5566, 5572, 5581, 5586, 5602,
     5607, 5636, 5649, 5654, 5659, 5666, 5673, 5678, 5687, 5692,
     5709, 5715, 5720, 5727, 5742, 5747, 5752, 5762, 5778, 5784,
     5811, 5794, 5821, 5833, 5843, 5848, 5854, 5860, 5868, 5880,
     5874, 5910, 5920, 5938, 5943, 5949, 5957, 5962, 5981, 5967,

     5976, 5990, 5996, 6016, 6023, 6031, 6046, 6037, 6053, 6063,
     6070, 6093, 6100, 6112, 6121, 6126, 6131, 6142, 6153, 6161,
     6178, 6173, 6183, 6211, 6202, 6232, 6243, 6249, 6254, 6262,
     6272, 6284, 6292, 6303, 6312, 6325, 6331, 6339, 6345, 6355,
     6361, 6366, 6381, 6386, 6394, 6408, 6413, 6436, 6441, 6418,
     6448, 6469, 6475, 6460, 6483, 6488, 6501, 6510, 6516, 6524,
     6539, 6550, 6557, 6563, 6577, 6588, 6593, 6599, 6604, 6612,
     6619, 6646, 6651, 6662, 6672, 6677, 6682, 6687, 6703, 6693,
     6709, 6719, 6740, 6750, 6760, 6770, 6775, 6781, 6787, 6809,
     6822, 6839, 6849, 6858, 6863, 6869, 6995, 6921, 6930, 6939,

     6948, 6954, 6956, 6965, 6974, 6983, 6986
    } ;

static const flex_int16_t yy_def[808] =
    {   0,
      797,    1,  798,  798,  799,  799,  800,  800,  801,  801,
      801,  801,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  802,  802,  802,  802,  802,
       39,   39,  802,  802,  802,   39,   39,   39,   44,   41,
       39,   47,   47,  802,  802,   53,  802,  803,  797,  797,
      803,  797,  797,  804,  797,  797,  797,  805,  797,  806,
      797,  797,  797,  797,  797,  797,  806,  806,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  807,  797,  797,  797,   30,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  802,  802,  802,  802,  802,  797,  802,
      802,  802,   53,  802,   39,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  130,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,   39,  802,  802,   44,  802,  802,   39,  802,
       39,  802,  802,   56,  802,   47,  802,  802,  802,   56,
      802,  802,   56,  802,  802,  802,  802,  803,  797,  797,

      804,  797,  797,  797,  797,  797,  797,  797,  805,  806,
      797,  797,  797,  806,  806,  797,  797,  797,  797,  797,
      797,  807,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,   56,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,   56,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,   39,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  797,  797,  797,  797,  797,  797,  797,
      797,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
       39,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,    0,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  797
    } ;

static const flex_int16_t yy_nxt[7076] =
    {   0,
       14,   15,   16,   17,   18,   19,   14,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   45,   46,   47,   48,   49,   50,
       45,   51,   52,   53,   54,   55,   56,   57,   45,   58,
       59,   14,   60,   61,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   45,   62,   63,
       65,   65,   66,   66,   71,   72,  352,   89,   73,   96,
      216,   97,   97,   92,  212,   98,  212,   74,  211,   74,

       75,   75,   76,   93,  100,  100,  119,   77,   71,   72,
       94,   96,   73,   97,   97,  111,  112,   99,  108,  109,
      110,   74,   78,   74,   75,   75,   76,  214,   67,   67,
      234,   77,   79,   93,  197,  197,   80,   77,   79,   90,
       94,  215,   80,  213,  213,   81,   78,   81,   82,   82,
      219,   81,   78,   81,   82,   82,   83,  214,  217,  217,
      113,   77,  113,  113,  113,   84,  202,   84,   85,   85,
       86,  215,   83,  218,  218,   87,   78,  212,  233,  212,
      219,   84,  226,   84,   85,   85,   86,  220,  203,  223,
       88,   87,  212,  113,  212,  113,  113,  113,  100,  100,

      227,  227,  197,  197,   91,   87,   88,  113,  119,  113,
      113,  113,  113,  221,  113,  113,  113,  220,  203,   89,
       88,   87,  113,  216,  113,  113,  113,  211,  120,  228,
      200,  228,  199,  151,  229,  229,   88,  102,  121,   97,
       97,  119,  196,  191,  113,  143,  113,  113,  113,  114,
      103,  213,  213,  144,  104,  119,  198,  105,  120,  145,
      119,  101,  146,  151,  106,  147,  107,  121,  217,  217,
      119,   95,  196,  191,  114,  143,  218,  218,  148,  114,
      103,   91,  114,  144,  104,  149,  797,  105,  150,  145,
       69,  146,  119,  106,  147,  107,  113,   69,  113,  113,

      113,  797,  114,  114,  114,  797,  156,  159,  148,  797,
      157,  114,  114,  221,  352,  149,  158,  160,  150,  797,
      115,  797,  113,  161,  113,  113,  113,  162,  116,  797,
      117,  797,  114,  114,  797,  118,  156,  159,  229,  229,
      157,  114,  362,  362,  119,  230,  158,  160,  231,  797,
      115,  797,  161,  491,  491,  232,  162,  361,  116,  361,
      117,  797,  362,  362,  118,  113,  797,  113,  113,  113,
      119,  797,  797,  797,  490,  230,  490,  163,  231,  491,
      491,  164,  172,  797,  232,  114,  122,  123,  124,  125,
      114,  165,  797,  126,  127,  797,  114,  128,  797,  173,

      129,  797,  174,  797,  130,  131,  132,  163,  797,  797,
      797,  164,  172,  119,  797,  114,  122,  123,  124,  125,
      114,  165,  797,  126,  127,  797,  114,  128,  173,  797,
      129,  174,  797,  130,  131,  132,  113,  797,  113,  113,
      113,  113,  175,  113,  113,  113,  176,  797,  797,  113,
      114,  113,  113,  113,  797,  797,  114,  133,  797,  797,
      797,  134,  251,  797,  797,  135,  113,  797,  113,  113,
      113,  136,  175,  797,  797,  797,  176,  797,  188,  797,
      114,  189,  797,  797,  119,  797,  114,  133,  190,  119,
      235,  134,  251,  797,  797,  135,  797,  119,  797,  797,

      797,  136,  113,  797,  113,  113,  113,  797,  188,  114,
      797,  189,  184,  797,  119,  797,  797,  190,  797,  185,
      235,  797,  186,  137,  797,  114,  797,  797,  797,  187,
      797,  114,  797,  797,  138,  797,  139,  797,  245,  114,
      140,  114,  184,  797,  141,  797,  142,  797,  246,  185,
      119,  186,  192,  137,  114,  193,  194,  797,  187,  797,
      797,  114,  114,  797,  138,  195,  139,  797,  245,  140,
      114,  797,  114,  141,  797,  142,  113,  246,  113,  113,
      113,  204,  192,  797,  797,  193,  194,  113,  797,  113,
      113,  113,  114,  205,  195,  797,  797,  206,  797,  207,

      797,  114,  152,  797,  797,  797,  208,  797,  797,  153,
      154,  204,  797,  797,  797,  155,  236,  797,  113,  797,
      113,  113,  113,  205,  119,  797,  206,  797,  207,  797,
      797,  797,  152,  248,  249,  119,  797,  250,  797,  153,
      154,  114,  237,  797,  155,  166,  236,  114,  113,  167,
      113,  113,  113,  797,  797,  797,  114,  168,  797,  169,
      797,  170,  114,  248,  249,  171,  119,  250,  797,  797,
      797,  114,  237,  797,  797,  166,  247,  114,  797,  167,
      797,  113,  797,  113,  113,  113,  114,  168,  797,  169,
      170,  114,  797,  797,  171,  177,  119,  797,  178,  100,

      100,  179,  180,  797,  797,  797,  247,  797,  114,  224,
      225,  224,  797,  181,  182,  797,  238,  113,  183,  113,
      113,  113,  797,  224,  797,  177,  797,  797,  178,  119,
      797,  179,  180,  797,  797,  797,  797,  797,  114,  224,
      225,  224,  181,  182,  797,  797,  238,  183,  797,  797,
      797,  797,  224,  797,  797,  239,  797,  240,  113,  241,
      113,  113,  113,  797,  797,  119,  113,  797,  113,  113,
      113,  113,  797,  113,  113,  113,  797,  113,  797,  113,
      113,  113,  797,  797,  239,  797,  240,  797,  241,  797,
      242,  113,  253,  113,  113,  113,  797,  243,  244,  255,

      252,  797,  797,  797,  797,  254,  119,  797,  797,  797,
      797,  256,  797,  113,  119,  113,  113,  113,  797,  119,
      242,  797,  253,  797,  797,  119,  243,  244,  797,  255,
      252,  797,  797,  797,  797,  254,  261,  797,  797,  119,
      797,  256,  113,  797,  113,  113,  113,  797,  113,  797,
      113,  113,  113,  113,  271,  113,  113,  113,  797,  797,
      797,  119,  797,  797,  257,  261,  797,  797,  797,  797,
      258,  113,  797,  113,  113,  113,  259,  262,  797,  797,
      263,  797,  260,  271,  797,  797,  797,  264,  797,  797,
      119,  797,  797,  265,  257,  113,  119,  113,  113,  113,

      258,  119,  797,  797,  269,  797,  259,  262,  797,  270,
      263,  260,  797,  797,  797,  797,  264,  797,  266,  119,
      797,  267,  265,  797,  797,  797,  113,  268,  113,  113,
      113,  797,  797,  113,  269,  113,  113,  113,  270,  797,
      797,  797,  113,  119,  113,  113,  113,  797,  266,  272,
      113,  267,  113,  113,  113,  797,  113,  268,  113,  113,
      113,  797,  797,  797,  797,  113,  274,  113,  113,  113,
      797,  797,  273,  797,  119,  278,  797,  276,  797,  272,
      797,  119,  113,  275,  113,  113,  113,  797,  797,  484,
      119,  797,  485,  797,  277,  797,  274,  280,  119,  486,

      797,  273,  797,  797,  119,  278,  113,  276,  113,  113,
      113,  279,  275,  119,  113,  797,  113,  113,  113,  484,
      797,  797,  485,  277,  797,  797,  797,  280,  486,  113,
      119,  113,  113,  113,  113,  797,  113,  113,  113,  797,
      281,  279,  797,  113,  797,  113,  113,  113,  797,  797,
      797,  797,  282,  797,  119,  797,  797,  113,  283,  113,
      113,  113,  119,  113,  797,  113,  113,  113,  284,  114,
      281,  797,  113,  797,  113,  113,  113,  119,  797,  114,
      797,  282,  119,  285,  797,  337,  797,  797,  283,  338,
      797,  119,  286,  113,  797,  113,  113,  113,  284,  114,

      797,  797,  287,  288,  797,  119,  289,  797,  797,  114,
      797,  119,  285,  113,  337,  113,  113,  113,  338,  797,
      119,  114,  286,  797,  797,  797,  113,  291,  113,  113,
      113,  287,  288,  114,  797,  797,  289,  797,  797,  292,
      113,  119,  113,  113,  113,  797,  797,  797,  797,  290,
      113,  114,  113,  113,  113,  797,  797,  291,  797,  797,
      293,  119,  113,  114,  113,  113,  113,  113,  292,  113,
      113,  113,  295,  113,  119,  113,  113,  113,  797,  290,
      294,  296,  113,  797,  113,  113,  113,  797,  119,  797,
      293,  113,  797,  113,  113,  113,  297,  298,  119,  797,

      797,  797,  295,  797,  335,  797,  299,  114,  114,  294,
      119,  296,  300,  301,  302,  119,  113,  336,  113,  113,
      113,  119,  797,  797,  797,  797,  297,  298,  797,  113,
      119,  113,  113,  113,  335,  797,  299,  114,  114,  119,
      797,  300,  797,  301,  302,  797,  336,  797,  113,  303,
      113,  113,  113,  797,  304,  113,  797,  113,  113,  113,
      797,  797,  797,  113,  119,  113,  113,  113,  797,  797,
      797,  797,  305,  306,  797,  797,  797,  119,  113,  303,
      113,  113,  113,  304,  797,  308,  797,  113,  307,  113,
      113,  113,  797,  797,  797,  113,  119,  113,  113,  113,

      797,  305,  306,  119,  113,  797,  113,  113,  113,  797,
      114,  119,  309,  797,  114,  308,  797,  307,  314,  113,
      311,  113,  113,  113,  315,  797,  119,  310,  113,  312,
      113,  113,  113,  797,  113,  119,  113,  113,  113,  797,
      114,  326,  309,  119,  114,  114,  797,  797,  314,  114,
      311,  797,  119,  797,  315,  327,  310,  313,  113,  312,
      113,  113,  113,  317,  797,  797,  797,  119,  797,  797,
      797,  326,  797,  323,  797,  114,  119,  797,  797,  114,
      316,  797,  119,  797,  797,  327,  313,  113,  797,  113,
      113,  113,  113,  317,  113,  113,  113,  113,  797,  113,

      113,  113,  323,  797,  329,  797,  119,  797,  330,  797,
      316,  318,  114,  797,  319,  797,  114,  797,  331,  324,
      797,  332,  797,  320,  114,  797,  797,  325,  797,  321,
      322,  328,  797,  797,  329,  119,  797,  797,  330,  797,
      119,  318,  114,  797,  319,  119,  114,  797,  331,  324,
      332,  797,  797,  320,  114,  797,  325,  797,  321,  322,
      113,  328,  113,  113,  113,  113,  797,  113,  113,  113,
      113,  797,  113,  113,  113,  113,  797,  113,  113,  113,
      797,  797,  333,  797,  113,  797,  113,  113,  113,  797,
      797,  114,  797,  797,  342,  343,  797,  797,  797,  334,

      797,  797,  797,  797,  114,  797,  339,  797,  119,  340,
      797,  797,  333,  119,  797,  797,  797,  797,  119,  341,
      797,  114,  797,  119,  342,  343,  797,  797,  797,  334,
      797,  346,  119,  114,  114,  347,  339,  797,  113,  340,
      113,  113,  113,  113,  114,  113,  113,  113,  113,  341,
      113,  113,  113,  113,  797,  113,  113,  113,  797,  797,
      797,  346,  797,  797,  114,  347,  113,  797,  113,  113,
      113,  797,  348,  114,  797,  797,  344,  345,  797,  797,
      797,  113,  350,  113,  113,  113,  119,  797,  349,  797,
      113,  119,  113,  113,  113,  223,  119,  797,  797,  797,

      797,  119,  348,  797,  351,  344,  353,  345,  797,  354,
      357,  366,  350,  358,  119,  797,  355,  349,  356,  797,
      359,  797,  360,  797,  114,  797,  797,  364,  114,  119,
      797,  797,  797,  351,  797,  797,  353,  365,  119,  354,
      357,  366,  797,  358,  797,  355,  797,  356,  797,  359,
      797,  360,  227,  227,  114,  229,  229,  364,  114,  797,
      797,  797,  224,  363,  224,  224,  365,  224,  113,  797,
      113,  113,  113,  797,  797,  797,  224,  797,  113,  224,
      113,  113,  113,  797,  113,  797,  113,  113,  113,  367,
      797,  797,  224,  363,  224,  224,  113,  224,  113,  113,

      113,  797,  797,  797,  797,  224,  797,  797,  224,  369,
      368,  113,  797,  113,  113,  113,  119,  797,  797,  367,
      113,  370,  113,  113,  113,  797,  119,  113,  797,  113,
      113,  113,  119,  113,  797,  113,  113,  113,  797,  369,
      368,  371,  797,  372,  119,  113,  797,  113,  113,  113,
      797,  370,  373,  797,  797,  797,  374,  797,  113,  119,
      113,  113,  113,  113,  797,  113,  113,  113,  119,  797,
      797,  371,  797,  372,  113,  119,  113,  113,  113,  797,
      375,  119,  373,  797,  377,  113,  374,  113,  113,  113,
      797,  797,  113,  119,  113,  113,  113,  113,  376,  113,

      113,  113,  797,  797,  797,  113,  119,  113,  113,  113,
      375,  119,  381,  797,  377,  797,  113,  797,  113,  113,
      113,  797,  119,  797,  797,  378,  797,  376,  380,  379,
      797,  797,  382,  119,  797,  113,  797,  113,  113,  113,
      119,  381,  797,  797,  797,  119,  113,  797,  113,  113,
      113,  797,  797,  119,  378,  383,  797,  797,  380,  379,
      797,  382,  384,  113,  119,  113,  113,  113,  113,  797,
      113,  113,  113,  797,  797,  113,  385,  113,  113,  113,
      797,  797,  797,  119,  383,  797,  797,  113,  797,  113,
      113,  113,  384,  797,  119,  113,  797,  113,  113,  113,

      797,  797,  386,  387,  797,  113,  385,  113,  113,  113,
      389,  119,  797,  388,  390,  113,  119,  113,  113,  113,
      797,  797,  113,  119,  113,  113,  113,  797,  797,  797,
      797,  386,  387,  391,  113,  119,  113,  113,  113,  797,
      389,  392,  388,  119,  390,  797,  797,  797,  113,  393,
      113,  113,  113,  119,  797,  797,  394,  797,  797,  396,
      797,  797,  391,  119,  797,  113,  797,  113,  113,  113,
      119,  392,  797,  797,  797,  797,  395,  797,  797,  393,
      797,  113,  119,  113,  113,  113,  394,  797,  113,  396,
      113,  113,  113,  797,  397,  797,  119,  398,  797,  797,

      797,  113,  399,  113,  113,  113,  395,  113,  797,  113,
      113,  113,  113,  119,  113,  113,  113,  113,  797,  113,
      113,  113,  797,  797,  397,  797,  400,  398,  412,  119,
      797,  113,  399,  113,  113,  113,  119,  401,  113,  402,
      113,  113,  113,  113,  797,  113,  113,  113,  113,  119,
      113,  113,  113,  797,  797,  119,  400,  797,  412,  403,
      119,  797,  797,  404,  797,  119,  797,  401,  797,  402,
      797,  113,  405,  113,  113,  113,  797,  797,  797,  119,
      113,  406,  113,  113,  113,  797,  119,  797,  797,  403,
      797,  119,  797,  404,  797,  113,  119,  113,  113,  113,

      797,  113,  405,  113,  113,  113,  797,  797,  797,  797,
      407,  406,  797,  797,  113,  408,  113,  113,  113,  119,
      113,  797,  113,  113,  113,  797,  797,  797,  119,  409,
      113,  797,  113,  113,  113,  797,  797,  797,  797,  407,
      797,  410,  797,  119,  113,  408,  113,  113,  113,  119,
      797,  797,  797,  411,  113,  413,  113,  113,  113,  409,
      797,  113,  119,  113,  113,  113,  797,  414,  119,  113,
      410,  113,  113,  113,  797,  797,  797,  113,  119,  113,
      113,  113,  411,  417,  113,  413,  113,  113,  113,  797,
      797,  797,  119,  797,  415,  797,  797,  414,  416,  797,

      797,  113,  119,  113,  113,  113,  797,  797,  420,  119,
      418,  797,  419,  417,  797,  797,  113,  119,  113,  113,
      113,  797,  797,  415,  797,  119,  113,  416,  113,  113,
      113,  797,  119,  421,  797,  797,  422,  797,  420,  418,
      797,  423,  419,  113,  797,  113,  113,  113,  797,  119,
      113,  424,  113,  113,  113,  113,  797,  113,  113,  113,
      797,  797,  797,  421,  119,  113,  422,  113,  113,  113,
      797,  423,  797,  113,  119,  113,  113,  113,  425,  797,
      113,  424,  113,  113,  113,  113,  797,  113,  113,  113,
      426,  119,  113,  797,  113,  113,  113,  797,  119,  797,

      427,  797,  113,  119,  113,  113,  113,  797,  425,  797,
      797,  797,  797,  119,  797,  113,  428,  113,  113,  113,
      426,  119,  797,  431,  797,  797,  429,  797,  119,  797,
      427,  797,  430,  119,  113,  797,  113,  113,  113,  113,
      119,  113,  113,  113,  797,  797,  428,  432,  797,  797,
      119,  797,  797,  431,  113,  429,  113,  113,  113,  433,
      797,  430,  797,  119,  113,  797,  113,  113,  113,  797,
      113,  797,  113,  113,  113,  114,  797,  432,  436,  437,
      487,  797,  119,  488,  797,  438,  797,  119,  114,  433,
      489,  797,  434,  797,  113,  439,  113,  113,  113,  797,

      797,  797,  119,  797,  435,  114,  797,  797,  436,  437,
      487,  797,  119,  488,  797,  438,  797,  114,  119,  489,
      113,  434,  113,  113,  113,  439,  113,  797,  113,  113,
      113,  797,  440,  435,  113,  797,  113,  113,  113,  797,
      797,  113,  119,  113,  113,  113,  797,  797,  113,  441,
      113,  113,  113,  797,  797,  797,  797,  797,  442,  797,
      797,  440,  444,  113,  797,  113,  113,  113,  119,  797,
      797,  797,  443,  113,  119,  113,  113,  113,  797,  441,
      797,  445,  119,  113,  797,  113,  113,  113,  442,  119,
      446,  113,  444,  113,  113,  113,  119,  797,  797,  447,

      797,  443,  797,  448,  113,  449,  113,  113,  113,  797,
      445,  119,  797,  797,  113,  451,  113,  113,  113,  446,
      797,  119,  450,  113,  797,  113,  113,  113,  797,  447,
      797,  119,  448,  452,  113,  449,  113,  113,  113,  119,
      113,  797,  113,  113,  113,  451,  797,  797,  797,  453,
      797,  450,  119,  113,  797,  113,  113,  113,  797,  797,
      797,  797,  119,  452,  454,  113,  797,  113,  113,  113,
      113,  119,  113,  113,  113,  455,  797,  797,  457,  453,
      456,  113,  119,  113,  113,  113,  797,  797,  119,  797,
      797,  797,  113,  454,  113,  113,  113,  461,  797,  797,

      797,  119,  797,  797,  455,  458,  797,  797,  457,  456,
      797,  797,  113,  119,  113,  113,  113,  797,  119,  459,
      113,  797,  113,  113,  113,  797,  797,  461,  797,  119,
      460,  797,  797,  797,  113,  458,  113,  113,  113,  797,
      119,  797,  113,  797,  113,  113,  113,  113,  459,  113,
      113,  113,  462,  797,  797,  797,  463,  797,  797,  460,
      119,  113,  797,  113,  113,  113,  797,  797,  119,  797,
      464,  465,  113,  797,  113,  113,  113,  797,  797,  797,
      797,  462,  119,  466,  467,  797,  463,  797,  797,  113,
      119,  113,  113,  113,  113,  119,  113,  113,  113,  797,

      464,  465,  797,  797,  797,  797,  468,  797,  797,  119,
      797,  797,  466,  113,  467,  113,  113,  113,  797,  470,
      119,  797,  797,  113,  469,  113,  113,  113,  797,  113,
      797,  113,  113,  113,  797,  797,  468,  119,  472,  797,
      797,  113,  119,  113,  113,  113,  471,  797,  113,  470,
      113,  113,  113,  113,  469,  113,  113,  113,  797,  797,
      797,  119,  113,  797,  113,  113,  113,  797,  472,  473,
      113,  119,  113,  113,  113,  474,  471,  119,  113,  797,
      113,  113,  113,  475,  797,  797,  797,  476,  797,  119,
      797,  477,  797,  797,  478,  797,  119,  797,  473,  797,

      113,  119,  113,  113,  113,  474,  797,  797,  797,  797,
      119,  797,  479,  475,  797,  797,  797,  476,  119,  797,
      797,  477,  797,  797,  478,  113,  119,  113,  113,  113,
      797,  113,  480,  113,  113,  113,  113,  797,  113,  113,
      113,  797,  479,  113,  797,  113,  113,  113,  119,  797,
      481,  797,  797,  362,  362,  797,  797,  797,  797,  482,
      797,  797,  480,  224,  113,  224,  113,  113,  113,  797,
      797,  797,  797,  119,  797,  797,  483,  224,  797,  119,
      481,  797,  797,  797,  119,  492,  797,  797,  797,  482,
      797,  119,  797,  224,  113,  224,  113,  113,  113,  113,

      797,  113,  113,  113,  797,  483,  224,  113,  797,  113,
      113,  113,  119,  797,  797,  492,  797,  797,  113,  493,
      113,  113,  113,  797,  113,  797,  113,  113,  113,  113,
      797,  113,  113,  113,  797,  797,  797,  797,  494,  495,
      797,  797,  119,  496,  797,  797,  797,  119,  797,  493,
      497,  797,  797,  797,  113,  119,  113,  113,  113,  113,
      797,  113,  113,  113,  797,  797,  119,  494,  797,  495,
      797,  797,  119,  496,  797,  797,  797,  119,  797,  113,
      497,  113,  113,  113,  797,  113,  498,  113,  113,  113,
      113,  797,  113,  113,  113,  797,  113,  797,  113,  113,

      113,  113,  119,  113,  113,  113,  113,  119,  113,  113,
      113,  797,  797,  499,  797,  113,  498,  113,  113,  113,
      797,  501,  500,  797,  797,  797,  113,  119,  113,  113,
      113,  503,  113,  119,  113,  113,  113,  797,  119,  502,
      797,  797,  797,  499,  119,  797,  797,  797,  797,  119,
      797,  501,  500,  113,  119,  113,  113,  113,  797,  797,
      797,  503,  113,  119,  113,  113,  113,  113,  502,  113,
      113,  113,  797,  113,  119,  113,  113,  113,  797,  113,
      119,  113,  113,  113,  113,  797,  113,  113,  113,  113,
      797,  113,  113,  113,  797,  797,  113,  797,  113,  113,

      113,  119,  797,  797,  797,  113,  504,  113,  113,  113,
      119,  797,  797,  506,  113,  119,  113,  113,  113,  505,
      113,  119,  113,  113,  113,  797,  797,  119,  797,  507,
      797,  797,  119,  797,  508,  504,  113,  119,  113,  113,
      113,  797,  797,  506,  119,  509,  797,  113,  505,  113,
      113,  113,  113,  119,  113,  113,  113,  797,  507,  797,
      797,  797,  119,  508,  797,  797,  797,  113,  119,  113,
      113,  113,  797,  797,  511,  509,  510,  113,  797,  113,
      113,  113,  797,  797,  119,  797,  113,  512,  113,  113,
      113,  797,  797,  797,  113,  119,  113,  113,  113,  113,

      119,  113,  113,  113,  511,  510,  797,  514,  797,  113,
      513,  113,  113,  113,  797,  119,  797,  512,  113,  797,
      113,  113,  113,  797,  797,  119,  516,  113,  797,  113,
      113,  113,  517,  797,  119,  515,  797,  514,  797,  797,
      513,  113,  119,  113,  113,  113,  797,  119,  797,  797,
      518,  113,  797,  113,  113,  113,  516,  119,  797,  797,
      797,  797,  517,  797,  515,  113,  119,  113,  113,  113,
      519,  797,  797,  797,  797,  119,  797,  520,  797,  113,
      518,  113,  113,  113,  113,  797,  113,  113,  113,  119,
      113,  797,  113,  113,  113,  797,  797,  797,  797,  119,

      519,  797,  797,  797,  521,  797,  113,  520,  113,  113,
      113,  797,  113,  119,  113,  113,  113,  113,  797,  113,
      113,  113,  522,  797,  797,  797,  797,  119,  797,  797,
      523,  797,  119,  797,  521,  797,  797,  524,  119,  113,
      797,  113,  113,  113,  113,  797,  113,  113,  113,  525,
      797,  522,  797,  113,  119,  113,  113,  113,  797,  523,
      119,  797,  797,  797,  797,  119,  113,  524,  113,  113,
      113,  797,  113,  526,  113,  113,  113,  797,  113,  525,
      113,  113,  113,  797,  527,  797,  113,  119,  113,  113,
      113,  797,  119,  530,  797,  797,  797,  797,  528,  529,

      531,  119,  797,  526,  113,  797,  113,  113,  113,  797,
      797,  797,  797,  527,  119,  113,  797,  113,  113,  113,
      119,  797,  797,  530,  797,  797,  119,  528,  797,  529,
      531,  797,  797,  797,  119,  113,  532,  113,  113,  113,
      533,  113,  797,  113,  113,  113,  797,  113,  797,  113,
      113,  113,  119,  113,  797,  113,  113,  113,  113,  797,
      113,  113,  113,  119,  797,  113,  532,  113,  113,  113,
      533,  797,  797,  534,  536,  797,  797,  797,  113,  535,
      113,  113,  113,  119,  113,  537,  113,  113,  113,  119,
      797,  797,  797,  538,  797,  119,  113,  797,  113,  113,

      113,  119,  534,  114,  536,  797,  119,  114,  535,  797,
      797,  540,  797,  119,  537,  797,  539,  541,  797,  797,
      797,  113,  538,  113,  113,  113,  119,  113,  797,  113,
      113,  113,  119,  114,  797,  542,  113,  114,  113,  113,
      113,  540,  543,  797,  119,  797,  539,  541,  113,  797,
      113,  113,  113,  797,  113,  797,  113,  113,  113,  113,
      797,  113,  113,  113,  542,  797,  544,  797,  797,  119,
      797,  545,  543,  797,  113,  119,  113,  113,  113,  797,
      797,  797,  797,  546,  119,  113,  797,  113,  113,  113,
      797,  797,  797,  547,  797,  544,  119,  797,  797,  797,

      797,  545,  119,  797,  797,  797,  797,  119,  549,  797,
      797,  797,  797,  546,  797,  113,  548,  113,  113,  113,
      797,  797,  119,  547,  113,  797,  113,  113,  113,  797,
      797,  797,  797,  119,  797,  797,  550,  113,  549,  113,
      113,  113,  797,  797,  797,  548,  113,  797,  113,  113,
      113,  797,  797,  113,  797,  113,  113,  113,  113,  551,
      113,  113,  113,  119,  797,  797,  550,  113,  797,  113,
      113,  113,  119,  797,  797,  797,  552,  113,  553,  113,
      113,  113,  797,  797,  554,  119,  555,  556,  557,  551,
      797,  797,  797,  797,  119,  113,  797,  113,  113,  113,

      797,  119,  558,  797,  797,  552,  119,  113,  553,  113,
      113,  113,  797,  554,  797,  119,  555,  556,  557,  113,
      559,  113,  113,  113,  113,  119,  113,  113,  113,  797,
      797,  113,  558,  113,  113,  113,  560,  797,  113,  797,
      113,  113,  113,  119,  561,  113,  797,  113,  113,  113,
      559,  797,  797,  797,  113,  119,  113,  113,  113,  562,
      797,  797,  797,  797,  563,  797,  560,  119,  797,  797,
      797,  797,  119,  797,  561,  797,  797,  797,  565,  119,
      564,  113,  797,  113,  113,  113,  119,  797,  797,  562,
      797,  797,  566,  119,  563,  113,  797,  113,  113,  113,

      797,  113,  119,  113,  113,  113,  567,  797,  565,  564,
      113,  797,  113,  113,  113,  797,  797,  797,  568,  797,
      113,  566,  113,  113,  113,  797,  570,  797,  797,  119,
      113,  797,  113,  113,  113,  113,  567,  113,  113,  113,
      797,  797,  797,  119,  797,  569,  797,  797,  568,  119,
      113,  797,  113,  113,  113,  797,  570,  797,  119,  797,
      571,  797,  572,  113,  573,  113,  113,  113,  119,  113,
      797,  113,  113,  113,  797,  569,  797,  113,  119,  113,
      113,  113,  797,  119,  113,  797,  113,  113,  113,  571,
      797,  797,  572,  113,  573,  113,  113,  113,  119,  797,

      575,  797,  113,  574,  113,  113,  113,  797,  797,  797,
      113,  119,  113,  113,  113,  797,  576,  119,  113,  797,
      113,  113,  113,  797,  113,  119,  113,  113,  113,  797,
      575,  797,  119,  574,  113,  797,  113,  113,  113,  578,
      113,  119,  113,  113,  113,  577,  576,  797,  797,  113,
      119,  113,  113,  113,  797,  797,  797,  797,  119,  579,
      113,  581,  113,  113,  113,  580,  119,  797,  797,  578,
      797,  797,  119,  113,  577,  113,  113,  113,  797,  797,
      797,  584,  119,  797,  797,  797,  797,  582,  119,  579,
      113,  581,  113,  113,  113,  580,  797,  119,  797,  113,

      583,  113,  113,  113,  797,  797,  797,  797,  119,  797,
      113,  584,  113,  113,  113,  113,  582,  113,  113,  113,
      113,  119,  113,  113,  113,  113,  797,  113,  113,  113,
      583,  797,  491,  491,  797,  585,  797,  797,  119,  797,
      797,  797,  224,  797,  224,  587,  797,  119,  797,  586,
      588,  113,  797,  113,  113,  113,  224,  113,  119,  113,
      113,  113,  797,  119,  797,  585,  797,  113,  119,  113,
      113,  113,  224,  119,  224,  587,  797,  797,  797,  586,
      588,  797,  797,  797,  113,  224,  113,  113,  113,  797,
      590,  589,  113,  797,  113,  113,  113,  797,  113,  119,

      113,  113,  113,  797,  797,  119,  113,  797,  113,  113,
      113,  797,  797,  592,  113,  119,  113,  113,  113,  590,
      797,  589,  113,  591,  113,  113,  113,  113,  797,  113,
      113,  113,  119,  113,  797,  113,  113,  113,  797,  797,
      119,  797,  797,  592,  797,  113,  119,  113,  113,  113,
      797,  797,  591,  113,  119,  113,  113,  113,  797,  797,
      797,  113,  119,  113,  113,  113,  797,  797,  797,  113,
      119,  113,  113,  113,  113,  119,  113,  113,  113,  797,
      113,  119,  113,  113,  113,  797,  113,  797,  113,  113,
      113,  797,  113,  119,  113,  113,  113,  797,  797,  594,

      797,  119,  113,  593,  113,  113,  113,  797,  113,  119,
      113,  113,  113,  797,  797,  797,  797,  119,  797,  797,
      595,  113,  119,  113,  113,  113,  797,  797,  119,  594,
      797,  797,  797,  593,  119,  113,  797,  113,  113,  113,
      119,  113,  597,  113,  113,  113,  596,  797,  797,  595,
      119,  797,  797,  797,  797,  113,  119,  113,  113,  113,
      797,  113,  600,  113,  113,  113,  797,  797,  797,  119,
      797,  797,  597,  598,  113,  596,  113,  113,  113,  797,
      797,  797,  797,  119,  797,  797,  797,  599,  797,  119,
      797,  797,  600,  113,  797,  113,  113,  113,  797,  602,

      797,  601,  598,  119,  113,  797,  113,  113,  113,  119,
      113,  797,  113,  113,  113,  797,  797,  599,  797,  603,
      797,  113,  119,  113,  113,  113,  797,  797,  797,  602,
      601,  113,  797,  113,  113,  113,  113,  797,  113,  113,
      113,  119,  113,  797,  113,  113,  113,  797,  797,  603,
      797,  113,  119,  113,  113,  113,  797,  797,  119,  113,
      797,  113,  113,  113,  113,  797,  113,  113,  113,  119,
      797,  797,  797,  797,  604,  605,  797,  797,  113,  119,
      113,  113,  113,  113,  119,  113,  113,  113,  606,  113,
      119,  113,  113,  113,  113,  797,  113,  113,  113,  119,

      607,  797,  797,  797,  604,  605,  797,  119,  797,  797,
      608,  797,  119,  797,  797,  609,  797,  797,  606,  610,
      113,  797,  113,  113,  113,  113,  119,  113,  113,  113,
      607,  119,  113,  797,  113,  113,  113,  119,  797,  797,
      608,  797,  119,  797,  113,  609,  113,  113,  113,  610,
      797,  797,  113,  611,  113,  113,  113,  797,  797,  797,
      797,  613,  797,  797,  797,  612,  797,  797,  119,  614,
      797,  797,  113,  119,  113,  113,  113,  797,  615,  797,
      119,  797,  113,  611,  113,  113,  113,  797,  797,  797,
      797,  613,  119,  113,  612,  113,  113,  113,  797,  614,

      119,  113,  797,  113,  113,  113,  797,  616,  615,  797,
      113,  797,  113,  113,  113,  113,  797,  113,  113,  113,
      119,  113,  797,  113,  113,  113,  797,  617,  797,  797,
      119,  797,  797,  797,  797,  619,  113,  616,  113,  113,
      113,  119,  113,  618,  113,  113,  113,  797,  113,  119,
      113,  113,  113,  797,  620,  797,  797,  617,  119,  797,
      797,  797,  797,  119,  622,  619,  797,  797,  797,  119,
      623,  113,  618,  113,  113,  113,  624,  113,  621,  113,
      113,  113,  797,  620,  119,  113,  797,  113,  113,  113,
      119,  797,  797,  622,  797,  113,  119,  113,  113,  113,

      623,  113,  625,  113,  113,  113,  624,  797,  621,  797,
      113,  626,  113,  113,  113,  797,  797,  797,  797,  119,
      630,  797,  797,  797,  797,  119,  629,  113,  797,  113,
      113,  113,  625,  119,  113,  627,  113,  113,  113,  797,
      626,  797,  797,  119,  628,  797,  797,  797,  632,  119,
      630,  113,  797,  113,  113,  113,  629,  113,  119,  113,
      113,  113,  797,  631,  627,  113,  797,  113,  113,  113,
      797,  797,  633,  797,  628,  119,  797,  113,  632,  113,
      113,  113,  119,  113,  797,  113,  113,  113,  797,  797,
      797,  797,  113,  631,  113,  113,  113,  634,  797,  119,

      636,  797,  633,  635,  797,  119,  637,  113,  797,  113,
      113,  113,  113,  119,  113,  113,  113,  638,  113,  797,
      113,  113,  113,  797,  797,  119,  634,  797,  797,  797,
      636,  119,  635,  797,  797,  113,  637,  113,  113,  113,
      119,  639,  113,  640,  113,  113,  113,  638,  113,  797,
      113,  113,  113,  797,  113,  119,  113,  113,  113,  797,
      119,  113,  797,  113,  113,  113,  119,  641,  797,  642,
      797,  639,  797,  640,  113,  797,  113,  113,  113,  797,
      797,  797,  113,  119,  113,  113,  113,  797,  797,  113,
      119,  113,  113,  113,  643,  797,  119,  641,  645,  642,

      797,  797,  119,  113,  644,  113,  113,  113,  797,  119,
      797,  797,  797,  113,  646,  113,  113,  113,  797,  797,
      797,  797,  119,  643,  797,  797,  647,  797,  645,  797,
      119,  797,  113,  644,  113,  113,  113,  119,  797,  113,
      648,  113,  113,  113,  646,  113,  797,  113,  113,  113,
      113,  119,  113,  113,  113,  113,  647,  113,  113,  113,
      797,  119,  797,  797,  113,  797,  113,  113,  113,  797,
      648,  797,  649,  797,  650,  113,  797,  113,  113,  113,
      119,  652,  113,  797,  113,  113,  113,  119,  797,  651,
      797,  653,  113,  119,  113,  113,  113,  797,  119,  797,

      797,  649,  797,  119,  650,  113,  797,  113,  113,  113,
      797,  652,  119,  113,  797,  113,  113,  113,  651,  797,
      797,  653,  654,  119,  797,  113,  797,  113,  113,  113,
      119,  797,  113,  797,  113,  113,  113,  797,  797,  655,
      119,  113,  797,  113,  113,  113,  113,  797,  113,  113,
      113,  654,  797,  119,  656,  797,  113,  797,  113,  113,
      113,  119,  113,  797,  113,  113,  113,  797,  797,  655,
      659,  797,  797,  119,  657,  113,  658,  113,  113,  113,
      119,  797,  797,  113,  656,  113,  113,  113,  113,  119,
      113,  113,  113,  797,  119,  660,  797,  661,  797,  797,

      659,  797,  797,  657,  119,  797,  658,  797,  797,  662,
      119,  113,  797,  113,  113,  113,  113,  797,  113,  113,
      113,  797,  797,  119,  660,  797,  797,  661,  797,  663,
      113,  119,  113,  113,  113,  797,  119,  797,  113,  662,
      113,  113,  113,  113,  797,  113,  113,  113,  113,  797,
      113,  113,  113,  797,  797,  797,  664,  797,  663,  119,
      797,  797,  665,  666,  119,  797,  113,  797,  113,  113,
      113,  797,  113,  797,  113,  113,  113,  113,  119,  113,
      113,  113,  797,  667,  797,  664,  119,  797,  668,  669,
      797,  119,  665,  666,  797,  113,  119,  113,  113,  113,

      113,  797,  113,  113,  113,  797,  113,  797,  113,  113,
      113,  797,  667,  797,  119,  797,  797,  668,  797,  669,
      119,  797,  797,  797,  113,  119,  113,  113,  113,  113,
      797,  113,  113,  113,  113,  797,  113,  113,  113,  797,
      670,  671,  113,  119,  113,  113,  113,  797,  119,  672,
      797,  797,  797,  113,  119,  113,  113,  113,  113,  797,
      113,  113,  113,  673,  113,  797,  113,  113,  113,  670,
      797,  671,  119,  797,  797,  797,  797,  119,  675,  672,
      797,  674,  119,  113,  797,  113,  113,  113,  797,  797,
      119,  797,  113,  673,  113,  113,  113,  676,  797,  797,

      797,  119,  797,  797,  677,  797,  119,  797,  675,  797,
      674,  797,  119,  679,  113,  797,  113,  113,  113,  797,
      113,  678,  113,  113,  113,  113,  676,  113,  113,  113,
      797,  119,  113,  677,  113,  113,  113,  797,  797,  797,
      119,  797,  113,  679,  113,  113,  113,  797,  680,  113,
      678,  113,  113,  113,  797,  797,  113,  681,  113,  113,
      113,  113,  119,  113,  113,  113,  797,  797,  119,  797,
      683,  797,  113,  119,  113,  113,  113,  797,  680,  797,
      119,  682,  797,  797,  797,  684,  797,  681,  685,  113,
      119,  113,  113,  113,  797,  797,  797,  119,  797,  797,

      683,  797,  797,  113,  119,  113,  113,  113,  797,  119,
      682,  797,  797,  797,  686,  684,  797,  797,  685,  113,
      119,  113,  113,  113,  113,  797,  113,  113,  113,  113,
      797,  113,  113,  113,  797,  797,  797,  119,  797,  797,
      797,  687,  797,  797,  686,  689,  797,  797,  797,  797,
      797,  119,  797,  113,  688,  113,  113,  113,  113,  797,
      113,  113,  113,  797,  797,  797,  797,  119,  797,  797,
      687,  797,  119,  797,  690,  689,  113,  119,  113,  113,
      113,  797,  691,  113,  688,  113,  113,  113,  797,  797,
      797,  113,  797,  113,  113,  113,  113,  797,  113,  113,

      113,  119,  797,  797,  690,  797,  119,  113,  797,  113,
      113,  113,  691,  797,  692,  693,  694,  797,  113,  797,
      113,  113,  113,  797,  119,  113,  797,  113,  113,  113,
      113,  119,  113,  113,  113,  797,  695,  797,  113,  119,
      113,  113,  113,  692,  119,  693,  694,  696,  797,  113,
      797,  113,  113,  113,  113,  119,  113,  113,  113,  797,
      797,  797,  698,  797,  797,  695,  119,  697,  113,  797,
      113,  113,  113,  119,  797,  797,  696,  699,  119,  113,
      797,  113,  113,  113,  797,  113,  119,  113,  113,  113,
      797,  113,  698,  113,  113,  113,  697,  119,  797,  797,

      797,  113,  119,  113,  113,  113,  113,  699,  113,  113,
      113,  113,  797,  113,  113,  113,  119,  113,  700,  113,
      113,  113,  797,  797,  797,  797,  113,  119,  113,  113,
      113,  797,  113,  119,  113,  113,  113,  797,  797,  119,
      702,  797,  113,  797,  113,  113,  113,  700,  797,  119,
      797,  797,  701,  113,  119,  113,  113,  113,  113,  119,
      113,  113,  113,  797,  797,  119,  703,  704,  797,  113,
      702,  113,  113,  113,  119,  113,  797,  113,  113,  113,
      119,  701,  797,  797,  113,  797,  113,  113,  113,  113,
      119,  113,  113,  113,  797,  703,  797,  704,  705,  797,

      707,  119,  797,  706,  797,  113,  119,  113,  113,  113,
      113,  797,  113,  113,  113,  797,  797,  119,  708,  797,
      797,  709,  797,  119,  797,  797,  797,  705,  797,  797,
      707,  797,  119,  706,  797,  797,  797,  119,  797,  113,
      710,  113,  113,  113,  797,  797,  797,  797,  708,  797,
      797,  709,  113,  119,  113,  113,  113,  113,  119,  113,
      113,  113,  113,  797,  113,  113,  113,  797,  797,  113,
      710,  113,  113,  113,  797,  797,  113,  711,  113,  113,
      113,  113,  797,  113,  113,  113,  797,  119,  797,  797,
      113,  797,  113,  113,  113,  113,  797,  113,  113,  113,

      119,  797,  797,  797,  797,  119,  712,  711,  797,  797,
      119,  713,  113,  797,  113,  113,  113,  119,  113,  797,
      113,  113,  113,  113,  119,  113,  113,  113,  797,  119,
      113,  797,  113,  113,  113,  797,  712,  797,  119,  797,
      797,  713,  797,  119,  715,  113,  714,  113,  113,  113,
      113,  797,  113,  113,  113,  113,  797,  113,  113,  113,
      119,  797,  797,  797,  797,  113,  119,  113,  113,  113,
      797,  119,  797,  797,  715,  797,  714,  797,  119,  716,
      797,  113,  797,  113,  113,  113,  797,  113,  797,  113,
      113,  113,  797,  119,  717,  797,  797,  113,  119,  113,

      113,  113,  797,  119,  718,  797,  797,  797,  797,  716,
      797,  797,  719,  119,  113,  797,  113,  113,  113,  797,
      797,  797,  797,  717,  113,  797,  113,  113,  113,  119,
      797,  797,  797,  797,  718,  119,  113,  797,  113,  113,
      113,  797,  719,  797,  797,  119,  113,  721,  113,  113,
      113,  113,  720,  113,  113,  113,  797,  113,  797,  113,
      113,  113,  119,  113,  797,  113,  113,  113,  797,  797,
      722,  113,  119,  113,  113,  113,  797,  721,  797,  797,
      797,  720,  797,  113,  119,  113,  113,  113,  797,  723,
      797,  797,  797,  797,  119,  724,  797,  797,  728,  119,

      722,  725,  729,  726,  797,  119,  114,  727,  797,  797,
      797,  119,  114,  113,  797,  113,  113,  113,  723,  119,
      797,  797,  797,  113,  724,  113,  113,  113,  728,  797,
      725,  119,  729,  726,  797,  797,  114,  727,  797,  797,
      797,  113,  114,  113,  113,  113,  113,  797,  113,  113,
      113,  730,  113,  797,  113,  113,  113,  797,  797,  797,
      113,  119,  113,  113,  113,  113,  797,  113,  113,  113,
      113,  119,  113,  113,  113,  797,  797,  732,  797,  113,
      730,  113,  113,  113,  113,  733,  113,  113,  113,  119,
      797,  731,  797,  113,  119,  113,  113,  113,  797,  113,

      119,  113,  113,  113,  797,  735,  797,  732,  119,  797,
      734,  797,  797,  119,  797,  733,  797,  736,  119,  113,
      731,  113,  113,  113,  737,  797,  113,  119,  113,  113,
      113,  797,  119,  797,  113,  735,  113,  113,  113,  734,
      113,  119,  113,  113,  113,  797,  736,  119,  797,  113,
      797,  113,  113,  113,  737,  797,  113,  738,  113,  113,
      113,  739,  797,  797,  797,  797,  113,  119,  113,  113,
      113,  797,  741,  113,  119,  113,  113,  113,  797,  797,
      797,  742,  119,  740,  797,  797,  738,  797,  119,  797,
      797,  739,  743,  797,  797,  797,  113,  119,  113,  113,

      113,  797,  741,  113,  119,  113,  113,  113,  797,  797,
      797,  742,  797,  740,  119,  113,  797,  113,  113,  113,
      797,  119,  743,  797,  113,  797,  113,  113,  113,  113,
      797,  113,  113,  113,  113,  797,  113,  113,  113,  797,
      797,  797,  744,  797,  119,  113,  797,  113,  113,  113,
      797,  119,  797,  797,  797,  797,  113,  745,  113,  113,
      113,  797,  797,  119,  113,  797,  113,  113,  113,  746,
      747,  744,  119,  797,  797,  797,  113,  119,  113,  113,
      113,  113,  119,  113,  113,  113,  113,  745,  113,  113,
      113,  797,  797,  119,  748,  797,  797,  797,  746,  797,

      747,  797,  749,  751,  119,  113,  750,  113,  113,  113,
      797,  797,  119,  797,  113,  752,  113,  113,  113,  797,
      797,  797,  797,  748,  119,  797,  797,  797,  797,  119,
      797,  749,  797,  751,  119,  113,  750,  113,  113,  113,
      797,  797,  797,  753,  797,  752,  113,  797,  113,  113,
      113,  797,  113,  119,  113,  113,  113,  113,  797,  113,
      113,  113,  119,  797,  797,  113,  797,  113,  113,  113,
      797,  797,  797,  753,  755,  113,  797,  113,  113,  113,
      797,  797,  797,  119,  797,  754,  757,  113,  797,  113,
      113,  113,  797,  797,  119,  113,  756,  113,  113,  113,

      119,  797,  797,  797,  755,  119,  113,  797,  113,  113,
      113,  758,  797,  119,  754,  113,  757,  113,  113,  113,
      797,  797,  797,  119,  797,  756,  797,  797,  113,  759,
      113,  113,  113,  797,  113,  119,  113,  113,  113,  797,
      797,  758,  113,  119,  113,  113,  113,  797,  113,  760,
      113,  113,  113,  761,  119,  797,  797,  797,  113,  759,
      113,  113,  113,  119,  113,  797,  113,  113,  113,  113,
      797,  113,  113,  113,  797,  797,  119,  797,  797,  760,
      797,  797,  119,  761,  113,  797,  113,  113,  113,  113,
      119,  113,  113,  113,  797,  797,  119,  113,  762,  113,

      113,  113,  797,  797,  797,  797,  119,  764,  797,  763,
      797,  113,  119,  113,  113,  113,  113,  119,  113,  113,
      113,  113,  766,  113,  113,  113,  797,  762,  797,  765,
      797,  797,  119,  797,  797,  797,  764,  119,  763,  113,
      797,  113,  113,  113,  113,  119,  113,  113,  113,  797,
      767,  113,  766,  113,  113,  113,  797,  797,  765,  119,
      797,  797,  797,  113,  119,  113,  113,  113,  768,  119,
      797,  797,  113,  769,  113,  113,  113,  797,  113,  767,
      113,  113,  113,  797,  797,  797,  113,  119,  113,  113,
      113,  113,  119,  113,  113,  113,  797,  797,  768,  119,

      797,  797,  771,  769,  113,  797,  113,  113,  113,  797,
      797,  119,  770,  113,  797,  113,  113,  113,  772,  113,
      119,  113,  113,  113,  797,  797,  119,  113,  797,  113,
      113,  113,  771,  797,  119,  797,  797,  797,  797,  119,
      797,  770,  113,  797,  113,  113,  113,  797,  772,  773,
      797,  775,  119,  113,  797,  113,  113,  113,  797,  774,
      113,  119,  113,  113,  113,  797,  113,  119,  113,  113,
      113,  797,  797,  797,  797,  119,  797,  797,  773,  797,
      113,  775,  113,  113,  113,  797,  797,  797,  774,  797,
      119,  113,  776,  113,  113,  113,  113,  797,  113,  113,

      113,  119,  113,  797,  113,  113,  113,  113,  119,  113,
      113,  113,  797,  797,  119,  113,  797,  113,  113,  113,
      797,  776,  113,  797,  113,  113,  113,  797,  119,  797,
      777,  779,  797,  797,  797,  797,  780,  797,  797,  119,
      797,  797,  778,  781,  119,  797,  797,  797,  797,  113,
      119,  113,  113,  113,  113,  119,  113,  113,  113,  777,
      797,  779,  797,  119,  797,  113,  780,  113,  113,  113,
      119,  778,  797,  781,  782,  113,  797,  113,  113,  113,
      113,  797,  113,  113,  113,  113,  797,  113,  113,  113,
      113,  797,  113,  113,  113,  797,  113,  119,  113,  113,

      113,  797,  119,  797,  782,  797,  113,  783,  113,  113,
      113,  797,  113,  119,  113,  113,  113,  797,  786,  797,
      797,  784,  113,  119,  113,  113,  113,  797,  119,  797,
      797,  785,  797,  119,  787,  797,  797,  783,  119,  797,
      797,  797,  797,  113,  119,  113,  113,  113,  786,  797,
      797,  784,  797,  113,  119,  113,  113,  113,  797,  797,
      119,  785,  797,  113,  787,  113,  113,  113,  788,  797,
      119,  797,  797,  113,  789,  113,  113,  113,  113,  797,
      113,  113,  113,  797,  113,  797,  113,  113,  113,  797,
      113,  119,  113,  113,  113,  797,  797,  797,  788,  797,

      797,  119,  797,  797,  789,  790,  797,  797,  797,  797,
      791,  119,  113,  793,  113,  113,  113,  797,  797,  797,
      797,  119,  792,  797,  797,  113,  119,  113,  113,  113,
      797,  797,  119,  797,  797,  790,  797,  794,  119,  797,
      791,  797,  113,  793,  113,  113,  113,  797,  797,  797,
      795,  792,  113,  797,  113,  113,  113,  797,  797,  797,
      119,  113,  797,  113,  113,  113,  113,  794,  113,  113,
      113,  797,  113,  119,  113,  113,  113,  796,  797,  797,
      795,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      119,  797,  797,  797,  797,  797,  797,  797,  797,  797,

      119,  797,  797,  797,  797,  797,  797,  796,  797,  119,
      797,  797,  797,  797,  119,  797,  797,  797,  797,  797,
      119,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   14,   14,
       14,   14,   14,   14,   14,   14,   14,  114,  797,  114,
      114,  114,  114,  197,  197,  201,  201,  797,  201,  797,
      201,  201,  201,  201,  209,  209,  797,  209,  209,  209,
      209,  209,  209,  210,  797,  797,  210,  210,  797,  797,
      210,  210,  222,  222,   13,  797,  797,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797
    } ;

static const flex_int16_t yy_chk[7076] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    3,    4,    7,    7,  352,   15,    7,   25,
      216,   25,   25,   20,   74,   25,   74,    7,  211,    7,

        7,    7,    7,   20,   28,   28,  113,    7,    8,    8,
       20,   27,    8,   27,   27,   34,   34,   27,   32,   32,
       32,    8,    7,    8,    8,    8,    8,   77,    3,    4,
      112,    8,    9,   20,   61,   61,    9,    7,   10,   15,
       20,   78,   10,   75,   75,    9,    8,    9,    9,    9,
       87,   10,    7,   10,   10,   10,   11,   77,   82,   82,
       45,    8,   45,   45,   45,   11,   66,   11,   11,   11,
       11,   78,   12,   85,   85,   11,    8,   84,  108,   84,
       87,   12,  101,   12,   12,   12,   12,   88,   66,   94,
       11,   12,  212,   37,  212,   37,   37,   37,   96,   96,

      102,  102,  198,  198,   91,   11,   12,   57,   45,   57,
       57,   57,   43,   90,   43,   43,   43,   88,   66,   89,
       11,   12,   55,   79,   55,   55,   55,   71,   37,  103,
       60,  103,   59,   43,  103,  103,   12,   30,   37,   30,
       30,   37,   57,   55,  114,   41,  114,  114,  114,   41,
       30,  213,  213,   41,   30,   57,   58,   30,   37,   41,
       43,   29,   41,   43,   30,   41,   30,   37,  217,  217,
       55,   24,   57,   55,   42,   41,  218,  218,   42,   41,
       30,   16,   42,   41,   30,   42,   13,   30,   42,   41,
        6,   41,  114,   30,   41,   30,   36,    5,   36,   36,

       36,    0,   46,   47,   42,    0,   46,   47,   42,    0,
       46,   47,   42,  221,  221,   42,   46,   47,   42,    0,
       36,    0,  118,   47,  118,  118,  118,   47,   36,    0,
       36,    0,   46,   47,    0,   36,   46,   47,  228,  228,
       46,   47,  361,  361,   36,  107,   46,   47,  107,    0,
       36,    0,   47,  490,  490,  107,   47,  225,   36,  225,
       36,    0,  225,  225,   36,   38,    0,   38,   38,   38,
      118,    0,    0,    0,  363,  107,  363,   48,  107,  363,
      363,   48,   50,    0,  107,   48,   38,   38,   38,   38,
       50,   48,    0,   38,   38,    0,   50,   38,    0,   50,

       38,    0,   50,    0,   38,   38,   38,   48,    0,    0,
        0,   48,   50,   38,    0,   48,   38,   38,   38,   38,
       50,   48,    0,   38,   38,    0,   50,   38,   50,    0,
       38,   50,    0,   38,   38,   38,   39,    0,   39,   39,
       39,  126,   51,  126,  126,  126,   51,    0,    0,   54,
       51,   54,   54,   54,    0,    0,   51,   39,    0,    0,
        0,   39,  126,    0,    0,   39,  115,    0,  115,  115,
      115,   39,   51,    0,    0,    0,   51,    0,   54,    0,
       51,   54,    0,    0,   39,    0,   51,   39,   54,  126,
      115,   39,  126,    0,    0,   39,    0,   54,    0,    0,

        0,   39,   40,    0,   40,   40,   40,    0,   54,   53,
        0,   54,   53,    0,  115,    0,    0,   54,    0,   53,
      115,    0,   53,   40,    0,   53,    0,    0,    0,   53,
        0,  123,    0,    0,   40,    0,   40,    0,  123,   53,
       40,  123,   53,    0,   40,    0,   40,    0,  123,   53,
       40,   53,   56,   40,   53,   56,   56,    0,   53,    0,
        0,  123,   56,    0,   40,   56,   40,    0,  123,   40,
      123,    0,   56,   40,    0,   40,   44,  123,   44,   44,
       44,   67,   56,    0,    0,   56,   56,  116,    0,  116,
      116,  116,   56,   67,   56,    0,    0,   67,    0,   67,

        0,   56,   44,    0,    0,    0,   67,    0,    0,   44,
       44,   67,    0,    0,    0,   44,  116,    0,  117,    0,
      117,  117,  117,   67,   44,    0,   67,    0,   67,    0,
        0,    0,   44,  125,  125,  116,    0,  125,    0,   44,
       44,  125,  117,    0,   44,   49,  116,  125,  124,   49,
      124,  124,  124,    0,    0,    0,   49,   49,    0,   49,
        0,   49,   49,  125,  125,   49,  117,  125,    0,    0,
        0,  125,  117,    0,    0,   49,  124,  125,    0,   49,
        0,  120,    0,  120,  120,  120,   49,   49,    0,   49,
       49,   49,    0,    0,   49,   52,  124,    0,   52,  100,

      100,   52,   52,    0,    0,    0,  124,    0,   52,  100,
      100,  100,    0,   52,   52,    0,  120,  121,   52,  121,
      121,  121,    0,  100,    0,   52,    0,    0,   52,  120,
        0,   52,   52,    0,    0,    0,    0,    0,   52,  100,
      100,  100,   52,   52,    0,    0,  120,   52,    0,    0,
        0,    0,  100,    0,    0,  121,    0,  121,  122,  121,
      122,  122,  122,    0,    0,  121,  127,    0,  127,  127,
      127,  128,    0,  128,  128,  128,    0,  129,    0,  129,
      129,  129,    0,    0,  121,    0,  121,    0,  121,    0,
      122,  131,  128,  131,  131,  131,    0,  122,  122,  129,

      127,    0,    0,    0,    0,  128,  122,    0,    0,    0,
        0,  129,    0,  136,  127,  136,  136,  136,    0,  128,
      122,    0,  128,    0,    0,  129,  122,  122,    0,  129,
      127,    0,    0,    0,    0,  128,  131,    0,    0,  131,
        0,  129,  130,    0,  130,  130,  130,    0,  132,    0,
      132,  132,  132,  133,  136,  133,  133,  133,    0,    0,
        0,  136,    0,    0,  130,  131,    0,    0,    0,    0,
      130,  135,    0,  135,  135,  135,  130,  132,    0,    0,
      132,    0,  130,  136,    0,    0,    0,  132,    0,    0,
      130,    0,    0,  133,  130,  134,  132,  134,  134,  134,

      130,  133,    0,    0,  135,    0,  130,  132,    0,  135,
      132,  130,    0,    0,    0,    0,  132,    0,  134,  135,
        0,  134,  133,    0,    0,    0,  137,  134,  137,  137,
      137,    0,    0,  138,  135,  138,  138,  138,  135,    0,
        0,    0,  139,  134,  139,  139,  139,    0,  134,  137,
      141,  134,  141,  141,  141,    0,  140,  134,  140,  140,
      140,    0,    0,    0,    0,  143,  139,  143,  143,  143,
        0,    0,  138,    0,  137,  141,    0,  140,    0,  137,
        0,  138,  142,  139,  142,  142,  142,    0,    0,  356,
      139,    0,  356,    0,  140,    0,  139,  143,  141,  356,

        0,  138,    0,    0,  140,  141,  144,  140,  144,  144,
      144,  142,  139,  143,  145,    0,  145,  145,  145,  356,
        0,    0,  356,  140,    0,    0,    0,  143,  356,  146,
      142,  146,  146,  146,  147,    0,  147,  147,  147,    0,
      144,  142,    0,  148,    0,  148,  148,  148,    0,    0,
        0,    0,  145,    0,  144,    0,    0,  149,  146,  149,
      149,  149,  145,  150,    0,  150,  150,  150,  147,  186,
      144,    0,  151,    0,  151,  151,  151,  146,    0,  186,
        0,  145,  147,  148,    0,  186,    0,    0,  146,  186,
        0,  148,  149,  152,    0,  152,  152,  152,  147,  186,

        0,    0,  150,  150,    0,  149,  151,    0,    0,  186,
        0,  150,  148,  153,  186,  153,  153,  153,  186,    0,
      151,  154,  149,    0,    0,    0,  155,  154,  155,  155,
      155,  150,  150,  154,    0,    0,  151,    0,    0,  154,
      156,  152,  156,  156,  156,    0,    0,    0,    0,  153,
      157,  154,  157,  157,  157,    0,    0,  154,    0,    0,
      155,  153,  158,  154,  158,  158,  158,  159,  154,  159,
      159,  159,  157,  161,  155,  161,  161,  161,    0,  153,
      156,  157,  160,    0,  160,  160,  160,    0,  156,    0,
      155,  162,    0,  162,  162,  162,  158,  158,  157,    0,

        0,    0,  157,    0,  184,    0,  160,  184,  184,  156,
      158,  157,  161,  162,  162,  159,  163,  184,  163,  163,
      163,  161,    0,    0,    0,    0,  158,  158,    0,  164,
      160,  164,  164,  164,  184,    0,  160,  184,  184,  162,
        0,  161,    0,  162,  162,    0,  184,    0,  165,  163,
      165,  165,  165,    0,  163,  166,    0,  166,  166,  166,
        0,    0,    0,  167,  163,  167,  167,  167,    0,    0,
        0,    0,  164,  164,    0,    0,    0,  164,  168,  163,
      168,  168,  168,  163,    0,  166,    0,  169,  165,  169,
      169,  169,    0,    0,    0,  170,  165,  170,  170,  170,

        0,  164,  164,  166,  171,    0,  171,  171,  171,    0,
      173,  167,  169,    0,  173,  166,    0,  165,  173,  172,
      170,  172,  172,  172,  173,    0,  168,  169,  177,  171,
      177,  177,  177,    0,  175,  169,  175,  175,  175,    0,
      173,  179,  169,  170,  173,  179,    0,    0,  173,  179,
      170,    0,  171,    0,  173,  179,  169,  172,  174,  171,
      174,  174,  174,  175,    0,    0,    0,  172,    0,    0,
        0,  179,    0,  177,    0,  179,  177,    0,    0,  179,
      174,    0,  175,    0,    0,  179,  172,  178,    0,  178,
      178,  178,  185,  175,  185,  185,  185,  180,    0,  180,

      180,  180,  177,    0,  181,    0,  174,    0,  181,    0,
      174,  176,  181,    0,  176,    0,  176,    0,  181,  178,
        0,  181,    0,  176,  176,    0,    0,  178,    0,  176,
      176,  180,    0,    0,  181,  178,    0,    0,  181,    0,
      185,  176,  181,    0,  176,  180,  176,    0,  181,  178,
      181,    0,    0,  176,  176,    0,  178,    0,  176,  176,
      182,  180,  182,  182,  182,  183,    0,  183,  183,  183,
      187,    0,  187,  187,  187,  188,    0,  188,  188,  188,
        0,    0,  182,    0,  189,    0,  189,  189,  189,    0,
        0,  190,    0,    0,  190,  190,    0,    0,    0,  183,

        0,    0,    0,    0,  190,    0,  187,    0,  182,  188,
        0,    0,  182,  183,    0,    0,    0,    0,  187,  189,
        0,  190,    0,  188,  190,  190,    0,    0,    0,  183,
        0,  193,  189,  190,  193,  193,  187,    0,  191,  188,
      191,  191,  191,  192,  193,  192,  192,  192,  194,  189,
      194,  194,  194,  195,    0,  195,  195,  195,    0,    0,
        0,  193,    0,    0,  193,  193,  196,    0,  196,  196,
      196,    0,  194,  193,    0,    0,  191,  192,    0,    0,
        0,  197,  195,  197,  197,  197,  191,    0,  194,    0,
      236,  192,  236,  236,  236,  223,  194,    0,    0,    0,

        0,  195,  194,    0,  196,  191,  222,  192,    0,  222,
      223,  236,  195,  223,  196,    0,  222,  194,  222,    0,
      223,    0,  223,    0,  235,    0,    0,  235,  235,  197,
        0,    0,    0,  196,    0,    0,  222,  235,  236,  222,
      223,  236,    0,  223,    0,  222,    0,  222,    0,  223,
        0,  223,  227,  227,  235,  229,  229,  235,  235,    0,
        0,    0,  227,  227,  227,  229,  235,  229,  237,    0,
      237,  237,  237,    0,    0,    0,  227,    0,  238,  229,
      238,  238,  238,    0,  239,    0,  239,  239,  239,  237,
        0,    0,  227,  227,  227,  229,  240,  229,  240,  240,

      240,    0,    0,    0,    0,  227,    0,    0,  229,  239,
      238,  242,    0,  242,  242,  242,  237,    0,    0,  237,
      241,  240,  241,  241,  241,    0,  238,  243,    0,  243,
      243,  243,  239,  244,    0,  244,  244,  244,    0,  239,
      238,  241,    0,  242,  240,  245,    0,  245,  245,  245,
        0,  240,  243,    0,    0,    0,  244,    0,  246,  242,
      246,  246,  246,  247,    0,  247,  247,  247,  241,    0,
        0,  241,    0,  242,  251,  243,  251,  251,  251,    0,
      245,  244,  243,    0,  247,  248,  244,  248,  248,  248,
        0,    0,  252,  245,  252,  252,  252,  249,  246,  249,

      249,  249,    0,    0,    0,  250,  246,  250,  250,  250,
      245,  247,  251,    0,  247,    0,  253,    0,  253,  253,
      253,    0,  251,    0,    0,  248,    0,  246,  250,  249,
        0,    0,  252,  248,    0,  254,    0,  254,  254,  254,
      252,  251,    0,    0,    0,  249,  255,    0,  255,  255,
      255,    0,    0,  250,  248,  253,    0,    0,  250,  249,
        0,  252,  254,  256,  253,  256,  256,  256,  257,    0,
      257,  257,  257,    0,    0,  258,  255,  258,  258,  258,
        0,    0,    0,  254,  253,    0,    0,  259,    0,  259,
      259,  259,  254,    0,  255,  260,    0,  260,  260,  260,

        0,    0,  256,  256,    0,  261,  255,  261,  261,  261,
      258,  256,    0,  257,  259,  262,  257,  262,  262,  262,
        0,    0,  263,  258,  263,  263,  263,    0,    0,    0,
        0,  256,  256,  260,  265,  259,  265,  265,  265,    0,
      258,  261,  257,  260,  259,    0,    0,    0,  264,  262,
      264,  264,  264,  261,    0,    0,  263,    0,    0,  265,
        0,    0,  260,  262,    0,  266,    0,  266,  266,  266,
      263,  261,    0,    0,    0,    0,  264,    0,    0,  262,
        0,  267,  265,  267,  267,  267,  263,    0,  269,  265,
      269,  269,  269,    0,  266,    0,  264,  266,    0,    0,

        0,  268,  267,  268,  268,  268,  264,  281,    0,  281,
      281,  281,  270,  266,  270,  270,  270,  271,    0,  271,
      271,  271,    0,    0,  266,    0,  268,  266,  281,  267,
        0,  272,  267,  272,  272,  272,  269,  270,  273,  271,
      273,  273,  273,  274,    0,  274,  274,  274,  275,  268,
      275,  275,  275,    0,    0,  281,  268,    0,  281,  272,
      270,    0,    0,  273,    0,  271,    0,  270,    0,  271,
        0,  276,  274,  276,  276,  276,    0,    0,    0,  272,
      277,  275,  277,  277,  277,    0,  273,    0,    0,  272,
        0,  274,    0,  273,    0,  278,  275,  278,  278,  278,

        0,  279,  274,  279,  279,  279,    0,    0,    0,    0,
      276,  275,    0,    0,  280,  277,  280,  280,  280,  276,
      282,    0,  282,  282,  282,    0,    0,    0,  277,  278,
      283,    0,  283,  283,  283,    0,    0,    0,    0,  276,
        0,  279,    0,  278,  284,  277,  284,  284,  284,  279,
        0,    0,    0,  280,  285,  283,  285,  285,  285,  278,
        0,  286,  280,  286,  286,  286,    0,  284,  282,  287,
      279,  287,  287,  287,    0,    0,    0,  288,  283,  288,
      288,  288,  280,  286,  289,  283,  289,  289,  289,    0,
        0,    0,  284,    0,  285,    0,    0,  284,  285,    0,

        0,  290,  285,  290,  290,  290,    0,    0,  289,  286,
      287,    0,  288,  286,    0,    0,  291,  287,  291,  291,
      291,    0,    0,  285,    0,  288,  292,  285,  292,  292,
      292,    0,  289,  290,    0,    0,  290,    0,  289,  287,
        0,  291,  288,  293,    0,  293,  293,  293,    0,  290,
      294,  292,  294,  294,  294,  295,    0,  295,  295,  295,
        0,    0,    0,  290,  291,  296,  290,  296,  296,  296,
        0,  291,    0,  297,  292,  297,  297,  297,  293,    0,
      298,  292,  298,  298,  298,  299,    0,  299,  299,  299,
      296,  293,  300,    0,  300,  300,  300,    0,  294,    0,

      297,    0,  301,  295,  301,  301,  301,    0,  293,    0,
        0,    0,    0,  296,    0,  302,  298,  302,  302,  302,
      296,  297,    0,  301,    0,    0,  299,    0,  298,    0,
      297,    0,  300,  299,  303,    0,  303,  303,  303,  305,
      300,  305,  305,  305,    0,    0,  298,  302,    0,    0,
      301,    0,    0,  301,  304,  299,  304,  304,  304,  303,
        0,  300,    0,  302,  306,    0,  306,  306,  306,    0,
      308,    0,  308,  308,  308,  307,    0,  302,  307,  307,
      360,    0,  303,  360,    0,  307,    0,  305,  307,  303,
      360,    0,  304,    0,  309,  308,  309,  309,  309,    0,

        0,    0,  304,    0,  306,  307,    0,    0,  307,  307,
      360,    0,  306,  360,    0,  307,    0,  307,  308,  360,
      310,  304,  310,  310,  310,  308,  311,    0,  311,  311,
      311,    0,  309,  306,  312,    0,  312,  312,  312,    0,
        0,  313,  309,  313,  313,  313,    0,    0,  314,  310,
      314,  314,  314,    0,    0,    0,    0,    0,  311,    0,
        0,  309,  313,  315,    0,  315,  315,  315,  310,    0,
        0,    0,  312,  316,  311,  316,  316,  316,    0,  310,
        0,  313,  312,  317,    0,  317,  317,  317,  311,  313,
      314,  318,  313,  318,  318,  318,  314,    0,    0,  315,

        0,  312,    0,  315,  319,  316,  319,  319,  319,    0,
      313,  315,    0,    0,  320,  318,  320,  320,  320,  314,
        0,  316,  317,  321,    0,  321,  321,  321,    0,  315,
        0,  317,  315,  319,  322,  316,  322,  322,  322,  318,
      323,    0,  323,  323,  323,  318,    0,    0,    0,  320,
        0,  317,  319,  324,    0,  324,  324,  324,    0,    0,
        0,    0,  320,  319,  321,  325,    0,  325,  325,  325,
      328,  321,  328,  328,  328,  322,    0,    0,  324,  320,
      323,  326,  322,  326,  326,  326,    0,    0,  323,    0,
        0,    0,  327,  321,  327,  327,  327,  328,    0,    0,

        0,  324,    0,    0,  322,  326,    0,    0,  324,  323,
        0,    0,  329,  325,  329,  329,  329,    0,  328,  326,
      330,    0,  330,  330,  330,    0,    0,  328,    0,  326,
      327,    0,    0,    0,  331,  326,  331,  331,  331,    0,
      327,    0,  332,    0,  332,  332,  332,  333,  326,  333,
      333,  333,  329,    0,    0,    0,  330,    0,    0,  327,
      329,  334,    0,  334,  334,  334,    0,    0,  330,    0,
      331,  332,  335,    0,  335,  335,  335,    0,    0,    0,
        0,  329,  331,  332,  334,    0,  330,    0,    0,  336,
      332,  336,  336,  336,  337,  333,  337,  337,  337,    0,

      331,  332,    0,    0,    0,    0,  335,    0,    0,  334,
        0,    0,  332,  339,  334,  339,  339,  339,    0,  337,
      335,    0,    0,  338,  336,  338,  338,  338,    0,  340,
        0,  340,  340,  340,    0,    0,  335,  336,  339,    0,
        0,  341,  337,  341,  341,  341,  338,    0,  342,  337,
      342,  342,  342,  343,  336,  343,  343,  343,    0,    0,
        0,  339,  344,    0,  344,  344,  344,    0,  339,  340,
      345,  338,  345,  345,  345,  341,  338,  340,  346,    0,
      346,  346,  346,  342,    0,    0,    0,  343,    0,  341,
        0,  344,    0,    0,  345,    0,  342,    0,  340,    0,

      347,  343,  347,  347,  347,  341,    0,    0,    0,    0,
      344,    0,  346,  342,    0,    0,    0,  343,  345,    0,
        0,  344,    0,    0,  345,  348,  346,  348,  348,  348,
        0,  349,  347,  349,  349,  349,  350,    0,  350,  350,
      350,    0,  346,  351,    0,  351,  351,  351,  347,    0,
      348,    0,    0,  362,  362,    0,    0,    0,    0,  349,
        0,    0,  347,  362,  364,  362,  364,  364,  364,    0,
        0,    0,    0,  348,    0,    0,  350,  362,    0,  349,
      348,    0,    0,    0,  350,  364,    0,    0,    0,  349,
        0,  351,    0,  362,  365,  362,  365,  365,  365,  366,

        0,  366,  366,  366,    0,  350,  362,  367,    0,  367,
      367,  367,  364,    0,    0,  364,    0,    0,  368,  365,
      368,  368,  368,    0,  369,    0,  369,  369,  369,  370,
        0,  370,  370,  370,    0,    0,    0,    0,  366,  367,
        0,    0,  365,  368,    0,    0,    0,  366,    0,  365,
      369,    0,    0,    0,  371,  367,  371,  371,  371,  372,
        0,  372,  372,  372,    0,    0,  368,  366,    0,  367,
        0,    0,  369,  368,    0,    0,    0,  370,    0,  373,
      369,  373,  373,  373,    0,  374,  371,  374,  374,  374,
      375,    0,  375,  375,  375,    0,  376,    0,  376,  376,

      376,  377,  371,  377,  377,  377,  378,  372,  378,  378,
      378,    0,    0,  374,    0,  379,  371,  379,  379,  379,
        0,  376,  375,    0,    0,    0,  380,  373,  380,  380,
      380,  378,  381,  374,  381,  381,  381,    0,  375,  377,
        0,    0,    0,  374,  376,    0,    0,    0,    0,  377,
        0,  376,  375,  382,  378,  382,  382,  382,    0,    0,
        0,  378,  384,  379,  384,  384,  384,  383,  377,  383,
      383,  383,    0,  385,  380,  385,  385,  385,    0,  386,
      381,  386,  386,  386,  387,    0,  387,  387,  387,  388,
        0,  388,  388,  388,    0,    0,  389,    0,  389,  389,

      389,  382,    0,    0,    0,  390,  383,  390,  390,  390,
      384,    0,    0,  387,  391,  383,  391,  391,  391,  386,
      392,  385,  392,  392,  392,    0,    0,  386,    0,  388,
        0,    0,  387,    0,  389,  383,  393,  388,  393,  393,
      393,    0,    0,  387,  389,  392,    0,  394,  386,  394,
      394,  394,  395,  390,  395,  395,  395,    0,  388,    0,
        0,    0,  391,  389,    0,    0,    0,  396,  392,  396,
      396,  396,    0,    0,  394,  392,  393,  397,    0,  397,
      397,  397,    0,    0,  393,    0,  398,  395,  398,  398,
      398,    0,    0,    0,  399,  394,  399,  399,  399,  400,

      395,  400,  400,  400,  394,  393,    0,  398,    0,  401,
      397,  401,  401,  401,    0,  396,    0,  395,  402,    0,
      402,  402,  402,    0,    0,  397,  400,  403,    0,  403,
      403,  403,  401,    0,  398,  399,    0,  398,    0,    0,
      397,  404,  399,  404,  404,  404,    0,  400,    0,    0,
      402,  405,    0,  405,  405,  405,  400,  401,    0,    0,
        0,    0,  401,    0,  399,  406,  402,  406,  406,  406,
      404,    0,    0,    0,    0,  403,    0,  405,    0,  407,
      402,  407,  407,  407,  408,    0,  408,  408,  408,  404,
      409,    0,  409,  409,  409,    0,    0,    0,    0,  405,

      404,    0,    0,    0,  407,    0,  410,  405,  410,  410,
      410,    0,  411,  406,  411,  411,  411,  412,    0,  412,
      412,  412,  408,    0,    0,    0,    0,  407,    0,    0,
      409,    0,  408,    0,  407,    0,    0,  411,  409,  413,
        0,  413,  413,  413,  414,    0,  414,  414,  414,  412,
        0,  408,    0,  415,  410,  415,  415,  415,    0,  409,
      411,    0,    0,    0,    0,  412,  416,  411,  416,  416,
      416,    0,  417,  413,  417,  417,  417,    0,  418,  412,
      418,  418,  418,    0,  414,    0,  419,  413,  419,  419,
      419,    0,  414,  417,    0,    0,    0,    0,  415,  416,

      418,  415,    0,  413,  420,    0,  420,  420,  420,    0,
        0,    0,    0,  414,  416,  421,    0,  421,  421,  421,
      417,    0,    0,  417,    0,    0,  418,  415,    0,  416,
      418,    0,    0,    0,  419,  422,  420,  422,  422,  422,
      421,  423,    0,  423,  423,  423,    0,  424,    0,  424,
      424,  424,  420,  425,    0,  425,  425,  425,  426,    0,
      426,  426,  426,  421,    0,  427,  420,  427,  427,  427,
      421,    0,    0,  422,  424,    0,    0,    0,  428,  423,
      428,  428,  428,  422,  429,  424,  429,  429,  429,  423,
        0,    0,    0,  425,    0,  424,  431,    0,  431,  431,

      431,  425,  422,  430,  424,    0,  426,  430,  423,    0,
        0,  430,    0,  427,  424,    0,  429,  430,    0,    0,
        0,  432,  425,  432,  432,  432,  428,  433,    0,  433,
      433,  433,  429,  430,    0,  431,  434,  430,  434,  434,
      434,  430,  432,    0,  431,    0,  429,  430,  435,    0,
      435,  435,  435,    0,  436,    0,  436,  436,  436,  437,
        0,  437,  437,  437,  431,    0,  433,    0,    0,  432,
        0,  434,  432,    0,  438,  433,  438,  438,  438,    0,
        0,    0,    0,  436,  434,  439,    0,  439,  439,  439,
        0,    0,    0,  437,    0,  433,  435,    0,    0,    0,

        0,  434,  436,    0,    0,    0,    0,  437,  439,    0,
        0,    0,    0,  436,    0,  440,  438,  440,  440,  440,
        0,    0,  438,  437,  441,    0,  441,  441,  441,    0,
        0,    0,    0,  439,    0,    0,  440,  442,  439,  442,
      442,  442,    0,    0,    0,  438,  443,    0,  443,  443,
      443,    0,    0,  444,    0,  444,  444,  444,  445,  441,
      445,  445,  445,  440,    0,    0,  440,  446,    0,  446,
      446,  446,  441,    0,    0,    0,  442,  447,  443,  447,
      447,  447,    0,    0,  443,  442,  444,  445,  446,  441,
        0,    0,    0,    0,  443,  448,    0,  448,  448,  448,

        0,  444,  447,    0,    0,  442,  445,  449,  443,  449,
      449,  449,    0,  443,    0,  446,  444,  445,  446,  450,
      448,  450,  450,  450,  451,  447,  451,  451,  451,    0,
        0,  452,  447,  452,  452,  452,  449,    0,  453,    0,
      453,  453,  453,  448,  450,  454,    0,  454,  454,  454,
      448,    0,    0,    0,  455,  449,  455,  455,  455,  451,
        0,    0,    0,    0,  452,    0,  449,  450,    0,    0,
        0,    0,  451,    0,  450,    0,    0,    0,  454,  452,
      453,  456,    0,  456,  456,  456,  453,    0,    0,  451,
        0,    0,  455,  454,  452,  457,    0,  457,  457,  457,

        0,  459,  455,  459,  459,  459,  456,    0,  454,  453,
      458,    0,  458,  458,  458,    0,    0,    0,  457,    0,
      460,  455,  460,  460,  460,    0,  459,    0,    0,  456,
      461,    0,  461,  461,  461,  462,  456,  462,  462,  462,
        0,    0,    0,  457,    0,  458,    0,    0,  457,  459,
      463,    0,  463,  463,  463,    0,  459,    0,  458,    0,
      460,    0,  461,  464,  462,  464,  464,  464,  460,  465,
        0,  465,  465,  465,    0,  458,    0,  466,  461,  466,
      466,  466,    0,  462,  467,    0,  467,  467,  467,  460,
        0,    0,  461,  468,  462,  468,  468,  468,  463,    0,

      466,    0,  469,  465,  469,  469,  469,    0,    0,    0,
      470,  464,  470,  470,  470,    0,  467,  465,  471,    0,
      471,  471,  471,    0,  472,  466,  472,  472,  472,    0,
      466,    0,  467,  465,  474,    0,  474,  474,  474,  471,
      473,  468,  473,  473,  473,  469,  467,    0,    0,  475,
      469,  475,  475,  475,    0,    0,    0,    0,  470,  472,
      477,  474,  477,  477,  477,  473,  471,    0,    0,  471,
        0,    0,  472,  476,  469,  476,  476,  476,    0,    0,
        0,  477,  474,    0,    0,    0,    0,  475,  473,  472,
      478,  474,  478,  478,  478,  473,    0,  475,    0,  479,

      476,  479,  479,  479,    0,    0,    0,    0,  477,    0,
      480,  477,  480,  480,  480,  481,  475,  481,  481,  481,
      482,  476,  482,  482,  482,  483,    0,  483,  483,  483,
      476,    0,  491,  491,    0,  480,    0,    0,  478,    0,
        0,    0,  491,    0,  491,  482,    0,  479,    0,  481,
      483,  493,    0,  493,  493,  493,  491,  492,  480,  492,
      492,  492,    0,  481,    0,  480,    0,  494,  482,  494,
      494,  494,  491,  483,  491,  482,    0,    0,    0,  481,
      483,    0,    0,    0,  495,  491,  495,  495,  495,    0,
      493,  492,  496,    0,  496,  496,  496,    0,  497,  493,

      497,  497,  497,    0,    0,  492,  498,    0,  498,  498,
      498,    0,    0,  496,  499,  494,  499,  499,  499,  493,
        0,  492,  500,  495,  500,  500,  500,  501,    0,  501,
      501,  501,  495,  502,    0,  502,  502,  502,    0,    0,
      496,    0,    0,  496,    0,  503,  497,  503,  503,  503,
        0,    0,  495,  504,  498,  504,  504,  504,    0,    0,
        0,  505,  499,  505,  505,  505,    0,    0,    0,  506,
      500,  506,  506,  506,  507,  501,  507,  507,  507,    0,
      508,  502,  508,  508,  508,    0,  509,    0,  509,  509,
      509,    0,  510,  503,  510,  510,  510,    0,    0,  507,

        0,  504,  511,  506,  511,  511,  511,    0,  512,  505,
      512,  512,  512,    0,    0,    0,    0,  506,    0,    0,
      508,  513,  507,  513,  513,  513,    0,    0,  508,  507,
        0,    0,    0,  506,  509,  514,    0,  514,  514,  514,
      510,  516,  513,  516,  516,  516,  512,    0,    0,  508,
      511,    0,    0,    0,    0,  515,  512,  515,  515,  515,
        0,  517,  516,  517,  517,  517,    0,    0,    0,  513,
        0,    0,  513,  514,  518,  512,  518,  518,  518,    0,
        0,    0,    0,  514,    0,    0,    0,  515,    0,  516,
        0,    0,  516,  519,    0,  519,  519,  519,    0,  518,

        0,  517,  514,  515,  520,    0,  520,  520,  520,  517,
      521,    0,  521,  521,  521,    0,    0,  515,    0,  519,
        0,  522,  518,  522,  522,  522,    0,    0,    0,  518,
      517,  523,    0,  523,  523,  523,  524,    0,  524,  524,
      524,  519,  525,    0,  525,  525,  525,    0,    0,  519,
        0,  526,  520,  526,  526,  526,    0,    0,  521,  527,
        0,  527,  527,  527,  528,    0,  528,  528,  528,  522,
        0,    0,    0,    0,  525,  526,    0,    0,  529,  523,
      529,  529,  529,  530,  524,  530,  530,  530,  527,  531,
      525,  531,  531,  531,  532,    0,  532,  532,  532,  526,

      528,    0,    0,    0,  525,  526,    0,  527,    0,    0,
      529,    0,  528,    0,    0,  530,    0,    0,  527,  532,
      533,    0,  533,  533,  533,  534,  529,  534,  534,  534,
      528,  530,  535,    0,  535,  535,  535,  531,    0,    0,
      529,    0,  532,    0,  536,  530,  536,  536,  536,  532,
        0,    0,  537,  533,  537,  537,  537,    0,    0,    0,
        0,  535,    0,    0,    0,  534,    0,    0,  533,  536,
        0,    0,  538,  534,  538,  538,  538,    0,  537,    0,
      535,    0,  539,  533,  539,  539,  539,    0,    0,    0,
        0,  535,  536,  540,  534,  540,  540,  540,    0,  536,

      537,  541,    0,  541,  541,  541,    0,  539,  537,    0,
      542,    0,  542,  542,  542,  543,    0,  543,  543,  543,
      538,  545,    0,  545,  545,  545,    0,  540,    0,    0,
      539,    0,    0,    0,    0,  542,  546,  539,  546,  546,
      546,  540,  544,  541,  544,  544,  544,    0,  547,  541,
      547,  547,  547,    0,  543,    0,    0,  540,  542,    0,
        0,    0,    0,  543,  545,  542,    0,    0,    0,  545,
      546,  549,  541,  549,  549,  549,  547,  548,  544,  548,
      548,  548,    0,  543,  546,  553,    0,  553,  553,  553,
      544,    0,    0,  545,    0,  550,  547,  550,  550,  550,

      546,  552,  548,  552,  552,  552,  547,    0,  544,    0,
      551,  549,  551,  551,  551,    0,    0,    0,    0,  549,
      553,    0,    0,    0,    0,  548,  552,  555,    0,  555,
      555,  555,  548,  553,  554,  550,  554,  554,  554,    0,
      549,    0,    0,  550,  551,    0,    0,    0,  555,  552,
      553,  556,    0,  556,  556,  556,  552,  557,  551,  557,
      557,  557,    0,  554,  550,  558,    0,  558,  558,  558,
        0,    0,  556,    0,  551,  555,    0,  559,  555,  559,
      559,  559,  554,  560,    0,  560,  560,  560,    0,    0,
        0,    0,  561,  554,  561,  561,  561,  557,    0,  556,

      559,    0,  556,  558,    0,  557,  560,  562,    0,  562,
      562,  562,  563,  558,  563,  563,  563,  561,  564,    0,
      564,  564,  564,    0,    0,  559,  557,    0,    0,    0,
      559,  560,  558,    0,    0,  566,  560,  566,  566,  566,
      561,  562,  565,  564,  565,  565,  565,  561,  567,    0,
      567,  567,  567,    0,  568,  562,  568,  568,  568,    0,
      563,  569,    0,  569,  569,  569,  564,  565,    0,  566,
        0,  562,    0,  564,  570,    0,  570,  570,  570,    0,
        0,    0,  571,  566,  571,  571,  571,    0,    0,  572,
      565,  572,  572,  572,  568,    0,  567,  565,  570,  566,

        0,    0,  568,  573,  569,  573,  573,  573,    0,  569,
        0,    0,    0,  574,  572,  574,  574,  574,    0,    0,
        0,    0,  570,  568,    0,    0,  573,    0,  570,    0,
      571,    0,  575,  569,  575,  575,  575,  572,    0,  576,
      574,  576,  576,  576,  572,  577,    0,  577,  577,  577,
      578,  573,  578,  578,  578,  579,  573,  579,  579,  579,
        0,  574,    0,    0,  580,    0,  580,  580,  580,    0,
      574,    0,  575,    0,  576,  581,    0,  581,  581,  581,
      575,  579,  582,    0,  582,  582,  582,  576,    0,  578,
        0,  580,  583,  577,  583,  583,  583,    0,  578,    0,

        0,  575,    0,  579,  576,  584,    0,  584,  584,  584,
        0,  579,  580,  585,    0,  585,  585,  585,  578,    0,
        0,  580,  582,  581,    0,  586,    0,  586,  586,  586,
      582,    0,  587,    0,  587,  587,  587,    0,    0,  584,
      583,  588,    0,  588,  588,  588,  589,    0,  589,  589,
      589,  582,    0,  584,  586,    0,  590,    0,  590,  590,
      590,  585,  591,    0,  591,  591,  591,    0,    0,  584,
      589,    0,    0,  586,  587,  592,  588,  592,  592,  592,
      587,    0,    0,  594,  586,  594,  594,  594,  593,  588,
      593,  593,  593,    0,  589,  590,    0,  591,    0,    0,

      589,    0,    0,  587,  590,    0,  588,    0,    0,  592,
      591,  595,    0,  595,  595,  595,  596,    0,  596,  596,
      596,    0,    0,  592,  590,    0,    0,  591,    0,  593,
      597,  594,  597,  597,  597,    0,  593,    0,  598,  592,
      598,  598,  598,  599,    0,  599,  599,  599,  600,    0,
      600,  600,  600,    0,    0,    0,  596,    0,  593,  595,
        0,    0,  597,  598,  596,    0,  601,    0,  601,  601,
      601,    0,  602,    0,  602,  602,  602,  603,  597,  603,
      603,  603,    0,  599,    0,  596,  598,    0,  600,  601,
        0,  599,  597,  598,    0,  604,  600,  604,  604,  604,

      605,    0,  605,  605,  605,    0,  606,    0,  606,  606,
      606,    0,  599,    0,  601,    0,    0,  600,    0,  601,
      602,    0,    0,    0,  607,  603,  607,  607,  607,  608,
        0,  608,  608,  608,  609,    0,  609,  609,  609,    0,
      604,  606,  610,  604,  610,  610,  610,    0,  605,  607,
        0,    0,    0,  611,  606,  611,  611,  611,  612,    0,
      612,  612,  612,  608,  613,    0,  613,  613,  613,  604,
        0,  606,  607,    0,    0,    0,    0,  608,  611,  607,
        0,  610,  609,  614,    0,  614,  614,  614,    0,    0,
      610,    0,  615,  608,  615,  615,  615,  612,    0,    0,

        0,  611,    0,    0,  613,    0,  612,    0,  611,    0,
      610,    0,  613,  615,  616,    0,  616,  616,  616,    0,
      617,  614,  617,  617,  617,  619,  612,  619,  619,  619,
        0,  614,  618,  613,  618,  618,  618,    0,    0,    0,
      615,    0,  620,  615,  620,  620,  620,    0,  617,  621,
      614,  621,  621,  621,    0,    0,  622,  618,  622,  622,
      622,  623,  616,  623,  623,  623,    0,    0,  617,    0,
      621,    0,  626,  619,  626,  626,  626,    0,  617,    0,
      618,  620,    0,    0,    0,  622,    0,  618,  623,  624,
      620,  624,  624,  624,    0,    0,    0,  621,    0,    0,

      621,    0,    0,  625,  622,  625,  625,  625,    0,  623,
      620,    0,    0,    0,  624,  622,    0,    0,  623,  627,
      626,  627,  627,  627,  628,    0,  628,  628,  628,  629,
        0,  629,  629,  629,    0,    0,    0,  624,    0,    0,
        0,  625,    0,    0,  624,  628,    0,    0,    0,    0,
        0,  625,    0,  630,  627,  630,  630,  630,  631,    0,
      631,  631,  631,    0,    0,    0,    0,  627,    0,    0,
      625,    0,  628,    0,  630,  628,  632,  629,  632,  632,
      632,    0,  631,  633,  627,  633,  633,  633,    0,    0,
        0,  634,    0,  634,  634,  634,  635,    0,  635,  635,

      635,  630,    0,    0,  630,    0,  631,  636,    0,  636,
      636,  636,  631,    0,  632,  633,  634,    0,  637,    0,
      637,  637,  637,    0,  632,  638,    0,  638,  638,  638,
      639,  633,  639,  639,  639,    0,  635,    0,  641,  634,
      641,  641,  641,  632,  635,  633,  634,  636,    0,  640,
        0,  640,  640,  640,  642,  636,  642,  642,  642,    0,
        0,    0,  639,    0,    0,  635,  637,  638,  643,    0,
      643,  643,  643,  638,    0,    0,  636,  640,  639,  644,
        0,  644,  644,  644,    0,  645,  641,  645,  645,  645,
        0,  646,  639,  646,  646,  646,  638,  640,    0,    0,

        0,  647,  642,  647,  647,  647,  648,  640,  648,  648,
      648,  649,    0,  649,  649,  649,  643,  650,  644,  650,
      650,  650,    0,    0,    0,    0,  651,  644,  651,  651,
      651,    0,  652,  645,  652,  652,  652,    0,    0,  646,
      650,    0,  653,    0,  653,  653,  653,  644,    0,  647,
        0,    0,  649,  654,  648,  654,  654,  654,  655,  649,
      655,  655,  655,    0,    0,  650,  651,  653,    0,  656,
      650,  656,  656,  656,  651,  657,    0,  657,  657,  657,
      652,  649,    0,    0,  658,    0,  658,  658,  658,  659,
      653,  659,  659,  659,    0,  651,    0,  653,  655,    0,

      657,  654,    0,  656,    0,  660,  655,  660,  660,  660,
      661,    0,  661,  661,  661,    0,    0,  656,  658,    0,
        0,  659,    0,  657,    0,    0,    0,  655,    0,    0,
      657,    0,  658,  656,    0,    0,    0,  659,    0,  662,
      660,  662,  662,  662,    0,    0,    0,    0,  658,    0,
        0,  659,  663,  660,  663,  663,  663,  664,  661,  664,
      664,  664,  665,    0,  665,  665,  665,    0,    0,  666,
      660,  666,  666,  666,    0,    0,  667,  663,  667,  667,
      667,  668,    0,  668,  668,  668,    0,  662,    0,    0,
      669,    0,  669,  669,  669,  670,    0,  670,  670,  670,

      663,    0,    0,    0,    0,  664,  668,  663,    0,    0,
      665,  669,  671,    0,  671,  671,  671,  666,  672,    0,
      672,  672,  672,  673,  667,  673,  673,  673,    0,  668,
      674,    0,  674,  674,  674,    0,  668,    0,  669,    0,
        0,  669,    0,  670,  673,  675,  671,  675,  675,  675,
      676,    0,  676,  676,  676,  677,    0,  677,  677,  677,
      671,    0,    0,    0,    0,  678,  672,  678,  678,  678,
        0,  673,    0,    0,  673,    0,  671,    0,  674,  675,
        0,  679,    0,  679,  679,  679,    0,  680,    0,  680,
      680,  680,    0,  675,  677,    0,    0,  682,  676,  682,

      682,  682,    0,  677,  679,    0,    0,    0,    0,  675,
        0,    0,  680,  678,  681,    0,  681,  681,  681,    0,
        0,    0,    0,  677,  683,    0,  683,  683,  683,  679,
        0,    0,    0,    0,  679,  680,  684,    0,  684,  684,
      684,    0,  680,    0,    0,  682,  685,  683,  685,  685,
      685,  686,  681,  686,  686,  686,    0,  687,    0,  687,
      687,  687,  681,  688,    0,  688,  688,  688,    0,    0,
      684,  689,  683,  689,  689,  689,    0,  683,    0,    0,
        0,  681,    0,  690,  684,  690,  690,  690,    0,  686,
        0,    0,    0,    0,  685,  687,    0,    0,  691,  686,

      684,  688,  691,  689,    0,  687,  691,  690,    0,    0,
        0,  688,  691,  692,    0,  692,  692,  692,  686,  689,
        0,    0,    0,  693,  687,  693,  693,  693,  691,    0,
      688,  690,  691,  689,    0,    0,  691,  690,    0,    0,
        0,  694,  691,  694,  694,  694,  695,    0,  695,  695,
      695,  692,  696,    0,  696,  696,  696,    0,    0,    0,
      697,  692,  697,  697,  697,  698,    0,  698,  698,  698,
      700,  693,  700,  700,  700,    0,    0,  696,    0,  701,
      692,  701,  701,  701,  699,  697,  699,  699,  699,  694,
        0,  695,    0,  702,  695,  702,  702,  702,    0,  703,

      696,  703,  703,  703,    0,  699,    0,  696,  697,    0,
      698,    0,    0,  698,    0,  697,    0,  701,  700,  704,
      695,  704,  704,  704,  702,    0,  705,  701,  705,  705,
      705,    0,  699,    0,  706,  699,  706,  706,  706,  698,
      708,  702,  708,  708,  708,    0,  701,  703,    0,  707,
        0,  707,  707,  707,  702,    0,  709,  704,  709,  709,
      709,  706,    0,    0,    0,    0,  710,  704,  710,  710,
      710,    0,  708,  711,  705,  711,  711,  711,    0,    0,
        0,  709,  706,  707,    0,    0,  704,    0,  708,    0,
        0,  706,  710,    0,    0,    0,  712,  707,  712,  712,

      712,    0,  708,  713,  709,  713,  713,  713,    0,    0,
        0,  709,    0,  707,  710,  714,    0,  714,  714,  714,
        0,  711,  710,    0,  715,    0,  715,  715,  715,  716,
        0,  716,  716,  716,  717,    0,  717,  717,  717,    0,
        0,    0,  713,    0,  712,  718,    0,  718,  718,  718,
        0,  713,    0,    0,    0,    0,  719,  715,  719,  719,
      719,    0,    0,  714,  720,    0,  720,  720,  720,  716,
      718,  713,  715,    0,    0,    0,  722,  716,  722,  722,
      722,  721,  717,  721,  721,  721,  723,  715,  723,  723,
      723,    0,    0,  718,  719,    0,    0,    0,  716,    0,

      718,    0,  720,  722,  719,  725,  721,  725,  725,  725,
        0,    0,  720,    0,  724,  723,  724,  724,  724,    0,
        0,    0,    0,  719,  722,    0,    0,    0,    0,  721,
        0,  720,    0,  722,  723,  726,  721,  726,  726,  726,
        0,    0,    0,  724,    0,  723,  727,    0,  727,  727,
      727,    0,  728,  725,  728,  728,  728,  729,    0,  729,
      729,  729,  724,    0,    0,  730,    0,  730,  730,  730,
        0,    0,    0,  724,  728,  731,    0,  731,  731,  731,
        0,    0,    0,  726,    0,  727,  730,  732,    0,  732,
      732,  732,    0,    0,  727,  733,  729,  733,  733,  733,

      728,    0,    0,    0,  728,  729,  734,    0,  734,  734,
      734,  732,    0,  730,  727,  735,  730,  735,  735,  735,
        0,    0,    0,  731,    0,  729,    0,    0,  736,  733,
      736,  736,  736,    0,  737,  732,  737,  737,  737,    0,
        0,  732,  738,  733,  738,  738,  738,    0,  739,  735,
      739,  739,  739,  736,  734,    0,    0,    0,  740,  733,
      740,  740,  740,  735,  741,    0,  741,  741,  741,  742,
        0,  742,  742,  742,    0,    0,  736,    0,    0,  735,
        0,    0,  737,  736,  743,    0,  743,  743,  743,  744,
      738,  744,  744,  744,    0,    0,  739,  745,  740,  745,

      745,  745,    0,    0,    0,    0,  740,  742,    0,  741,
        0,  746,  741,  746,  746,  746,  747,  742,  747,  747,
      747,  750,  745,  750,  750,  750,    0,  740,    0,  744,
        0,    0,  743,    0,    0,    0,  742,  744,  741,  748,
        0,  748,  748,  748,  749,  745,  749,  749,  749,    0,
      746,  751,  745,  751,  751,  751,    0,    0,  744,  746,
        0,    0,    0,  754,  747,  754,  754,  754,  748,  750,
        0,    0,  752,  749,  752,  752,  752,    0,  753,  746,
      753,  753,  753,    0,    0,    0,  755,  748,  755,  755,
      755,  756,  749,  756,  756,  756,    0,    0,  748,  751,

        0,    0,  753,  749,  757,    0,  757,  757,  757,    0,
        0,  754,  752,  758,    0,  758,  758,  758,  755,  759,
      752,  759,  759,  759,    0,    0,  753,  760,    0,  760,
      760,  760,  753,    0,  755,    0,    0,    0,    0,  756,
        0,  752,  761,    0,  761,  761,  761,    0,  755,  757,
        0,  760,  757,  762,    0,  762,  762,  762,    0,  759,
      763,  758,  763,  763,  763,    0,  764,  759,  764,  764,
      764,    0,    0,    0,    0,  760,    0,    0,  757,    0,
      765,  760,  765,  765,  765,    0,    0,    0,  759,    0,
      761,  766,  762,  766,  766,  766,  767,    0,  767,  767,

      767,  762,  768,    0,  768,  768,  768,  769,  763,  769,
      769,  769,    0,    0,  764,  770,    0,  770,  770,  770,
        0,  762,  771,    0,  771,  771,  771,    0,  765,    0,
      766,  769,    0,    0,    0,    0,  770,    0,    0,  766,
        0,    0,  768,  771,  767,    0,    0,    0,    0,  772,
      768,  772,  772,  772,  773,  769,  773,  773,  773,  766,
        0,  769,    0,  770,    0,  774,  770,  774,  774,  774,
      771,  768,    0,  771,  772,  775,    0,  775,  775,  775,
      776,    0,  776,  776,  776,  777,    0,  777,  777,  777,
      778,    0,  778,  778,  778,    0,  780,  772,  780,  780,

      780,    0,  773,    0,  772,    0,  779,  775,  779,  779,
      779,    0,  781,  774,  781,  781,  781,    0,  780,    0,
        0,  777,  782,  775,  782,  782,  782,    0,  776,    0,
        0,  779,    0,  777,  781,    0,    0,  775,  778,    0,
        0,    0,    0,  783,  780,  783,  783,  783,  780,    0,
        0,  777,    0,  784,  779,  784,  784,  784,    0,    0,
      781,  779,    0,  785,  781,  785,  785,  785,  783,    0,
      782,    0,    0,  786,  784,  786,  786,  786,  787,    0,
      787,  787,  787,    0,  788,    0,  788,  788,  788,    0,
      789,  783,  789,  789,  789,    0,    0,    0,  783,    0,

        0,  784,    0,    0,  784,  786,    0,    0,    0,    0,
      787,  785,  790,  789,  790,  790,  790,    0,    0,    0,
        0,  786,  788,    0,    0,  791,  787,  791,  791,  791,
        0,    0,  788,    0,    0,  786,    0,  790,  789,    0,
      787,    0,  792,  789,  792,  792,  792,    0,    0,    0,
      791,  788,  793,    0,  793,  793,  793,    0,    0,    0,
      790,  794,    0,  794,  794,  794,  795,  790,  795,  795,
      795,    0,  796,  791,  796,  796,  796,  793,    0,    0,
      791,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      792,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      793,    0,    0,    0,    0,    0,    0,  793,    0,  794,
        0,    0,    0,    0,  795,    0,    0,    0,    0,    0,
      796,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,    0,  802,
      802,  802,  802,  803,  803,  804,  804,    0,  804,    0,
      804,  804,  804,  804,  805,  805,    0,  805,  805,  805,
      805,  805,  805,  806,    0,    0,  806,  806,    0,    0,
      806,  806,  807,  807,  797,  797,  797,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[229] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #define YY_DECL int yylex()

    bool DEBUG = false;

    bool endsWith(const std::string& str, const std::string& suffix)
    {
        return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
    }

    struct Date {
        int day = 0;
        int month = 0;
        int year = -1;
    };

    enum TimeFormat {
        AM, PM, HOURS_24
    };

    struct Time {
        int hour = 0;
        int minute = 0;
        int second = 0;
        TimeFormat format = HOURS_24;
    };

    struct DateTime {
        Date * date = nullptr;
        Time * time = nullptr;
    };

    void printDateTimeLiteral(DateTime & datetime) {
        if (datetime.date != nullptr) {
            printf("Month: %d\n", datetime.date->month);
            printf("Day: %d\n", datetime.date->day);
            printf("Year: %d\n", datetime.date->year);
        }
        if (datetime.time != nullptr) {
            printf("Hour: %d\n", datetime.time->hour);
            printf("Minute: %d\n", datetime.time->minute);
            printf("Second: %d\n", datetime.time->second);
            printf("Time format: ");
            if (datetime.time->format == AM) {
                printf("AM\n");
            } else if (datetime.time->format == PM) {
                printf("PM\n");
            } else {
                printf("24-hour format\n");
            }
         }
    }

#line 2358 "lexer.flex.cpp"

#line 2360 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2
#define DATETIME 3
#define DATE 4
#define TIME 5

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 76 "lexer.l"



#line 80 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;



#line 2596 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 798 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 797 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 97 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 98 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 99 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "lexer.l"
{printf("Found keyword : %s\n", yytext);}    
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 129 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 130 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 131 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 132 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 133 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 134 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 135 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 136 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 138 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 139 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 140 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 141 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 142 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 143 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 144 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 145 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 146 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 147 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 148 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 149 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 150 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 151 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 152 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 153 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 154 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 155 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 156 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 157 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 158 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 159 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 160 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 161 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 162 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 163 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 164 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 165 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 166 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 167 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 168 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 169 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 170 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 171 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 172 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 173 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 174 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 175 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 176 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 177 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 178 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 179 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 180 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 181 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 182 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 183 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 184 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 185 "lexer.l"
{printf("Found keyword : %s\n", yytext);}   
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 186 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 187 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 188 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 189 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 190 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 191 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 192 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 193 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 194 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 195 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 196 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 197 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 198 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 199 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 200 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 201 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 202 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 203 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 204 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 205 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 206 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 207 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 208 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 209 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 210 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 211 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 212 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 213 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 214 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 215 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 216 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 217 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 218 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 219 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 220 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 221 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 222 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 223 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 224 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 225 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 226 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 227 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 228 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 229 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 230 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 231 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 232 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 233 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 234 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 235 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 236 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 237 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 238 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 239 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 241 "lexer.l"
{printf("Found nothing literal\n");}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 242 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 243 "lexer.l"
{printf("Found boolean literal : %s\n", yytext);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 245 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 246 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 247 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 248 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 249 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 250 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 251 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 252 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 253 "lexer.l"
{printf("Found a plus operator lexeme: %s", yytext);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 255 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 256 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 257 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 258 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 259 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 260 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 261 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 262 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 263 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 264 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 265 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 266 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 267 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 268 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 269 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 270 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 271 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 272 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 273 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 274 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 275 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 276 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 277 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 278 "lexer.l"
{printf("Found a operator characters: %s", yytext);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 280 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 281 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 282 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 283 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 285 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 286 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 287 "lexer.l"
{strLiteral += "\\";}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 288 "lexer.l"
{strLiteral += "\n";}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 289 "lexer.l"
{strLiteral += "\r";}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 290 "lexer.l"
{strLiteral += "\t";}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 291 "lexer.l"
{strLiteral += "\b";}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 292 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 293 "lexer.l"
{printf("Error: String literal wasn't closed\n"); yyterminate();}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 294 "lexer.l"
{
    printf("Error: String literal wasn't closed at line %d\n", yylineno - 1); 
    if (!DEBUG) {
        yyterminate();
    }
    else {
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 303 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        printf("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
    } else {
        printf("Error: character literal can have only one character, not string, line: %d", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 313 "lexer.l"
{printf("Found a string literal: %s\n", strLiteral.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 315 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    intValue = atoi(intLiteral); printf("Found a integer value: %d\n", intValue);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 330 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    intValue = strtol(intLiteral + 2, NULL, 16);
    printf("Found a hex integer value: %d\n", intValue);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 346 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    intValue = strtol(intLiteral + 2, NULL, 8);
    printf("Found a oct integer value: %d\n", intValue);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 362 "lexer.l"
{
    doubleValue = atof(yytext);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 367 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    doubleValue = atof(floatLiteral);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 375 "lexer.l"
{BEGIN(DATETIME); datetime = DateTime(); printf("Found opening datetime literal lexeme\n");}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 376 "lexer.l"
{printf("Found a whitespace inside datetime literal\n");}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 377 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
    dateOrTimePositionIndex = 0;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 381 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = AM;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 386 "lexer.l"
{
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    datetime.time->format = PM;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 391 "lexer.l"
{
    if (datetime.time != nullptr) {
        printf("Error: Time must not be declared before date, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date = new Date();
    datetime.date->month = tempIntLiteral;
    dateOrTimePositionIndex++;
    BEGIN(DATE);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 401 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 404 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.date->day = tempIntLiteral;
            break;
        default:
            printf("Error: date has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    }
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 415 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components\n");
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    BEGIN(INITIAL);
    BEGIN(DATETIME);
    tempIntLiteral = -1;
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 425 "lexer.l"
{
    BEGIN(TIME);
    datetime.time = new Time();
    datetime.time->hour = tempIntLiteral;
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 432 "lexer.l"
{
    tempIntLiteral = atoi(yytext);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 435 "lexer.l"
{
    switch (dateOrTimePositionIndex) {
        case 1:
            datetime.time->minute = tempIntLiteral;
            break;
        default:
            printf("Error: time has more digit literal than required: %d\n", yylineno);
            if (!DEBUG) yyterminate();
    };
    dateOrTimePositionIndex++;
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 446 "lexer.l"
{
    datetime.time->format = AM;
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 449 "lexer.l"
{
    datetime.time->format = PM;
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 452 "lexer.l"
{
    printf("Error: date literal characters in time literal: %d\n", yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 457 "lexer.l"
{
    if (datetime.date == nullptr && datetime.time == nullptr) {
        printf("Error: Unrecognized date literal at line %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    if (tempIntLiteral != -1) {
        printf("Error: Unrecognized int literal: %d at line %d\n", tempIntLiteral, yylineno);
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 471 "lexer.l"
{
    if (dateOrTimePositionIndex < 2) {
        printf("Error: Missing date components: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
    datetime.date->year = tempIntLiteral;
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 483 "lexer.l"
{
    if (dateOrTimePositionIndex < 1) {
        printf("Error: Missing time components: %d\n", yylineno);
    } else if (dateOrTimePositionIndex == 1) {
        datetime.time->minute = tempIntLiteral;
    } else if (dateOrTimePositionIndex == 2) {
        datetime.time->second = tempIntLiteral;
    }
    printf("Found a datetime literal:\n");
    printDateTimeLiteral(datetime);
    printf("Found closing datetime literal lexeme\n");
    BEGIN(INITIAL);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 497 "lexer.l"
{
    printf("Error: invalid characters in datetime literal at line %d: %s\n", yylineno, yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 501 "lexer.l"
{printf("Error: line break in datetime literal at line %d", yylineno);}
	YY_BREAK
case YY_STATE_EOF(DATETIME):
#line 502 "lexer.l"
{printf("Error: unexpected file end in datetime literal at line %d", yylineno); yyterminate(); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 504 "lexer.l"
{printf("Found a identifier: %s\n", yytext);}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 506 "lexer.l"
{printf("Found a whitespace\n");}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 507 "lexer.l"
{printf("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 508 "lexer.l"
{printf("Found end of line %d\n\n", yylineno - 1);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(TIME):
#line 509 "lexer.l"
{printf("File ended\n"); yyterminate();}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 511 "lexer.l"
ECHO;
	YY_BREAK
#line 3990 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 798 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 798 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 797);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 511 "lexer.l"


void runTests() {
    DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };
    int numFiles = sizeof(files) / sizeof(files[0]);
    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        printf("Processing file: %s\n", files[i]);
        yylex();
        fclose(yyin);
        BEGIN(INITIAL);
        yylineno = 1;
    }
}

int main(int argc, char** argv) {
    if (argc > 1) {
        if (strcmp(argv[1], "--debug") == 0) {
            runTests();
            return 0;
        }
        fopen_s(&yyin, argv[1], "r");
        yylex();
    }
    else {
        printf("File not found");
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
+ Скобки и управляющие символы (Микулина)
*/
