#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 210
#define YY_END_OF_BUFFER 211
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[903] =
    {   0,
        0,    0,    0,    0,    0,    0,  211,  210,  207,  209,
      203,  179,  196,  168,  176,  197,  198,  153,  156,  204,
      157,  202,  155,  188,  205,  164,  158,  165,  201,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  210,  154,  152,  210,  199,  200,  180,  182,  184,
      177,  178,  207,    0,  209,  196,  196,    0,  195,  196,
      169,    0,    0,  160,  161,  162,  191,  175,    0,  188,
      192,    0,  188,  188,  188,    0,  185,  171,  163,  167,
      166,  170,  206,  206,  206,  206,  206,   40,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   49,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,   54,  206,   18,   19,  206,  206,  206,  132,  206,
      206,  206,  206,  206,  206,  206,  135,   25,  206,   26,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  108,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,    0,  174,  159,
      180,  181,  183,  177,    0,    0,    0,  196,    0,  196,
      196,  196,  196,  196,  189,  190,  191,  192,    0,    0,

      191,  188,  185,    0,  191,  188,  188,  188,    0,  188,
      193,    0,  185,  185,  185,    0,  172,  173,  206,  206,
      113,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  122,  206,  206,  206,  206,   87,  206,  206,
      206,  206,  206,  206,  206,  126,  206,  206,   89,  206,
      206,  206,  206,  206,  206,  206,  206,   94,  131,  206,
      206,  206,   21,  206,  206,  206,  206,  206,   23,  206,
       98,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  176,  206,  206,  206,  206,   31,  206,
      206,  206,  206,  206,  206,  206,  107,  206,  206,  206,
      206,   35,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  148,  208,    0,    0,    0,    0,
        0,  196,  196,  196,  196,  189,  189,  189,  189,    0,
      186,  190,  190,  190,  190,    0,  187,    0,  191,  191,
        0,  193,    0,  188,  191,    0,  193,    0,  193,  185,
      185,  185,  206,  206,  206,  206,  206,  206,    3,  206,
       78,  115,  206,  206,  206,  206,  206,   43,   80,  117,
        6,  206,   81,  118,  206,  206,  206,  206,    8,   46,

      206,  206,  206,  206,   84,  206,  206,  206,  206,  206,
      206,  123,   12,  206,   13,  206,  206,  206,   14,  206,
      206,  206,  206,  206,  206,  206,  206,  128,  206,  206,
      206,  206,  206,  206,   20,   57,   95,  206,  206,  206,
      206,  206,  206,   60,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  106,  143,  206,  206,  206,   34,  206,  150,  206,
      206,  206,  206,  206,  206,  206,   37,   74,  206,  206,
       38,  206,    0,    0,    0,    0,  196,  196,  196,  196,

        0,  194,  189,  189,  189,  186,  186,  186,    0,  190,
      190,  190,  187,  187,  187,    0,  191,    0,    0,  191,
        0,  193,  193,  193,  193,    0,  206,  206,   76,  206,
      206,  114,   41,    4,   42,   79,  116,    5,   44,    7,
      206,  206,  206,   83,  120,    9,  206,  206,  206,  206,
      206,  206,  206,  206,  124,   51,   88,  125,  151,  206,
      206,  206,  206,  206,  206,   91,  206,  206,  206,  206,
      206,  206,   56,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   66,  206,  206,

      206,  104,  206,  206,  206,  142,  206,  206,  206,  206,
      206,   71,  206,  206,  206,   36,  206,  110,  206,  111,
      206,  206,  206,    0,    0,    0,  194,  196,  196,    0,
      196,  196,  196,  186,  186,  186,  187,  187,  187,  191,
      193,    0,  193,  193,  193,  206,  206,  206,  206,  206,
       82,  119,  206,  206,  206,  206,  206,  206,   86,   50,
      206,   15,  206,  206,  206,   53,  206,  206,  206,  206,
      206,  206,   58,  206,  206,   22,  206,  206,  206,  206,
      206,  206,   99,  206,  100,   63,  206,  206,  206,  206,
      206,  206,  206,  103,  206,  206,  206,   30,   67,  141,

      206,  105,   32,   69,   33,  206,  206,  206,  109,  206,
       73,  206,  206,  206,  206,    0,    0,    0,    0,  196,
      196,  196,  196,  193,  193,  206,  206,    2,   77,  206,
       47,  121,   10,   48,  206,  206,   90,  206,  127,  206,
       17,  206,  129,  206,   93,  206,  206,  206,   59,  206,
      206,  149,  206,  206,  206,  206,  206,  206,  206,  102,
      138,  206,  206,  206,  206,  206,   68,  206,  206,   72,
      206,  146,  206,  206,  206,    0,    0,    0,    0,  196,
      196,  206,  206,   45,   85,  206,   52,  206,  206,   55,
      206,  206,  206,  206,  206,  206,  206,   62,  136,  206,

      206,  206,  206,   28,  206,  206,   29,  206,  206,  144,
      145,  147,  206,  206,    0,    0,  196,  206,   39,  206,
      206,  206,  130,  206,  206,   97,  134,  206,  206,  101,
      206,   27,  206,   65,  206,  206,   70,  206,  112,    0,
      196,    0,    1,   11,  206,   92,  206,  206,  206,  206,
      206,   64,  139,  206,   75,  196,    0,  206,   96,  206,
      206,  206,  137,  206,  196,  196,    0,    0,  206,  133,
      206,  206,  206,  196,    0,  206,  206,  206,  140,  196,
        0,  206,   24,   61,  196,    0,  196,  196,  196,    0,
        0,    0,   16,  196,  196,  196,    0,    0,    0,  196,

        0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    1,   21,
       22,   23,   24,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   41,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   41,   71,   72,   73,   74,   75,   76,   77,
       78,   41,   79,    1,   80,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    1,    2,    3,    4,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    1,
        1,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        7,    7,    8,    7,    7,    8,    7,    7,    7,    7,
        7,    7,    8,    7,    8,    7,    7,    7,    7,    1,
        1,    3,    1,    8,    6,    6,    6,    6,    6,    6,
        7,    7,    8,    7,    7,    8,    7,    7,    7,    7,
        7,    8,    7,    8,    7,    7,    7,    7,    1,    1
    } ;

static const flex_int16_t yy_base[913] =
    {   0,
        0,    0,   78,   79,  296,  277,  267, 7469,   83,  259,
     7469, 7469,   84,   66, 7469, 7469, 7469,  235,  231, 7469,
      224,   73,  213,  122, 7469,   72, 7469,   74, 7469,  193,
      105,  262,  333,  399,  178,   90,  114,  473,  126,  179,
      320,  253,  520,  258,  318,  570,  381,  454,  164,  459,
      561,  176,  173,  170,   81, 7469, 7469,    0, 7469,  120,
        0, 7469,  182,  177,  172,   98,  207,  225,  167,  632,
     7469,    0,  130, 7469, 7469, 7469,  635, 7469,   88,  144,
     7469,  245, 7469, 7469, 7469,  327,  691,  124, 7469, 7469,
     7469,  114,   79,  348,  411,  545,  566,  421, 7469,  662,

      722,  733,  739,  575,  649,  692,  752,  805,  776,  870,
      815,  829,  842,  876,  883,  903,  848,  923,  933,  945,
      952,  961,  976,  982,  995, 1002, 1011, 1023, 1032, 1037,
     1052, 1066, 1079, 1067, 1108, 1118, 1130, 1135, 1144, 1160,
     1171, 1193, 1202, 1186, 1209, 1177, 1218, 1224, 1251, 1260,
     1271, 1279,  409, 1290, 1284, 1326, 1300, 1331,  460, 1321,
     1332, 1401, 1406, 1388, 1418, 1403, 1427, 1433, 1457, 1451,
     1482, 1498, 1466, 1511, 1534, 1539, 1550,   98, 7469, 7469,
        0, 7469, 7469,    0,  140, 1558,  121, 1568, 1586,  529,
     1597,  536,  619,  625, 1573, 1597, 1636, 7469,  258,  168,

     1655,  196,  256,  142, 1658, 7469, 7469, 7469,  172,    0,
     7469,  266, 7469, 7469, 7469,  680, 7469, 7469, 1660, 1726,
     1731, 1736, 1741, 1746, 1751, 1756, 1761, 1803, 1810, 1817,
     1825, 1830, 1835, 1840, 1877, 1850, 1892, 1900, 1905, 1910,
     1918, 1926, 1967, 1934, 1939, 1952, 1993, 1981, 2008, 2017,
     2032, 2048, 2040, 2064, 2082, 2090, 2095, 2058, 2107, 2121,
     2129, 2142, 2159, 2149, 2154, 2178, 2183, 2209, 2216, 2221,
     2233, 2242, 2247, 2276, 2284, 2294, 2302, 2310, 2318, 2323,
     2343, 2351, 2331, 2357, 2373, 2380, 2386, 2406, 2416, 2427,
     2411, 2455, 2479, 2484, 2489, 2497, 2502, 2512, 2522, 2536,

     2563, 2572, 2577, 2597, 2605, 2610, 2590, 2615, 2639, 2652,
     2664, 2669, 2681, 2689, 2705, 2695, 2711, 2744, 2730, 2758,
     2766, 2772, 2779, 2784, 2796, 2807, 2813, 2833, 2846, 2854,
     2863, 2871, 2876, 2882, 2887,  121,  187, 2916,  221,  165,
      187,  823,  598,  365,  406, 2904, 7469, 7469, 7469,  989,
     2909, 2944, 7469, 7469, 7469, 1529, 2961,  237, 2972, 3010,
      494, 3018,  403,  477, 3037,  566, 3056,  413, 3064, 7469,
     7469, 7469, 2957, 3096, 3113, 3105, 3122, 3130, 2905, 3136,
     3055, 3146, 3155, 3160, 3171, 3185, 3202, 3197, 3207, 3212,
     3228, 3234, 3239, 3244, 3259, 3264, 3277, 3286, 3294, 3301,

     3306, 3311, 3316, 3333, 3363, 3372, 3382, 3388, 3397, 3404,
     3412, 3419, 3437, 3446, 3459, 3473, 3478, 3484, 3489, 3506,
     3501, 3536, 3511, 3544, 3562, 3569, 3574, 3579, 3599, 3604,
     3612, 3630, 3635, 3640, 3651, 3663, 3672, 3682, 1333, 3687,
     3701, 3715, 3721, 3729, 3736, 3757, 3764, 3770, 3776, 3785,
     3798, 3807, 3828, 3838, 3854, 3860, 3868, 3877, 3892, 3907,
     3918, 3926, 3931, 3950, 3957, 3967, 3941, 3983, 3999, 4019,
     4007, 4024, 4030, 4040, 4046, 4054, 4059, 4080, 4073, 4087,
     4109, 4093, 4122, 4127, 4151, 4156, 4143, 4164, 4180, 4169,
     4186, 4198,  666,  438,  480,  639,  797,  327, 4194,  915,

      970,  108, 7469, 7469, 7469, 7469, 7469, 7469, 2406, 7469,
     7469, 7469, 7469, 7469, 7469, 4190, 4212,  592,  486, 4233,
     1079, 4260, 4267, 4282, 4304,  661, 4261, 4341, 4240, 4348,
     4353, 4299, 4359, 4364, 4373, 4379, 4388, 4395, 4411, 4420,
     4426, 4431, 4437, 4444, 4449, 4461, 4467, 4478, 4498, 4491,
     4510, 4516, 4538, 4547, 4566, 4572, 4577, 4587, 4594, 4602,
     4607, 4615, 4624, 4636, 4643, 4649, 4654, 4667, 4678, 4683,
     4704, 4717, 4692, 4732, 4751, 4746, 4758, 4764, 4772, 4793,
     4819, 4798, 4825, 4807, 4831, 4840, 4857, 4866, 4887, 4892,
     4906, 4915, 4920, 4926, 4948, 4934, 4973, 4962, 4988, 5000,

     5012, 5020, 5026, 5038, 5049, 5031, 5059, 5067, 5085, 5054,
     5096, 5122, 5132, 5137, 5146, 5151, 5156, 5162, 5172, 5179,
     5184, 5205, 5214,  525,   93, 5224, 7469, 1296, 5231, 5236,
     1601,  821, 1234, 7469, 7469, 7469, 7469, 7469, 7469, 5254,
     5269,  587, 5274, 5318, 5325, 5261, 5314, 5355, 5367, 5384,
     5391, 5396, 5402, 5408, 5424, 5419, 5433, 5443, 5414, 5461,
     5474, 5480, 5490, 5495, 5501, 5508, 5513, 5529, 5537, 5542,
     5560, 5566, 5571, 5592, 5597, 5621, 5626, 5632, 5639, 5644,
     5654, 5659, 5673, 5682, 5708, 5716, 5731, 5736, 5751, 5746,
     5766, 5771, 5783, 5793, 5800, 5813, 5822, 5830, 5835, 5851,

     5856, 5862, 5882, 5887, 5894, 5903, 5909, 5915, 5923, 5934,
     5943, 5950, 5965, 5972, 5977,  640,  642,  256,  259, 1640,
     1702,  990, 1100, 5978, 5986, 6003, 5983, 6052, 6057, 6064,
     6069, 6074, 6079, 6084, 6090, 6095, 6104, 6121, 6126, 6133,
     6147, 6156, 6161, 6168, 6173, 6189, 6197, 6211, 6223, 6228,
     6253, 6244, 6258, 6264, 6270, 6282, 6291, 6254, 6320, 6332,
     6338, 6346, 6351, 6357, 6362, 6367, 6375, 6381, 6393, 6398,
     6428, 6435, 6440, 6453, 6458,  672,  754, 1151, 1245, 1776,
     6471, 6475, 6508, 6524, 6529, 6536, 6541, 6546, 6551, 6557,
     6563, 6578, 6583, 6598, 6610, 6593, 6625, 6630, 6640, 6657,

     6668, 6662, 6683, 6689, 6695, 6711, 6724, 6736, 6744, 6750,
     6758, 6763, 6774, 6779,  768, 6789, 1338, 6793, 6801, 6816,
     6826, 6832, 6842, 6859, 6865, 6873, 6889, 6895, 6901, 6906,
     6912, 6927, 6936, 6948, 6959, 6965, 6976, 6983, 6988, 1374,
     1870, 2268, 6998, 7012, 7023, 7030, 7035, 7040, 7045, 7052,
     7065, 7077, 7082, 7095, 7105, 1974,  850, 7112, 7119, 7129,
     7134, 7142, 7147, 7166,  358, 1809,   69,  773, 7159, 7171,
     7185, 7196, 7201, 2023,  879, 7209, 7223, 7234, 7250, 7244,
     7265, 7272, 7288, 7300, 7307, 7309, 2448, 1379, 1463,  905,
      309,  313, 7315, 2542, 1529, 1546,  926, 1629, 1647, 7323,

     7335, 7469, 7405, 7413, 7421, 7427, 7430, 7438, 7446, 7454,
     7458, 7460
    } ;

static const flex_int16_t yy_def[913] =
    {   0,
      902,    1,  903,  903,  904,  904,  902,  902,  902,  902,
      902,  902,  905,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  906,
      906,  906,  906,  906,   33,   33,  906,  906,  906,   33,
       33,   33,   38,   35,   33,   41,   41,  906,  906,   47,
      906,  907,  902,  902,  907,  902,  902,  908,  902,  902,
      909,  902,  902,  902,  902,  905,  905,  902,  910,  905,
      902,  911,  902,  902,  902,  902,  902,  902,  902,   24,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  906,  906,  906,  906,  906,  902,  906,

      906,  906,   47,  906,   33,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  110,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,   33,  906,  906,   38,  906,  906,   33,  906,
       33,  906,  906,   50,  906,   41,  906,  906,  906,   50,
      906,  906,   50,  906,  906,  906,  906,  907,  902,  902,
      908,  902,  902,  909,  902,  902,  910,  905,  902,  905,
      905,  905,  905,  905,  912,  902,  902,  902,  902,  902,

      902,   24,   87,  902,  902,  902,  902,  902,  902,   24,
      902,  902,  902,  902,  902,  902,  902,  902,   50,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
       50,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  902,  902,  902,  902,  902,
      902,  905,  905,  905,  905,  912,  902,  902,  902,  902,
      346,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,   24,  902,  902,  902,  902,  902,  902,
      902,  902,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,   33,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  902,  902,  902,  902,  905,  905,  905,  905,

      902,  910,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  902,  902,  902,  902,  905,  905,  902,
      905,  905,  905,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  902,  902,  902,  902,  905,
      905,  905,  905,  902,  902,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,   33,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  902,  902,  902,  902,  905,
      905,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  902,  902,  905,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  902,
      905,  902,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  905,  902,  906,  906,  906,
      906,  906,  906,  906,  905,  905,  902,  902,  906,  906,
      906,  906,  906,  905,  902,  906,  906,  906,  906,  905,
      902,  906,  906,  906,  905,  902,  905,  905,  905,  902,
      902,  902,  906,  905,  905,  905,  902,  902,  902,  905,

      902,    0,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902
    } ;

static const flex_int16_t yy_nxt[7550] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       39,   45,   46,   47,   48,   49,   50,   51,   39,   52,
       53,    8,   54,   55,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   39,   56,   57,
       59,   59,   60,   60,   63,   67,   68,   71,  868,   69,
       77,   77,   88,   89,   90,   91,   92,   72,  177,  177,

      902,   70,   70,   69,   73,  201,  201,  624,   93,  624,
       93,   93,   93,   69,   94,  177,  177,   93,  128,   93,
       93,   93,   94,  336,  182,  129,   69,   72,  130,   93,
       99,   93,   93,   93,   73,  218,   64,   79,  131,   80,
       80,  185,  336,  100,   94,  217,  183,  196,  128,   81,
       82,   81,   94,  101,   83,  129,   99,   84,  130,  205,
      205,  202,  202,   81,   85,   99,   86,   93,  131,   93,
       93,   93,   69,  100,   65,   87,  183,   99,  185,   81,
       82,   81,  101,   63,   83,  197,  197,   84,  171,  367,
      367,  180,   81,   85,  179,   86,   93,  203,   93,   93,

       93,  495,  123,   94,  493,  493,   94,  136,   67,   68,
      124,  137,   69,  202,  202,   99,  125,  138,  171,  126,
       95,  200,  127,  496,   70,   70,   68,   68,   96,  178,
       97,  495,  123,   94,   78,   98,   94,  136,  494,  494,
      124,  137,  186,  186,   99,   76,  125,  138,  126,  203,
       95,  127,   75,  496,  359,  359,   74,  204,   96,  204,
       97,   65,  205,  205,   98,   93,  902,   93,   93,   93,
      358,  363,  358,  364,  364,  359,  359,  143,  368,   62,
      368,  144,  152,  369,  369,   94,  102,  103,  104,  105,
       94,  145,  778,  106,  107,  779,   94,  108,   62,  153,

      109,  902,  154,  902,  110,  111,  112,  143,  902,  203,
      902,  144,  152,   99,  902,   94,  102,  103,  104,  105,
       94,  145,  778,  106,  107,  779,   94,  108,  153,  902,
      109,  154,   69,  110,  111,  112,   93,  902,   93,   93,
       93,  497,  155,  497,   94,  898,  156,  902,  139,  899,
       94,   93,   94,   93,   93,   93,   94,  113,  140,  206,
      902,  114,  207,   69,  141,  115,  500,  501,  142,  208,
      502,  116,  155,  902,   94,  898,  156,  866,  139,  899,
       94,  902,   94,  902,   99,  902,   94,  113,  140,  206,
      902,  114,  207,  141,  902,  115,  902,  142,  208,   99,

      902,  116,   93,  902,   93,   93,   93,  500,  501,   94,
      902,  502,  164,  902,   93,  902,   93,   93,   93,  165,
      522,  522,  166,  117,   93,   94,   93,   93,   93,  167,
      369,  369,  902,   94,  118,  902,  119,   94,  219,   94,
      120,  298,  164,  902,  121,  902,  122,  299,  902,  165,
       99,  166,  902,  117,   94,  626,  626,   93,  167,   93,
       93,   93,   99,   94,  118,  902,  119,   94,  219,  120,
      902,  298,   99,  121,  902,  122,   93,  299,   93,   93,
       93,  501,  501,  902,  310,  627,  168,  172,   94,  169,
      173,  174,   94,  902,  202,  202,  170,   94,  311,  902,

      175,  902,  132,  520,  520,   99,  519,   94,  519,  133,
      134,  520,  520,  902,  310,  135,  168,  172,   94,  169,
      173,  174,   94,  902,   99,  170,  902,   94,  311,  175,
      203,  902,  132,  902,   69,  902,   94,  902,  902,  133,
      134,   69,  716,  716,  135,  146,  342,  342,   93,  147,
       93,   93,   93,  343,  343,  902,   94,  148,  902,  149,
      902,  150,   94,  902,   93,  151,   93,   93,   93,   93,
      902,   93,   93,   93,  902,  146,  902,  220,   93,  147,
       93,   93,   93,  365,  365,  902,   94,  148,  902,  149,
      150,   94,  902,  221,  151,  157,   99,  902,  158,  176,

      902,  159,  160,   69,  643,  643,  231,  220,   94,  517,
      517,  902,   99,  161,  162,  499,  499,   99,  163,  366,
      902,  902,  902,  221,   69,  157,   99,  902,  158,  176,
       69,  159,  160,  188,  189,  902,  231,   69,   94,  902,
      501,  501,  161,  162,  627,  518,  190,  163,  190,  191,
      191,  192,  197,  197,  902,  344,  193,  776,  776,  777,
      777,  345,  198,  199,  198,   93,  902,   93,   93,   93,
      902,  194,  902,  232,  233,  902,  198,  234,  525,  525,
      624,   94,  624,  625,  625,  344,  193,   94,  200,  815,
      815,  345,  198,  199,  198,   93,  902,   93,   93,   93,

      222,  194,  902,  232,  233,  198,  209,  234,  210,  210,
      902,   94,  370,   99,  526,  371,  235,   94,  211,  212,
      211,  902,  372,  213,  902,   93,  214,   93,   93,   93,
      222,  902,  211,  215,  902,  216,   93,  902,   93,   93,
       93,  902,  370,   99,   87,  371,  235,  902,  211,  212,
      211,  372,  902,  213,  902,   93,  214,   93,   93,   93,
      902,  211,  215,  223,  216,  224,  902,  225,  226,  902,
       94,  816,  816,   99,  902,  227,  228,  229,  902,   93,
       94,   93,   93,   93,   99,  840,  840,  230,  902,  236,
      875,  875,  223,  902,  224,  902,  225,  902,  226,  902,

       94,  239,   69,   99,  227,  228,  902,  229,   93,   94,
       93,   93,   93,  240,  628,  628,  230,  902,   93,  236,
       93,   93,   93,  902,  902,  902,   69,   99,   69,  237,
      902,  239,   93,  902,   93,   93,   93,  497,  902,  497,
      498,  498,  238,  240,  902,   93,  902,   93,   93,   93,
      902,   93,  902,   93,   93,   93,   99,  722,  902,  237,
      902,  246,  902,  245,  247,  902,   99,  867,  867,  868,
      902,  248,  238,   93,  256,   93,   93,   93,  902,   93,
       99,   93,   93,   93,  902,  249,   93,  722,   93,   93,
       93,  246,  245,   99,  247,  241,  881,  881,  902,   99,

      248,  242,  250,  902,  256,  251,   93,  243,   93,   93,
       93,  252,  902,  244,  249,  902,  500,  501,  902,  253,
      502,   99,  897,  897,  254,  241,   93,   99,   93,   93,
       93,  242,  250,  902,   99,  251,   93,  243,   93,   93,
       93,  252,  244,  901,  901,  902,  902,  255,   93,  253,
       93,   93,   93,  254,   99,   93,  902,   93,   93,   93,
      258,  902,  902,  902,   93,  257,   93,   93,   93,  260,
      902,  501,  501,  902,   99,  627,  255,  259,  902,   93,
      262,   93,   93,   93,   99,   93,  261,   93,   93,   93,
      258,  500,  501,  263,  257,  502,   99,  902,   93,  260,

       93,   93,   93,   99,  902,   93,  259,   93,   93,   93,
      262,  264,   99,  902,   93,  261,   93,   93,   93,  265,
      902,  503,  902,  263,  504,  902,   93,   99,   93,   93,
       93,  505,  902,   99,  267,   93,  266,   93,   93,   93,
       93,  264,   93,   93,   93,  902,   99,  902,  268,  265,
      902,  503,  902,   99,  504,   93,  902,   93,   93,   93,
      505,  902,   99,  902,  267,  266,  269,  902,  902,   93,
      270,   93,   93,   93,   99,  902,  902,  902,  268,  271,
      272,  902,   93,   99,   93,   93,   93,  902,   99,  273,
      902,  642,   94,  642,  902,  269,  643,  643,  275,  902,

      270,  500,  501,   99,   94,  502,  902,  902,  271,  272,
      276,   93,  902,   93,   93,   93,  902,   99,  274,  273,
      902,   93,   94,   93,   93,   93,  902,  902,  275,  902,
       99,  902,  902,   93,   94,   93,   93,   93,   93,  276,
       93,   93,   93,  902,  902,  277,  902,   93,  274,   93,
       93,   93,  501,  501,  902,  279,  627,  902,  902,   99,
      902,  278,  902,   93,  280,   93,   93,   93,  902,   99,
      902,  902,  281,  282,   93,  277,   93,   93,   93,  902,
       93,   99,   93,   93,   93,  279,   99,  283,  902,   93,
      278,   93,   93,   93,  280,   99,   93,  902,   93,   93,

       93,  902,  281,  282,  902,   93,  902,   93,   93,   93,
      292,   99,   93,  284,   93,   93,   93,  283,  285,  286,
      902,   93,   99,   93,   93,   93,  902,   93,   99,   93,
       93,   93,  289,  290,  902,  902,  902,   99,  287,   69,
      292,  902,  284,  288,   99,  902,  501,  501,  285,  286,
      627,  902,  291,   99,   93,  902,   93,   93,   93,  902,
       99,  289,  290,   93,  902,   93,   93,   93,  287,   99,
      723,  902,  288,  902,   93,   99,   93,   93,   93,  293,
      902,  291,   93,  902,   93,   93,   93,   93,  295,   93,
       93,   93,  902,   93,  294,   93,   93,   93,  902,  296,

      723,   69,   99,   93,  902,   93,   93,   93,  902,  293,
      902,   99,  902,  720,  720,  300,  301,  902,  295,  902,
      297,  902,   99,  294,   93,  902,   93,   93,   93,  296,
       99,  902,  902,  902,   93,   99,   93,   93,   93,  841,
      842,   99,  902,  502,  902,  300,  301,  902,  307,  297,
      302,   99,  902,  303,  902,   94,  313,   94,  312,  902,
      314,   94,  304,   94,   94,  575,  308,  902,  305,  306,
      315,  576,   99,  316,  309,  842,  842,  307,  902,  627,
      302,  902,   99,  303,   69,   94,  313,   94,  312,  902,
      314,   94,  304,   94,   94,  575,  308,  305,  306,  902,

      315,  576,  316,  309,   93,  902,   93,   93,   93,   93,
      902,   93,   93,   93,  902,  895,  319,  902,  902,   94,
       94,   93,  902,   93,   93,   93,  317,  902,  902,  320,
       93,   94,   93,   93,   93,  902,   93,  902,   93,   93,
       93,   94,  902,  318,  902,  895,  319,  321,  902,   94,
       94,  322,   99,  902,  902,  902,  317,   99,  320,  902,
       93,   94,   93,   93,   93,  902,  323,  902,   69,   99,
      324,   94,  902,  318,  902,  902,  321,  902,   99,   94,
      322,  902,  326,  327,   99,   93,  902,   93,   93,   93,
      902,  902,   94,  902,  330,  325,  323,   94,  331,  896,

      324,   93,  902,   93,   93,   93,  902,   94,   99,   94,
      902,  902,  326,  327,   93,  902,   93,   93,   93,  902,
      902,   94,  902,  328,  330,  325,  902,   94,  331,  896,
      500,  501,  902,   99,  502,  329,   94,   93,  332,   93,
       93,   93,   93,  902,   93,   93,   93,  500,  501,   99,
      902,  502,  328,   93,  333,   93,   93,   93,  902,  189,
      189,  510,   99,  902,  511,  329,  334,  902,  332,  188,
      189,  512,  337,   69,  337,  338,  338,  339,  902,  902,
      335,  902,  340,  333,  902,   99,  902,  189,  189,  902,
       99,  510,  193,  902,  511,  902,  334,  341,  188,  189,

      512,   99,   69,  902,  902,  347,   69,  194,  348,  335,
      340,  190,  340,  190,  352,  349,  192,  350,  721,  721,
      902,  193,  193,  902,  902,  341,  351,  341,  902,  353,
      501,  501,  354,  902,  627,  347,  194,  194,  348,  355,
      340,  356,  902,  902,  349,   69,  350,  902,  501,  501,
      357,  193,  627,  197,  197,  341,  902,  780,  780,  353,
      902,  902,  354,  198,  199,  198,  194,  902,  355,  902,
      356,  902,  360,  360,  902,  365,  365,  198,  902,  902,
      902,  902,   81,  361,   81,   81,  902,   81,   94,  200,
      902,  373,   94,  198,  199,  198,   81,  902,  902,   81,

      902,  374,  902,  902,  902,  902,  198,   69,  362,  902,
      902,  366,   81,  361,   81,   81,  902,   81,   94,  781,
      781,  373,   94,  902,  902,   81,  902,  902,   81,   93,
      374,   93,   93,   93,   93,  902,   93,   93,   93,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,   93,
      375,   93,   93,   93,   93,  376,   93,   93,   93,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,  378,
      902,  377,  902,  902,  379,  380,  902,   99,  902,  902,
      375,   69,   99,  902,  902,  376,  902,   99,  902,  382,
      902,  381,   99,  817,  817,  902,  902,   99,  902,  378,

      902,  377,   99,  902,  379,  380,   93,   99,   93,   93,
       93,  902,   99,   93,   69,   93,   93,   93,  902,  382,
       93,  381,   93,   93,   93,  902,  874,  874,   93,  383,
       93,   93,   93,   93,  902,   93,   93,   93,   93,  902,
       93,   93,   93,   93,  902,   93,   93,   93,  384,  386,
      902,  902,  902,   93,   99,   93,   93,   93,  902,  383,
      385,   99,  902,  902,  902,  902,  389,  902,   99,  902,
      388,  841,  842,  387,  902,  502,   99,  902,  384,  386,
       93,   99,   93,   93,   93,  902,   99,  856,  856,  385,
      902,   99,  902,  391,  902,   93,  389,   93,   93,   93,

      388,   99,  387,   93,  902,   93,   93,   93,   93,  902,
       93,   93,   93,   93,  902,   93,   93,   93,  390,  902,
      902,   93,  391,   93,   93,   93,  902,  902,   99,   93,
      393,   93,   93,   93,  392,  902,  902,   93,  394,   93,
       93,   93,   93,   99,   93,   93,   93,  390,  902,  902,
      902,   99,  395,  396,  902,   93,   99,   93,   93,   93,
      393,   99,  902,  392,  398,  902,  397,  902,  394,   99,
       93,  902,   93,   93,   93,  400,  902,   99,  401,   69,
      902,  395,  396,  902,   93,   99,   93,   93,   93,  402,
       99,  865,  865,  866,  398,  397,   93,  399,   93,   93,

       93,  902,  902,   99,  400,  902,  902,  902,  401,  902,
      902,   93,  404,   93,   93,   93,  902,  902,   99,  402,
       93,  902,   93,   93,   93,  902,  902,  399,   69,  902,
      403,  902,   99,  902,  902,   93,  405,   93,   93,   93,
      880,  880,  404,   93,   99,   93,   93,   93,  902,  406,
      902,   93,  407,   93,   93,   93,  408,  902,  902,   99,
      403,   93,  902,   93,   93,   93,  405,   93,   99,   93,
       93,   93,  902,  902,  902,  902,  409,  902,  902,  406,
      902,  902,  407,   99,  902,   93,  408,   93,   93,   93,
      414,   99,  410,   93,  902,   93,   93,   93,   93,   99,

       93,   93,   93,  902,  902,  902,  409,  411,  902,   99,
       93,  902,   93,   93,   93,   99,  902,  902,  902,  902,
      414,  412,  410,  413,   93,  902,   93,   93,   93,  902,
      902,  902,   93,   99,   93,   93,   93,  411,  902,  902,
      902,   99,  902,  415,  902,   93,   99,   93,   93,   93,
      902,  412,   93,  413,   93,   93,   93,   93,   99,   93,
       93,   93,   93,  416,   93,   93,   93,  417,  902,  902,
      902,  902,   99,  415,  902,  902,  902,  902,  421,  418,
       99,   93,  902,   93,   93,   93,   93,  902,   93,   93,
       93,  420,  416,   99,  902,  902,  902,  417,  902,  902,

       99,  902,  419,  902,  902,   99,  902,  902,  421,  418,
       99,  422,   93,  902,   93,   93,   93,  902,  902,   93,
      420,   93,   93,   93,   93,  902,   93,   93,   93,   99,
      902,  419,  902,  902,   99,  423,   93,  902,   93,   93,
       93,  422,  902,  902,  902,   93,  426,   93,   93,   93,
       93,  902,   93,   93,   93,  902,  902,  902,  902,  424,
       99,  902,  902,  425,  902,  423,  902,   99,  902,  842,
      842,  902,   99,  627,  429,  902,  426,  427,  902,   93,
      428,   93,   93,   93,   99,  857,  857,   93,  424,   93,
       93,   93,  425,   99,  902,  902,  902,   93,   99,   93,

       93,   93,  902,  902,  429,   93,  427,   93,   93,   93,
      428,  430,  432,   93,  431,   93,   93,   93,  902,  902,
      902,   93,  433,   93,   93,   93,   93,   99,   93,   93,
       93,  902,  902,  902,   93,   99,   93,   93,   93,  902,
      434,  430,  432,  902,  431,   99,   93,  902,   93,   93,
       93,  435,  433,   99,   93,  902,   93,   93,   93,  902,
       93,   99,   93,   93,   93,  902,  902,  902,  902,   99,
      434,  902,  902,  436,   99,  438,   93,  902,   93,   93,
       93,  435,   99,   93,  902,   93,   93,   93,  902,   93,
      437,   93,   93,   93,   99,  902,  902,  440,  902,  902,

      439,  902,   99,  436,  438,  902,  902,  902,   99,   93,
      902,   93,   93,   93,  442,  441,  902,  902,  902,   93,
      437,   93,   93,   93,   99,  902,  902,  440,  902,  439,
       93,   99,   93,   93,   93,  902,  902,   99,  634,   94,
      902,  635,  445,  446,  442,  441,  902,  443,  636,  447,
      902,  902,   94,   69,  902,  902,  902,   99,   93,  902,
       93,   93,   93,  902,  902,  894,  894,   99,  634,   94,
      444,  635,  445,  446,  902,  902,  443,  636,   99,  447,
      902,   94,   93,  448,   93,   93,   93,   93,  902,   93,
       93,   93,   93,  902,   93,   93,   93,  902,  902,  444,

       93,  902,   93,   93,   93,   93,   99,   93,   93,   93,
      902,  902,  902,  448,  902,   93,  450,   93,   93,   93,
      449,  902,  902,  902,  451,   93,  453,   93,   93,   93,
       99,  902,  902,  902,  902,   99,  902,  902,  452,   93,
       99,   93,   93,   93,  902,  454,  450,   69,   99,  449,
      902,  902,  902,   99,  451,  902,  453,  455,  902,  900,
      900,  456,  902,   99,  902,  457,   93,  452,   93,   93,
       93,  458,  902,   99,  454,   93,  902,   93,   93,   93,
       93,  902,   93,   93,   93,  902,  455,   99,  902,  902,
      902,  456,  902,   93,  457,   93,   93,   93,  902,  460,

       93,  458,   93,   93,   93,  459,  902,  902,   93,  461,
       93,   93,   93,   93,   99,   93,   93,   93,   93,  902,
       93,   93,   93,   99,  902,  902,  902,  902,   99,  460,
      902,  902,  902,  465,  459,  462,  902,  902,  902,  461,
      902,   99,   93,  466,   93,   93,   93,  902,   99,  463,
      902,  902,  902,  902,  464,   93,   99,   93,   93,   93,
      902,   99,  465,  902,  902,  462,   99,   93,  902,   93,
       93,   93,   93,  466,   93,   93,   93,  902,  463,  467,
      902,  902,  902,  464,   93,  902,   93,   93,   93,  902,
       99,  902,   93,  468,   93,   93,   93,  902,   93,  470,

       93,   93,   93,   99,  902,  469,  902,  902,   93,  467,
       93,   93,   93,  902,   93,   99,   93,   93,   93,  902,
       99,  902,  468,  902,  471,  902,  902,  474,  472,  470,
      902,  902,   99,   93,  469,   93,   93,   93,  902,  475,
       99,  902,  902,  902,  473,  902,   99,   93,  902,   93,
       93,   93,  902,  471,  902,  902,   99,  474,  472,  902,
      902,   93,   99,   93,   93,   93,  902,  477,  475,   93,
      476,   93,   93,   93,  473,   93,  902,   93,   93,   93,
      902,   99,   93,  902,   93,   93,   93,   93,  902,   93,
       93,   93,  902,  902,  479,   99,  478,  477,  480,   93,

      476,   93,   93,   93,  902,  902,  902,  481,  902,   99,
       93,  902,   93,   93,   93,  902,   93,   99,   93,   93,
       93,  902,  902,   99,  479,  902,  478,  482,  480,  902,
       99,  902,  902,  483,  902,   99,   93,  481,   93,   93,
       93,  902,  902,  902,  902,  484,  902,   99,  902,   93,
      485,   93,   93,   93,  902,  902,  482,   93,   99,   93,
       93,   93,  902,  483,   99,  486,   93,  902,   93,   93,
       93,  902,  902,  487,   93,  484,   93,   93,   93,   93,
      485,   93,   93,   93,   99,   93,  902,   93,   93,   93,
       93,  488,   93,   93,   93,  486,  902,   99,  489,  490,

      902,  902,  902,  487,  902,   99,  902,  491,   93,  902,
       93,   93,   93,  902,   99,  902,  902,  189,  189,  902,
      902,  488,   99,  902,  902,  492,  902,   99,  489,  490,
      337,  902,  337,   99,  902,  339,  347,  491,   99,  348,
      340,  506,  902,  902,  507,  902,  349,  902,  350,  902,
      902,  508,  902,  509,  492,  341,   99,  351,  902,  902,
       93,  352,   93,   93,   93,  902,  347,  902,  902,  348,
      340,  506,  902,  902,  507,  349,  353,  350,  352,  354,
      508,  527,  509,  902,  902,  341,  355,  902,  356,  517,
      517,  902,  902,  513,  902,  902,  514,  357,  902,  198,

      902,  198,  902,  515,  902,  516,  353,  902,   99,  354,
      902,  527,  902,  198,  357,  355,  902,  356,  902,  902,
      902,  902,  902,  513,  902,  518,  514,  360,  360,  198,
      902,  198,  515,  902,  516,  360,  360,   81,  361,   81,
      902,  902,  198,  902,  902,  211,  521,  211,  902,  902,
      902,   81,  902,  902,  365,  365,  902,  902,   93,  211,
       93,   93,   93,  362,   81,  902,   81,   81,  361,   81,
      902,  362,  902,  523,  523,  211,  521,  211,   81,  902,
       81,  525,  525,  211,  212,  211,  902,  902,  211,  902,
      366,  211,  902,  211,   81,  902,   81,  211,  902,   93,

      902,   93,   93,   93,  902,  211,   99,   81,   93,  524,
       93,   93,   93,  211,  212,  211,   93,  526,   93,   93,
       93,  211,  902,  211,  528,   93,  211,   93,   93,   93,
      902,  902,  902,   93,  211,   93,   93,   93,  902,   93,
      530,   93,   93,   93,  902,  902,  902,   99,  902,   93,
      531,   93,   93,   93,  528,  529,   99,  902,   93,  532,
       93,   93,   93,   93,   99,   93,   93,   93,  902,  902,
      530,  533,  902,   99,   93,  902,   93,   93,   93,  902,
      531,   99,  902,  902,  529,  902,  534,   99,   93,  532,
       93,   93,   93,  902,  902,  535,  902,   99,  902,  536,

       93,  533,   93,   93,   93,   93,   99,   93,   93,   93,
       93,   99,   93,   93,   93,   93,  534,   93,   93,   93,
      902,  902,   99,  902,  902,  535,  537,  902,  902,  536,
      538,   93,  902,   93,   93,   93,   99,   93,  902,   93,
       93,   93,   93,  902,   93,   93,   93,   93,   99,   93,
       93,   93,  902,   99,  902,  537,  902,  902,   99,  902,
      538,  902,   93,   99,   93,   93,   93,   93,  902,   93,
       93,   93,  902,  902,  902,  902,  539,  902,  902,   99,
       93,  902,   93,   93,   93,   99,  902,  902,  902,   93,
       99,   93,   93,   93,  902,   99,  541,   93,  902,   93,

       93,   93,  540,  902,   93,  539,   93,   93,   93,   93,
       99,   93,   93,   93,   93,   99,   93,   93,   93,   93,
      542,   93,   93,   93,  902,  902,  541,  543,   99,  902,
      902,  540,  902,  902,  544,  902,   93,   99,   93,   93,
       93,  902,  902,  902,  902,   99,  546,  902,  902,  542,
      902,  902,   99,  902,  545,  902,  543,   99,  902,  902,
      902,  902,   99,  902,  544,  902,   93,   99,   93,   93,
       93,  547,  902,  902,  902,   93,  546,   93,   93,   93,
      902,  902,  902,  545,   99,   93,  902,   93,   93,   93,
      902,   93,  902,   93,   93,   93,  902,  902,  902,  902,

       93,  547,   93,   93,   93,  902,  549,   93,  548,   93,
       93,   93,  902,  902,   99,   93,  902,   93,   93,   93,
      902,  902,   93,   99,   93,   93,   93,  551,  902,  902,
      552,  902,  550,   99,  902,  902,  549,  902,  548,   99,
       93,  902,   93,   93,   93,  902,  902,  553,   99,   93,
      902,   93,   93,   93,  902,   99,  902,  551,  902,  902,
      552,  550,   93,   99,   93,   93,   93,  902,  902,  554,
       99,  902,  902,  902,  902,  555,   93,  553,   93,   93,
       93,   93,  902,   93,   93,   93,  902,   93,   99,   93,
       93,   93,   93,  902,   93,   93,   93,   99,  902,  554,

      902,  556,  902,  902,   93,  555,   93,   93,   93,   93,
       99,   93,   93,   93,   93,  902,   93,   93,   93,  557,
      902,  902,  902,  902,   99,  902,  902,  558,  902,   99,
      902,  556,  902,  902,  559,   99,  560,  902,  902,   93,
       99,   93,   93,   93,  902,  902,  902,   93,  557,   93,
       93,   93,   99,  902,  562,  902,  558,   99,  902,  902,
      902,  902,   99,  902,  559,   93,  560,   93,   93,   93,
      902,  902,   93,  561,   93,   93,   93,   93,  902,   93,
       93,   93,   93,  562,   93,   93,   93,   99,  902,  902,
      902,  902,  563,  565,  902,   99,  902,  902,  564,  566,

      902,  902,   93,  561,   93,   93,   93,   93,  902,   93,
       93,   93,  902,   99,  902,   93,  902,   93,   93,   93,
       99,  563,  902,  565,  902,   99,  902,  902,  564,  566,
       99,  902,  568,   93,  567,   93,   93,   93,   93,  902,
       93,   93,   93,   93,  902,   93,   93,   93,  902,  902,
       99,  902,  902,  569,   93,   99,   93,   93,   93,  902,
      902,  902,  568,   99,  567,  571,   93,  902,   93,   93,
       93,  570,  902,  902,  902,   93,  572,   93,   93,   93,
      902,   99,  569,  573,  902,   93,   99,   93,   93,   93,
       93,   99,   93,   93,   93,  571,  902,  902,  902,  902,

      570,  902,   99,  902,   93,  572,   93,   93,   93,  902,
      902,  902,  573,  902,   99,  902,  902,  574,   93,  902,
       93,   93,   93,   99,   93,  578,   93,   93,   93,  577,
      902,  902,   93,   99,   93,   93,   93,  902,   99,   93,
      902,   93,   93,   93,  902,  902,  902,  574,  902,  902,
      902,  902,   99,  902,  902,  578,  902,  579,  577,  580,
       93,  902,   93,   93,   93,  902,   99,   93,  581,   93,
       93,   93,   99,   93,  902,   93,   93,   93,  902,   93,
       99,   93,   93,   93,  902,  902,  579,   99,   93,  580,
       93,   93,   93,  902,  582,  902,  584,  902,  581,  902,

      585,   93,  902,   93,   93,   93,  902,  902,   99,  583,
       93,  902,   93,   93,   93,   99,  902,  902,  902,  902,
      902,   99,  902,  586,  582,  902,  584,   99,  902,  902,
      585,   93,  902,   93,   93,   93,   99,  902,  583,  902,
      587,   93,  588,   93,   93,   93,  902,  902,  589,   99,
      902,  902,  902,  586,  902,  902,  902,   93,   99,   93,
       93,   93,  902,   93,  590,   93,   93,   93,  902,  587,
      591,   93,  588,   93,   93,   93,  902,  589,  592,   99,
       93,  902,   93,   93,   93,  902,  902,  902,  593,   99,
      902,  902,  902,  902,  590,   93,  594,   93,   93,   93,

      591,  902,  902,  902,  902,   99,  902,  902,  592,  595,
       93,   99,   93,   93,   93,  902,  902,  902,  593,   99,
      596,   93,  902,   93,   93,   93,  594,  902,   99,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,  595,
      902,  902,  902,   99,   93,  597,   93,   93,   93,  902,
      596,  902,  902,   93,  598,   93,   93,   93,   99,  902,
       93,  902,   93,   93,   93,  902,  902,  600,  902,   99,
       93,  599,   93,   93,   93,  597,  902,   99,  902,  604,
      902,  902,   99,  902,  598,  602,   93,  902,   93,   93,
       93,  601,   99,  603,  902,  902,  902,  600,  902,  902,

      599,   99,   93,  902,   93,   93,   93,  902,   99,  604,
       93,  605,   93,   93,   93,  602,  902,  902,   99,  902,
      601,  902,   93,  603,   93,   93,   93,   93,  902,   93,
       93,   93,  902,   93,   99,   93,   93,   93,  902,  608,
      902,  605,  606,   93,  902,   93,   93,   93,  902,   93,
       99,   93,   93,   93,  607,  902,  902,   93,   99,   93,
       93,   93,   93,  902,   93,   93,   93,  902,  902,  608,
       99,  606,  610,  902,  902,   99,   93,  609,   93,   93,
       93,   99,  902,   93,  607,   93,   93,   93,  902,  611,
       93,   99,   93,   93,   93,  902,   93,   99,   93,   93,

       93,  902,  610,  902,  902,   99,  902,  609,  902,  902,
       99,  613,   93,  902,   93,   93,   93,  902,  902,  611,
      902,  615,  902,  902,   99,   93,  612,   93,   93,   93,
       93,   99,   93,   93,   93,  902,  902,  902,   99,  902,
      902,  613,  902,  902,   99,  902,   93,  614,   93,   93,
       93,  615,  616,  902,   93,  612,   93,   93,   93,   93,
       99,   93,   93,   93,  902,  902,  902,   93,  617,   93,
       93,   93,   93,   99,   93,   93,   93,  614,   99,  902,
      619,  618,  616,   93,  902,   93,   93,   93,  902,   93,
      902,   93,   93,   93,   99,  629,  630,  617,  902,  502,

      902,   93,   99,   93,   93,   93,  621,   99,  620,  902,
      619,  618,  902,  631,  622,   99,  902,  902,  632,  902,
       99,  902,  637,  902,  902,  638,  623,  902,  902,  517,
      517,   99,  639,  633,  902,  902,  621,   99,  620,  198,
      902,  198,  902,   93,  622,   93,   93,   93,  632,   99,
      640,  640,  637,  198,  902,  638,  623,  902,  902,  902,
       81,  639,   81,  633,   93,  518,   93,   93,   93,  198,
      902,  198,  902,  902,   81,  902,  902,  644,  644,  902,
      902,  902,  198,  902,  523,  523,  641,  211,  521,  211,
       81,   99,   81,  902,  211,  212,  211,  902,  646,  523,

      523,  211,   93,   81,   93,   93,   93,  902,  211,  211,
      212,  211,   99,  645,  902,  902,  902,  211,  521,  211,
      524,  525,  525,  211,  211,  212,  211,  902,  646,  902,
      211,  211,  902,  211,  902,  524,  902,  211,  902,  211,
      212,  211,  902,  902,   93,  211,   93,   93,   93,  902,
       99,   93,  211,   93,   93,   93,   93,  526,   93,   93,
       93,  211,   93,  211,   93,   93,   93,   93,  902,   93,
       93,   93,  902,  902,  211,  902,   93,  649,   93,   93,
       93,  902,   93,  647,   93,   93,   93,  902,  902,  902,
      648,   93,   99,   93,   93,   93,  902,  902,   93,   99,

       93,   93,   93,  902,   99,  902,  902,  649,  902,  902,
       99,  902,  647,  902,   93,   99,   93,   93,   93,  648,
      902,  902,  902,   93,   99,   93,   93,   93,  902,   93,
       99,   93,   93,   93,   93,  902,   93,   93,   93,   99,
       93,  902,   93,   93,   93,  902,   99,   93,  902,   93,
       93,   93,   93,  902,   93,   93,   93,  902,  902,  651,
      902,  902,   99,  650,   93,  902,   93,   93,   93,  902,
       93,   99,   93,   93,   93,  902,  902,   99,  902,  902,
      652,   93,   99,   93,   93,   93,  902,  902,   99,  651,
      902,  902,  902,  650,   93,   99,   93,   93,   93,  902,

       99,   93,  654,   93,   93,   93,  902,  902,  653,  652,
      902,  902,   99,   93,  902,   93,   93,   93,   99,   93,
      902,   93,   93,   93,  902,  902,  656,  902,  902,   99,
      902,  902,  654,  902,  657,  902,  902,  653,  902,  655,
      902,   93,   99,   93,   93,   93,  902,  902,  902,   99,
       93,  902,   93,   93,   93,  902,  656,  902,  902,  658,
      902,   99,  902,  902,  657,  902,  659,   99,  655,   93,
      902,   93,   93,   93,  902,   93,  660,   93,   93,   93,
       93,  902,   93,   93,   93,  902,  902,  902,  658,   99,
       93,  902,   93,   93,   93,  902,  659,   93,   99,   93,

       93,   93,  902,  902,  902,   93,  660,   93,   93,   93,
       93,  902,   93,   93,   93,  902,  902,   99,   93,  902,
       93,   93,   93,   99,  902,  902,  902,   93,   99,   93,
       93,   93,  902,  902,  662,  902,  902,  661,   99,   93,
      902,   93,   93,   93,  902,   99,   93,  663,   93,   93,
       93,  902,   93,   99,   93,   93,   93,   93,   99,   93,
       93,   93,  902,  664,  662,  902,   99,  661,  902,  902,
       93,  665,   93,   93,   93,   99,  902,  663,  666,  902,
      902,   93,  667,   93,   93,   93,   93,   99,   93,   93,
       93,  902,  902,  664,   99,   93,  902,   93,   93,   93,

       99,  665,  902,  668,  902,   99,  902,   93,  666,   93,
       93,   93,  667,  902,  902,  670,  902,  902,   99,  902,
       93,  669,   93,   93,   93,  902,  902,  902,  902,   99,
      902,  902,  671,  668,   99,   93,  902,   93,   93,   93,
      902,  902,  902,   99,  902,  670,  672,  902,  902,   93,
      669,   93,   93,   93,   93,   99,   93,   93,   93,  902,
      673,   93,  671,   93,   93,   93,  902,   93,   99,   93,
       93,   93,  902,  902,  902,   93,  672,   93,   93,   93,
      902,  902,  902,   99,  902,  902,  676,  902,  674,  902,
      673,  675,  902,  902,  902,  902,   93,   99,   93,   93,

       93,   93,   99,   93,   93,   93,  677,  902,  902,   99,
       93,  678,   93,   93,   93,   99,  676,  902,  674,  902,
      675,  902,   93,   99,   93,   93,   93,  902,   93,  681,
       93,   93,   93,  902,   93,  677,   93,   93,   93,  679,
      902,  678,  902,   93,   99,   93,   93,   93,  902,   99,
      683,  902,  902,  682,  902,  902,  680,  902,   99,  681,
       93,  902,   93,   93,   93,  902,  902,  902,  679,   93,
       99,   93,   93,   93,  684,  902,   99,  685,  902,  683,
      902,  902,   99,  682,  902,  686,  680,  902,  902,  902,
       93,   99,   93,   93,   93,   93,  902,   93,   93,   93,

      902,  902,  902,  684,  687,  902,  902,  685,   99,   93,
      902,   93,   93,   93,  902,  686,  689,   99,   93,  688,
       93,   93,   93,   93,  902,   93,   93,   93,  902,   93,
      690,   93,   93,   93,  687,  902,  902,   93,   99,   93,
       93,   93,  902,   99,  902,  902,  689,  902,  902,  688,
      902,   93,  693,   93,   93,   93,  902,   99,  691,  902,
      690,  692,  695,  902,  902,   93,   99,   93,   93,   93,
      902,   99,  902,  902,  694,  902,   93,   99,   93,   93,
       93,  902,  693,  902,  902,   99,  902,  691,  902,  902,
      692,   93,  695,   93,   93,   93,  902,  902,  902,   99,

      902,  902,  902,   93,  694,   93,   93,   93,  902,  902,
      696,  902,  902,   99,  902,   93,  697,   93,   93,   93,
      902,  902,  902,   93,   99,   93,   93,   93,  698,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,   99,
      696,   93,  902,   93,   93,   93,  697,  902,  902,  699,
      902,   99,   93,  902,   93,   93,   93,   93,  698,   93,
       93,   93,   93,   99,   93,   93,   93,  902,  902,  700,
       93,   99,   93,   93,   93,  902,  702,   99,  902,  699,
      902,  902,   99,  902,  701,  902,  902,  703,   93,   99,
       93,   93,   93,  704,  902,  902,  902,  706,  700,   93,

       99,   93,   93,   93,  902,   99,  702,  902,  902,  902,
       99,  902,  902,  701,  902,  705,  902,  703,   99,  902,
      902,  902,  902,  704,  902,   93,  706,   93,   93,   93,
      902,  902,  902,  902,  707,   93,   99,   93,   93,   93,
       93,  902,   93,   93,   93,  705,  902,   99,  902,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,   93,
      902,   93,   93,   93,  707,   93,  709,   93,   93,   93,
      902,  902,  902,   99,  708,   93,  710,   93,   93,   93,
      902,  902,   93,   99,   93,   93,   93,   93,   99,   93,
       93,   93,  902,  902,  902,  902,  709,   99,  902,  711,

      902,  902,   99,  708,  902,  902,  710,   99,   93,  712,
       93,   93,   93,   99,  902,  902,  713,   93,  902,   93,
       93,   93,  902,   99,  902,  630,  630,  902,  711,  627,
       99,  902,  629,  630,  902,   99,  502,  630,  630,  712,
      902,  627,  902,  717,  902,  902,  713,  902,  718,  902,
      714,  902,  715,  902,  902,  632,   99,  902,  902,  902,
      718,  902,  902,  719,   93,   99,   93,   93,   93,  902,
      633,  640,  640,  902,  902,  719,  902,  902,  718,  714,
      902,   81,  715,   81,  902,  632,  640,  640,  726,  902,
      718,  724,  724,  719,  902,   81,  211,  902,  211,  902,

      633,  211,  902,  211,  902,  719,  902,  641,  902,  902,
      211,   81,   99,   81,  902,  211,  902,   93,  726,   93,
       93,   93,  641,  902,   81,  902,  211,  725,  211,  902,
      902,  211,  902,  211,  902,  644,  644,  902,  902,  211,
      902,  902,  644,  644,  211,  211,  521,  211,  902,  902,
      902,  902,  211,  521,  211,  902,  727,  902,   93,  211,
       93,   93,   93,  902,  902,   99,  211,  902,  902,  902,
       93,  645,   93,   93,   93,  211,  521,  211,  645,  902,
      902,  902,  211,  521,  211,  727,  902,   93,  211,   93,
       93,   93,  902,  728,   93,  211,   93,   93,   93,   93,

      902,   93,   93,   93,  729,   93,   99,   93,   93,   93,
      902,   93,  902,   93,   93,   93,  902,   93,   99,   93,
       93,   93,   93,  728,   93,   93,   93,   93,  730,   93,
       93,   93,  902,  902,  729,   99,   93,  902,   93,   93,
       93,  902,   99,  732,  902,  731,   93,   99,   93,   93,
       93,  902,  733,   99,  902,  902,  902,  730,  902,   99,
      902,  902,  734,  902,   93,   99,   93,   93,   93,  736,
       99,  902,  902,  732,  731,   99,  735,   93,  902,   93,
       93,   93,  733,   93,   99,   93,   93,   93,  902,  902,
      902,  734,  902,   93,   99,   93,   93,   93,   93,  736,

       93,   93,   93,  902,   93,  735,   93,   93,   93,  902,
      902,   93,   99,   93,   93,   93,   93,  902,   93,   93,
       93,  902,  737,  739,  902,   99,  902,  902,  738,  902,
      902,   99,   93,  902,   93,   93,   93,  902,  740,  902,
       93,   99,   93,   93,   93,   93,   99,   93,   93,   93,
      902,  737,   99,  739,  902,  741,  902,  742,  738,   99,
      902,  902,  902,   93,   99,   93,   93,   93,  740,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,  743,
       99,  902,  902,  902,  741,  744,  902,  742,   99,  902,
      746,  902,  902,   99,  902,   93,  902,   93,   93,   93,

       93,  745,   93,   93,   93,  902,  902,  902,  743,  902,
      902,   99,  902,  902,  744,  902,  902,   99,  902,  902,
      746,  902,   99,  747,   93,  748,   93,   93,   93,   93,
      745,   93,   93,   93,  902,   93,  902,   93,   93,   93,
      902,  902,   93,   99,   93,   93,   93,   93,   99,   93,
       93,   93,  902,  747,  902,  748,  750,   93,  902,   93,
       93,   93,   93,  902,   93,   93,   93,  902,  749,  902,
      902,  751,   99,  902,  752,  902,   93,   99,   93,   93,
       93,  902,  753,   99,  902,   93,  750,   93,   93,   93,
       99,  902,  902,  902,  902,   99,  902,  749,  902,  902,

      754,  751,  902,  902,  752,   99,  902,  902,  902,  902,
       99,   93,  753,   93,   93,   93,  902,  902,  902,   93,
      755,   93,   93,   93,   99,  902,  902,  902,  902,  754,
      902,  902,  756,   99,   93,  902,   93,   93,   93,   93,
      902,   93,   93,   93,  902,  902,  902,  902,  902,   93,
      755,   93,   93,   93,   93,  757,   93,   93,   93,   99,
      902,  902,  756,  758,  902,  902,  902,   99,  902,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,  902,
      902,  760,   99,  902,  902,  757,   93,   99,   93,   93,
       93,  902,  759,  758,  761,  902,   93,   99,   93,   93,

       93,  902,   99,   93,  902,   93,   93,   93,  902,  902,
      902,  760,  902,  902,  762,  902,   93,   99,   93,   93,
       93,  759,   99,  902,  761,   93,  763,   93,   93,   93,
      902,  902,  902,   93,   99,   93,   93,   93,   93,  902,
       93,   93,   93,  762,   99,  764,  902,  902,  765,  902,
      902,   99,  902,  766,   93,  763,   93,   93,   93,   93,
      902,   93,   93,   93,   99,   93,  902,   93,   93,   93,
      902,  902,  902,   99,  764,  902,  902,  902,  765,  902,
      902,   99,  902,  766,  902,   93,   99,   93,   93,   93,
       93,  902,   93,   93,   93,  902,  902,   93,  767,   93,

       93,   93,   99,  902,  902,  902,   93,   99,   93,   93,
       93,  902,   93,   99,   93,   93,   93,  902,   93,  902,
       93,   93,   93,  902,  902,  902,   93,  767,   93,   93,
       93,  902,  902,   99,  902,  769,  902,   93,   99,   93,
       93,   93,  902,  902,  902,   99,   93,  768,   93,   93,
       93,  902,  902,   93,   99,   93,   93,   93,  770,  902,
       99,  902,  771,  902,  902,  769,   99,  902,   93,  902,
       93,   93,   93,  902,   99,   93,  768,   93,   93,   93,
       93,  902,   93,   93,   93,   99,   93,  770,   93,   93,
       93,  902,  771,  772,   99,  724,  724,  902,  902,  902,

      774,   99,  773,  724,  724,  211,   93,  211,   93,   93,
       93,  902,  902,  211,  775,  211,   99,  902,  902,  211,
      902,  783,  772,   99,  902,  902,  902,  211,   99,  902,
      774,  725,  773,  902,   99,  211,  902,  211,  782,  725,
      902,  902,  902,  211,  775,  211,  902,  902,  211,  902,
      902,  783,  902,  902,   99,   93,  211,   93,   93,   93,
       93,  902,   93,   93,   93,  902,  902,   93,  782,   93,
       93,   93,   93,  902,   93,   93,   93,   93,  902,   93,
       93,   93,   93,  902,   93,   93,   93,   93,  902,   93,
       93,   93,  784,   93,  902,   93,   93,   93,   93,  902,

       93,   93,   93,   99,  902,  902,  902,   93,   99,   93,
       93,   93,  902,  902,  902,   99,  902,  902,  785,  786,
       99,  902,  784,  902,   93,   99,   93,   93,   93,   93,
       99,   93,   93,   93,  902,   99,   93,  902,   93,   93,
       93,   99,  902,  902,  902,  902,   99,  902,  785,  786,
       93,  902,   93,   93,   93,   99,  902,  788,  787,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,  902,
      902,   93,   99,   93,   93,   93,   93,   99,   93,   93,
       93,  902,  902,  902,   99,  902,  902,  788,  787,  902,
      902,  902,   93,  789,   93,   93,   93,  902,   99,  902,

       93,  902,   93,   93,   93,  902,  902,   99,  902,  902,
      790,  902,   99,  902,   93,  791,   93,   93,   93,   99,
      902,  902,  902,  789,   99,  792,   93,  902,   93,   93,
       93,   93,  902,   93,   93,   93,  902,  902,  902,  790,
       99,  902,  902,  902,  902,  791,  902,   93,   99,   93,
       93,   93,  793,  902,  794,  792,   93,  902,   93,   93,
       93,   93,   99,   93,   93,   93,  902,   93,  902,   93,
       93,   93,  902,   93,   99,   93,   93,   93,  801,   99,
      902,  793,  802,  902,  794,   93,   94,   93,   93,   93,
      795,  902,   94,  902,   93,   99,   93,   93,   93,  796,

      902,  902,  902,  902,   99,  797,  902,  902,  801,   99,
      902,  798,  802,  902,  902,   99,   94,  799,  800,  902,
      795,   99,   94,   93,  902,   93,   93,   93,  796,  902,
      902,  902,  902,   99,  797,   93,  902,   93,   93,   93,
      798,   93,   99,   93,   93,   93,  902,  799,  800,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,  902,
       93,  803,   93,   93,   93,   93,  902,   93,   93,   93,
       93,   99,   93,   93,   93,  902,  902,  902,   93,  805,
       93,   93,   93,   99,   93,  806,   93,   93,   93,   99,
      803,  808,  902,  902,  804,  902,   93,   99,   93,   93,

       93,   93,   99,   93,   93,   93,  902,  902,   99,  805,
      807,  902,  902,   99,  902,  806,  902,  902,   99,  902,
      902,  808,  809,  804,  902,  902,   99,  810,  902,  902,
      902,   93,   99,   93,   93,   93,  902,  902,   93,  807,
       93,   93,   93,   93,   99,   93,   93,   93,  902,   99,
      902,  809,  902,  902,  902,  902,   93,  810,   93,   93,
       93,   93,  902,   93,   93,   93,  902,  902,  902,  811,
      812,  902,  629,  630,  902,  902,  502,  902,   93,   99,
       93,   93,   93,  902,  902,  902,   99,  902,  902,  902,
      813,   99,  902,  814,  902,  632,  902,  902,  811,  902,

      812,  902,  902,  818,   99,  902,  902,  902,  902,   99,
      633,   93,  902,   93,   93,   93,  902,  902,  902,  902,
      813,  902,  902,  814,  902,  632,   99,   93,  902,   93,
       93,   93,   93,  818,   93,   93,   93,  819,  902,   93,
      633,   93,   93,   93,   93,  902,   93,   93,   93,   93,
      902,   93,   93,   93,   93,  902,   93,   93,   93,   99,
       93,  902,   93,   93,   93,  902,   93,  819,   93,   93,
       93,  902,  902,  902,  902,   99,  902,  902,  820,  902,
       99,   93,  821,   93,   93,   93,   93,   99,   93,   93,
       93,  823,   99,  902,  822,  902,   93,   99,   93,   93,

       93,   93,   99,   93,   93,   93,  902,  820,   99,  902,
      902,  902,  821,   93,   99,   93,   93,   93,  902,  824,
      902,  823,  902,  822,  825,  828,  826,  902,   93,   99,
       93,   93,   93,   93,   99,   93,   93,   93,  902,  902,
      827,  902,  902,   93,   99,   93,   93,   93,  824,   99,
      902,  902,  902,  825,  902,  828,  826,  829,  902,  902,
       93,   99,   93,   93,   93,   93,  902,   93,   93,   93,
      827,   93,  902,   93,   93,   93,   99,  902,  902,  902,
      902,   99,  902,  902,  902,  902,   93,  829,   93,   93,
       93,   99,   93,  831,   93,   93,   93,  902,   93,  830,

       93,   93,   93,  902,  832,  902,  902,  833,   99,  902,
      902,  902,  902,   99,   93,  902,   93,   93,   93,   99,
      902,  902,  834,  831,  902,  902,  902,   93,  830,   93,
       93,   93,  902,  832,   99,  902,  902,  833,  902,   93,
       99,   93,   93,   93,  902,  902,   99,   93,  835,   93,
       93,   93,  834,   93,  902,   93,   93,   93,  902,  902,
      902,   93,   99,   93,   93,   93,   93,  902,   93,   93,
       93,  902,  837,  836,  902,   99,  902,   93,  835,   93,
       93,   93,   93,  902,   93,   93,   93,   99,  902,  902,
      630,  630,  902,  902,  627,   99,   93,  902,   93,   93,

       93,   99,  837,  836,   93,  902,   93,   93,   93,   99,
      902,  902,  902,  718,   99,  902,  902,  838,  902,   93,
      902,   93,   93,   93,  902,   99,  902,  839,  719,   93,
       99,   93,   93,   93,  843,   93,  902,   93,   93,   93,
      902,  902,  902,  718,   99,   93,  838,   93,   93,   93,
      902,  902,   99,  902,  845,  902,  839,  902,  719,  844,
      902,  902,   93,  843,   93,   93,   93,   99,   93,  902,
       93,   93,   93,  902,  846,  902,   93,   99,   93,   93,
       93,  902,  902,   99,  845,  902,  902,  902,  844,  902,
      902,  847,   93,   99,   93,   93,   93,  848,   93,  902,

       93,   93,   93,  846,   93,  902,   93,   93,   93,   93,
       99,   93,   93,   93,  902,   93,   99,   93,   93,   93,
      902,  847,  902,  902,   99,  902,  902,  848,  850,  902,
       93,  902,   93,   93,   93,  902,  902,  902,  849,   93,
       99,   93,   93,   93,  902,  902,   99,  851,  902,  902,
      902,   93,   99,   93,   93,   93,  902,   99,  850,  902,
      902,  902,   93,   99,   93,   93,   93,  849,   93,  902,
       93,   93,   93,  902,  902,  902,  902,  851,   99,   93,
      902,   93,   93,   93,  852,  902,   93,   99,   93,   93,
       93,   93,  854,   93,   93,   93,  902,  902,  902,   99,

      902,   93,  853,   93,   93,   93,  902,  902,  902,  902,
       99,  902,  902,  852,  902,   93,   99,   93,   93,   93,
      902,  902,  854,  902,  902,  855,   93,   99,   93,   93,
       93,  853,  902,   93,   99,   93,   93,   93,   93,   99,
       93,   93,   93,   93,  902,   93,   93,   93,   93,   99,
       93,   93,   93,  902,  855,   93,  902,   93,   93,   93,
      902,  902,  902,   99,  902,  858,  902,  860,   93,  861,
       93,   93,   93,  902,   99,  902,  862,  902,  859,  902,
       93,   99,   93,   93,   93,   93,   99,   93,   93,   93,
      902,   99,  902,  863,  858,  902,   99,  860,   93,  861,

       93,   93,   93,   99,  902,  902,  862,  859,   93,  902,
       93,   93,   93,  902,  902,   93,   99,   93,   93,   93,
      902,  902,   93,  863,   93,   93,   93,  902,   99,  902,
      864,  902,   93,   99,   93,   93,   93,   93,  902,   93,
       93,   93,  902,  902,  902,   93,   99,   93,   93,   93,
       93,  869,   93,   93,   93,  902,   99,  870,  902,  871,
      864,  902,   93,   99,   93,   93,   93,  872,  902,   93,
       99,   93,   93,   93,   93,  902,   93,   93,   93,  902,
       99,  869,  902,  876,  902,   99,  902,  870,   93,  871,
       93,   93,   93,   99,  873,  902,  902,  872,   99,   93,

      902,   93,   93,   93,   93,  902,   93,   93,   93,  902,
       99,  902,   93,  876,   93,   93,   93,   99,  902,  902,
      877,  902,   99,  902,  873,  902,   93,  902,   93,   93,
       93,  878,  902,  902,  902,  882,   99,   93,  902,   93,
       93,   93,  879,  902,  902,  885,  886,   99,  902,  502,
      877,  883,   99,   93,  902,   93,   93,   93,  902,  902,
       99,  878,  884,  887,  902,  882,  886,  886,  888,  902,
      627,  879,  902,  902,   99,   93,  902,   93,   93,   93,
      902,  883,  902,  889,  890,   99,  902,  902,  902,  891,
      902,   93,  884,   93,   93,   93,  902,  902,  888,  902,

      893,   99,  902,   93,  892,   93,   93,   93,  885,  886,
      886,  886,  502,  889,  627,  902,  902,  902,   93,  891,
       93,   93,   93,   99,  885,  886,  902,  902,  502,  902,
      893,  888,  902,  891,  892,  902,  886,  886,  902,   99,
      627,  902,  902,  902,  902,  902,  889,  888,  892,  902,
      902,   99,  902,  902,  902,  902,  902,  902,  902,  891,
      902,  888,  889,  891,  902,  902,   99,  902,  902,  902,
      902,  902,  902,  902,  892,  902,  889,  888,  892,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  891,
      902,  902,  889,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  892,   58,   58,   58,   58,   58,
       58,   58,   58,   61,   61,   61,   61,   61,   61,   61,
       61,   66,   66,   66,   66,   66,   66,   66,   66,   94,
      902,   94,   94,   94,   94,  177,  177,  177,  181,  902,
      181,  902,  181,  181,  181,  181,  184,  902,  184,  184,
      184,  184,  184,  184,  187,  902,  187,  187,  187,  187,
      187,  187,  195,  195,  346,  346,  902,  346,    7,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902
    } ;

static const flex_int16_t yy_chk[7550] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    3,    4,    9,   13,   13,   14,  867,   13,
       22,   22,   26,   26,   26,   28,   28,   14,   55,   55,

       66,   13,   13,   66,   14,   79,   79,  625,   31,  625,
       31,   31,   31,  502,   36,  178,  178,   37,   36,   37,
       37,   37,   36,  336,   60,   36,  187,   14,   36,   39,
       93,   39,   39,   39,   14,   92,    9,   24,   37,   24,
       24,  185,  185,   31,   36,   88,   60,   73,   36,   24,
       24,   24,   36,   31,   24,   36,   31,   24,   36,  204,
      204,   80,   80,   24,   24,   37,   24,   49,   37,   49,
       49,   49,   69,   31,   65,   24,   60,   39,   64,   24,
       24,   24,   31,   63,   24,  200,  200,   24,   49,  209,
      209,   54,   24,   24,   53,   24,   30,   80,   30,   30,

       30,  340,   35,   40,  337,  337,   35,   40,   67,   67,
       35,   40,   67,  202,  202,   49,   35,   40,   49,   35,
       30,  200,   35,  341,   67,   67,   68,   68,   30,   52,
       30,  340,   35,   40,   23,   30,   35,   40,  339,  339,
       35,   40,   68,   68,   30,   21,   35,   40,   35,  202,
       30,   35,   19,  341,  358,  358,   18,   82,   30,   82,
       30,   10,   82,   82,   30,   32,    7,   32,   32,   32,
      199,  203,  199,  203,  203,  199,  199,   42,  212,    6,
      212,   42,   44,  212,  212,   42,   32,   32,   32,   32,
       44,   42,  718,   32,   32,  719,   44,   32,    5,   44,

       32,    0,   44,    0,   32,   32,   32,   42,    0,  203,
        0,   42,   44,   32,    0,   42,   32,   32,   32,   32,
       44,   42,  718,   32,   32,  719,   44,   32,   44,  498,
       32,   44,  498,   32,   32,   32,   33,    0,   33,   33,
       33,  498,   45,  498,   41,  891,   45,    0,   41,  892,
       45,   94,   41,   94,   94,   94,   45,   33,   41,   86,
      865,   33,   86,  865,   41,   33,  344,  344,   41,   86,
      344,   33,   45,    0,   41,  891,   45,  865,   41,  892,
       45,    0,   41,    0,   33,    0,   45,   33,   41,   86,
        0,   33,   86,   41,    0,   33,    0,   41,   86,   94,

        0,   33,   34,    0,   34,   34,   34,  345,  345,   47,
        0,  345,   47,    0,   95,    0,   95,   95,   95,   47,
      363,  363,   47,   34,   98,   47,   98,   98,   98,   47,
      368,  368,    0,  153,   34,    0,   34,  153,   95,   47,
       34,  153,   47,    0,   34,    0,   34,  153,    0,   47,
       34,   47,    0,   34,   47,  494,  494,   48,   47,   48,
       48,   48,   95,  153,   34,    0,   34,  153,   95,   34,
        0,  153,   98,   34,    0,   34,   38,  153,   38,   38,
       38,  495,  495,    0,  159,  495,   48,   50,  159,   48,
       50,   50,  159,    0,  364,  364,   48,   50,  159,    0,

       50,    0,   38,  519,  519,   48,  361,   50,  361,   38,
       38,  361,  361,    0,  159,   38,   48,   50,  159,   48,
       50,   50,  159,    0,   38,   48,    0,   50,  159,   50,
      364,  190,   38,    0,  190,    0,   50,    0,  192,   38,
       38,  192,  624,  624,   38,   43,  190,  190,   96,   43,
       96,   96,   96,  192,  192,    0,   43,   43,    0,   43,
        0,   43,   43,    0,   51,   43,   51,   51,   51,   97,
        0,   97,   97,   97,    0,   43,    0,   96,  104,   43,
      104,  104,  104,  366,  366,    0,   43,   43,    0,   43,
       43,   43,    0,   97,   43,   46,   96,    0,   46,   51,

      343,   46,   46,  343,  642,  642,  104,   96,   46,  518,
      518,    0,   51,   46,   46,  343,  343,   97,   46,  366,
        0,  193,    0,   97,  193,   46,  104,  194,   46,   51,
      194,   46,   46,   70,   70,    0,  104,   70,   46,    0,
      496,  496,   46,   46,  496,  518,   70,   46,   70,   70,
       70,   70,   77,   77,    0,  193,   70,  716,  716,  717,
      717,  194,   77,   77,   77,  100,    0,  100,  100,  100,
        0,   70,    0,  105,  105,    0,   77,  105,  526,  526,
      493,  105,  493,  493,  493,  193,   70,  105,   77,  776,
      776,  194,   77,   77,   77,  106,    0,  106,  106,  106,

      100,   70,    0,  105,  105,   77,   87,  105,   87,   87,
        0,  105,  216,  100,  526,  216,  106,  105,   87,   87,
       87,    0,  216,   87,    0,  101,   87,  101,  101,  101,
      100,    0,   87,   87,    0,   87,  102,    0,  102,  102,
      102,    0,  216,  106,   87,  216,  106,    0,   87,   87,
       87,  216,    0,   87,    0,  107,   87,  107,  107,  107,
        0,   87,   87,  101,   87,  101,    0,  101,  102,    0,
      103,  777,  777,  101,    0,  102,  102,  103,    0,  109,
      103,  109,  109,  109,  102,  815,  815,  103,    0,  107,
      868,  868,  101,    0,  101,    0,  101,    0,  102,  497,

      103,  109,  497,  107,  102,  102,    0,  103,  108,  103,
      108,  108,  108,  109,  497,  497,  103,    0,  111,  107,
      111,  111,  111,  632,    0,  342,  632,  109,  342,  108,
        0,  109,  112,    0,  112,  112,  112,  342,    0,  342,
      342,  342,  108,  109,    0,  113,    0,  113,  113,  113,
        0,  117,    0,  117,  117,  117,  108,  632,    0,  108,
        0,  112,    0,  111,  112,    0,  111,  857,  857,  857,
        0,  112,  108,  110,  117,  110,  110,  110,    0,  114,
      112,  114,  114,  114,    0,  113,  115,  632,  115,  115,
      115,  112,  111,  113,  112,  110,  875,  875,    0,  117,

      112,  110,  114,    0,  117,  114,  116,  110,  116,  116,
      116,  114,    0,  110,  113,    0,  500,  500,    0,  115,
      500,  110,  890,  890,  115,  110,  118,  114,  118,  118,
      118,  110,  114,    0,  115,  114,  119,  110,  119,  119,
      119,  114,  110,  897,  897,    0,    0,  116,  120,  115,
      120,  120,  120,  115,  116,  121,    0,  121,  121,  121,
      119,    0,    0,    0,  122,  118,  122,  122,  122,  120,
        0,  501,  501,    0,  118,  501,  116,  119,    0,  123,
      121,  123,  123,  123,  119,  124,  120,  124,  124,  124,
      119,  722,  722,  122,  118,  722,  120,    0,  125,  120,

      125,  125,  125,  121,    0,  126,  119,  126,  126,  126,
      121,  123,  122,    0,  127,  120,  127,  127,  127,  124,
        0,  350,    0,  122,  350,    0,  128,  123,  128,  128,
      128,  350,    0,  124,  126,  129,  125,  129,  129,  129,
      130,  123,  130,  130,  130,    0,  125,    0,  127,  124,
        0,  350,    0,  126,  350,  131,    0,  131,  131,  131,
      350,    0,  127,    0,  126,  125,  128,    0,    0,  132,
      129,  132,  132,  132,  128,    0,    0,    0,  127,  130,
      130,    0,  133,  129,  133,  133,  133,    0,  130,  131,
        0,  521,  134,  521,    0,  128,  521,  521,  134,    0,

      129,  723,  723,  131,  134,  723,    0,    0,  130,  130,
      134,  135,    0,  135,  135,  135,    0,  132,  133,  131,
        0,  136,  134,  136,  136,  136,    0,    0,  134,    0,
      133,    0,    0,  137,  134,  137,  137,  137,  138,  134,
      138,  138,  138,    0,    0,  135,    0,  139,  133,  139,
      139,  139,  778,  778,    0,  137,  778,    0,    0,  135,
        0,  136,    0,  140,  137,  140,  140,  140,    0,  136,
        0,    0,  138,  138,  141,  135,  141,  141,  141,    0,
      146,  137,  146,  146,  146,  137,  138,  140,    0,  144,
      136,  144,  144,  144,  137,  139,  142,    0,  142,  142,

      142,    0,  138,  138,    0,  143,    0,  143,  143,  143,
      146,  140,  145,  141,  145,  145,  145,  140,  142,  142,
        0,  147,  141,  147,  147,  147,    0,  148,  146,  148,
      148,  148,  144,  144,    0,    0,  633,  144,  143,  633,
      146,    0,  141,  143,  142,    0,  779,  779,  142,  142,
      779,    0,  145,  143,  149,    0,  149,  149,  149,    0,
      145,  144,  144,  150,    0,  150,  150,  150,  143,  147,
      633,    0,  143,    0,  151,  148,  151,  151,  151,  149,
        0,  145,  152,    0,  152,  152,  152,  155,  150,  155,
      155,  155,    0,  154,  149,  154,  154,  154,  628,  151,

      633,  628,  149,  157,    0,  157,  157,  157,    0,  149,
        0,  150,    0,  628,  628,  154,  155,    0,  150,    0,
      152,    0,  151,  149,  160,    0,  160,  160,  160,  151,
      152,    0,    0,    0,  158,  155,  158,  158,  158,  817,
      817,  154,    0,  817,    0,  154,  155,    0,  157,  152,
      156,  157,    0,  156,    0,  156,  161,  439,  160,    0,
      161,  439,  156,  156,  161,  439,  158,    0,  156,  156,
      161,  439,  160,  161,  158,  840,  840,  157,    0,  840,
      156,  888,  158,  156,  888,  156,  161,  439,  160,    0,
      161,  439,  156,  156,  161,  439,  158,  156,  156,    0,

      161,  439,  161,  158,  162,    0,  162,  162,  162,  163,
        0,  163,  163,  163,    0,  888,  164,    0,    0,  164,
      164,  165,    0,  165,  165,  165,  162,    0,    0,  164,
      167,  166,  167,  167,  167,    0,  168,    0,  168,  168,
      168,  166,    0,  163,    0,  888,  164,  166,    0,  164,
      164,  166,  162,    0,    0,    0,  162,  163,  164,    0,
      169,  166,  169,  169,  169,  889,  167,    0,  889,  165,
      168,  166,    0,  163,    0,    0,  166,    0,  167,  170,
      166,    0,  170,  170,  168,  171,    0,  171,  171,  171,
        0,    0,  170,    0,  173,  169,  167,  173,  173,  889,

      168,  172,    0,  172,  172,  172,    0,  173,  169,  170,
        0,    0,  170,  170,  174,    0,  174,  174,  174,    0,
        0,  170,    0,  171,  173,  169,    0,  173,  173,  889,
      895,  895,    0,  171,  895,  172,  173,  175,  174,  175,
      175,  175,  176,    0,  176,  176,  176,  896,  896,  172,
        0,  896,  171,  177,  174,  177,  177,  177,    0,  186,
      186,  356,  174,    0,  356,  172,  175,    0,  174,  188,
      188,  356,  186,  188,  186,  186,  186,  186,    0,    0,
      176,    0,  186,  174,    0,  175,    0,  189,  189,    0,
      176,  356,  188,    0,  356,    0,  175,  186,  191,  191,

      356,  177,  191,  631,    0,  195,  631,  188,  195,  176,
      189,  191,  186,  191,  196,  195,  191,  195,  631,  631,
        0,  191,  188,    0,    0,  189,  195,  186,    0,  196,
      898,  898,  196,    0,  898,  195,  191,  188,  195,  196,
      189,  196,  720,    0,  195,  720,  195,    0,  899,  899,
      196,  191,  899,  197,  197,  189,    0,  720,  720,  196,
        0,    0,  196,  197,  197,  197,  191,    0,  196,    0,
      196,    0,  201,  201,    0,  205,  205,  197,    0,    0,
        0,    0,  201,  201,  201,  205,    0,  205,  219,  197,
        0,  219,  219,  197,  197,  197,  201,    0,    0,  205,

        0,  219,    0,    0,  721,    0,  197,  721,  201,    0,
        0,  205,  201,  201,  201,  205,    0,  205,  219,  721,
      721,  219,  219,    0,    0,  201,    0,    0,  205,  220,
      219,  220,  220,  220,  221,    0,  221,  221,  221,  222,
        0,  222,  222,  222,  223,    0,  223,  223,  223,  224,
      220,  224,  224,  224,  225,  221,  225,  225,  225,  226,
        0,  226,  226,  226,  227,    0,  227,  227,  227,  223,
        0,  222,    0,    0,  224,  225,    0,  220,  780,    0,
      220,  780,  221,    0,    0,  221,    0,  222,    0,  227,
        0,  226,  223,  780,  780,    0,    0,  224,    0,  223,

        0,  222,  225,    0,  224,  225,  228,  226,  228,  228,
      228,  866,  227,  229,  866,  229,  229,  229,    0,  227,
      230,  226,  230,  230,  230,    0,  866,  866,  231,  228,
      231,  231,  231,  232,    0,  232,  232,  232,  233,    0,
      233,  233,  233,  234,    0,  234,  234,  234,  229,  231,
        0,    0,    0,  236,  228,  236,  236,  236,    0,  228,
      230,  229,    0,    0,    0,    0,  234,    0,  230,    0,
      233,  841,  841,  232,    0,  841,  231,    0,  229,  231,
      235,  232,  235,  235,  235,    0,  233,  841,  841,  230,
        0,  234,    0,  236,    0,  237,  234,  237,  237,  237,

      233,  236,  232,  238,    0,  238,  238,  238,  239,    0,
      239,  239,  239,  240,    0,  240,  240,  240,  235,    0,
        0,  241,  236,  241,  241,  241,    0,    0,  235,  242,
      238,  242,  242,  242,  237,    0,    0,  244,  239,  244,
      244,  244,  245,  237,  245,  245,  245,  235,    0,    0,
        0,  238,  240,  240,    0,  246,  239,  246,  246,  246,
      238,  240,    0,  237,  242,    0,  241,    0,  239,  241,
      243,    0,  243,  243,  243,  244,  856,  242,  245,  856,
        0,  240,  240,    0,  248,  244,  248,  248,  248,  246,
      245,  856,  856,  856,  242,  241,  247,  243,  247,  247,

      247,    0,    0,  246,  244,    0,    0,    0,  245,    0,
        0,  249,  248,  249,  249,  249,    0,    0,  243,  246,
      250,    0,  250,  250,  250,  874,    0,  243,  874,    0,
      247,    0,  248,    0,    0,  251,  249,  251,  251,  251,
      874,  874,  248,  253,  247,  253,  253,  253,    0,  250,
        0,  252,  250,  252,  252,  252,  251,    0,    0,  249,
      247,  258,    0,  258,  258,  258,  249,  254,  250,  254,
      254,  254,    0,    0,    0,    0,  252,    0,    0,  250,
        0,    0,  250,  251,    0,  255,  251,  255,  255,  255,
      258,  253,  254,  256,    0,  256,  256,  256,  257,  252,

      257,  257,  257,    0,    0,    0,  252,  255,    0,  258,
      259,    0,  259,  259,  259,  254,    0,    0,    0,    0,
      258,  256,  254,  257,  260,    0,  260,  260,  260,    0,
        0,    0,  261,  255,  261,  261,  261,  255,    0,    0,
        0,  256,    0,  259,    0,  262,  257,  262,  262,  262,
        0,  256,  264,  257,  264,  264,  264,  265,  259,  265,
      265,  265,  263,  260,  263,  263,  263,  261,    0,    0,
        0,    0,  260,  259,    0,    0,    0,    0,  265,  262,
      261,  266,    0,  266,  266,  266,  267,    0,  267,  267,
      267,  264,  260,  262,    0,    0,    0,  261,    0,    0,

      264,    0,  263,    0,    0,  265,    0,    0,  265,  262,
      263,  267,  268,    0,  268,  268,  268,    0,    0,  269,
      264,  269,  269,  269,  270,    0,  270,  270,  270,  266,
        0,  263,    0,    0,  267,  268,  271,    0,  271,  271,
      271,  267,    0,    0,    0,  272,  270,  272,  272,  272,
      273,    0,  273,  273,  273,    0,    0,    0,    0,  269,
      268,    0,    0,  269,    0,  268,    0,  269,    0,  842,
      842,    0,  270,  842,  273,    0,  270,  271,    0,  274,
      272,  274,  274,  274,  271,  842,  842,  275,  269,  275,
      275,  275,  269,  272,    0,    0,    0,  276,  273,  276,

      276,  276,    0,    0,  273,  277,  271,  277,  277,  277,
      272,  274,  275,  278,  274,  278,  278,  278,    0,    0,
        0,  279,  276,  279,  279,  279,  280,  274,  280,  280,
      280,    0,    0,    0,  283,  275,  283,  283,  283,    0,
      277,  274,  275,    0,  274,  276,  281,    0,  281,  281,
      281,  280,  276,  277,  282,    0,  282,  282,  282,    0,
      284,  278,  284,  284,  284,    0,    0,    0,    0,  279,
      277,    0,    0,  281,  280,  283,  285,    0,  285,  285,
      285,  280,  283,  286,    0,  286,  286,  286,    0,  287,
      282,  287,  287,  287,  281,    0,    0,  285,    0,    0,

      284,    0,  282,  281,  283,    0,    0,    0,  284,  288,
        0,  288,  288,  288,  287,  286,    0,    0,    0,  289,
      282,  289,  289,  289,  285,    0,    0,  285,    0,  284,
      290,  286,  290,  290,  290,    0,    0,  287,  509,  291,
        0,  509,  291,  291,  287,  286,    0,  288,  509,  291,
      887,    0,  291,  887,    0,    0,    0,  288,  292,    0,
      292,  292,  292,    0,    0,  887,  887,  289,  509,  291,
      290,  509,  291,  291,    0,    0,  288,  509,  290,  291,
        0,  291,  293,  292,  293,  293,  293,  294,    0,  294,
      294,  294,  295,    0,  295,  295,  295,    0,    0,  290,

      296,    0,  296,  296,  296,  297,  292,  297,  297,  297,
        0,    0,    0,  292,    0,  298,  294,  298,  298,  298,
      293,    0,    0,    0,  295,  299,  297,  299,  299,  299,
      293,    0,    0,    0,    0,  294,    0,    0,  296,  300,
      295,  300,  300,  300,  894,  297,  294,  894,  296,  293,
        0,    0,    0,  297,  295,    0,  297,  298,    0,  894,
      894,  299,    0,  298,    0,  299,  301,  296,  301,  301,
      301,  300,    0,  299,  297,  302,    0,  302,  302,  302,
      303,    0,  303,  303,  303,    0,  298,  300,    0,    0,
        0,  299,    0,  307,  299,  307,  307,  307,    0,  302,

      304,  300,  304,  304,  304,  301,    0,    0,  305,  303,
      305,  305,  305,  306,  301,  306,  306,  306,  308,    0,
      308,  308,  308,  302,    0,    0,    0,    0,  303,  302,
        0,    0,    0,  307,  301,  304,    0,    0,    0,  303,
        0,  307,  309,  308,  309,  309,  309,    0,  304,  305,
        0,    0,    0,    0,  306,  310,  305,  310,  310,  310,
        0,  306,  307,    0,    0,  304,  308,  311,    0,  311,
      311,  311,  312,  308,  312,  312,  312,    0,  305,  310,
        0,    0,    0,  306,  313,    0,  313,  313,  313,    0,
      309,    0,  314,  310,  314,  314,  314,    0,  316,  312,

      316,  316,  316,  310,    0,  311,    0,    0,  315,  310,
      315,  315,  315,    0,  317,  311,  317,  317,  317,    0,
      312,    0,  310,    0,  313,    0,    0,  316,  314,  312,
        0,    0,  313,  319,  311,  319,  319,  319,    0,  316,
      314,    0,    0,    0,  315,    0,  316,  318,    0,  318,
      318,  318,    0,  313,    0,    0,  315,  316,  314,    0,
        0,  320,  317,  320,  320,  320,    0,  319,  316,  321,
      318,  321,  321,  321,  315,  322,    0,  322,  322,  322,
        0,  319,  323,    0,  323,  323,  323,  324,    0,  324,
      324,  324,    0,    0,  321,  318,  320,  319,  322,  325,

      318,  325,  325,  325,    0,    0,    0,  323,    0,  320,
      326,    0,  326,  326,  326,    0,  327,  321,  327,  327,
      327,    0,    0,  322,  321,    0,  320,  324,  322,    0,
      323,    0,    0,  325,    0,  324,  328,  323,  328,  328,
      328,    0,    0,    0,    0,  326,    0,  325,    0,  329,
      327,  329,  329,  329,    0,    0,  324,  330,  326,  330,
      330,  330,    0,  325,  327,  328,  331,    0,  331,  331,
      331,    0,    0,  329,  332,  326,  332,  332,  332,  333,
      327,  333,  333,  333,  328,  334,    0,  334,  334,  334,
      335,  330,  335,  335,  335,  328,    0,  329,  331,  332,

        0,    0,    0,  329,    0,  330,    0,  333,  379,    0,
      379,  379,  379,    0,  331,    0,    0,  338,  338,    0,
        0,  330,  332,    0,    0,  334,    0,  333,  331,  332,
      338,    0,  338,  334,    0,  338,  346,  333,  335,  346,
      338,  351,    0,    0,  351,    0,  346,    0,  346,    0,
        0,  351,    0,  351,  334,  338,  379,  346,    0,    0,
      373,  352,  373,  373,  373,    0,  346,    0,    0,  346,
      338,  351,    0,    0,  351,  346,  352,  346,  357,  352,
      351,  373,  351,    0,    0,  338,  352,    0,  352,  359,
      359,    0,    0,  357,    0,    0,  357,  352,    0,  359,

        0,  359,    0,  357,    0,  357,  352,    0,  373,  352,
        0,  373,    0,  359,  357,  352,    0,  352,    0,    0,
        0,    0,    0,  357,    0,  359,  357,  360,  360,  359,
        0,  359,  357,    0,  357,  362,  362,  360,  360,  360,
        0,    0,  359,    0,    0,  362,  362,  362,    0,    0,
        0,  360,    0,    0,  365,  365,    0,    0,  381,  362,
      381,  381,  381,  360,  365,    0,  365,  360,  360,  360,
        0,  362,    0,  367,  367,  362,  362,  362,  365,    0,
      360,  369,  369,  367,  367,  367,    0,    0,  362,    0,
      365,  369,    0,  369,  365,    0,  365,  367,    0,  374,

        0,  374,  374,  374,    0,  369,  381,  365,  376,  367,
      376,  376,  376,  367,  367,  367,  375,  369,  375,  375,
      375,  369,    0,  369,  374,  377,  367,  377,  377,  377,
        0,    0,    0,  378,  369,  378,  378,  378,    0,  380,
      376,  380,  380,  380,    0,    0,    0,  374,    0,  382,
      377,  382,  382,  382,  374,  375,  376,    0,  383,  378,
      383,  383,  383,  384,  375,  384,  384,  384,    0,    0,
      376,  380,    0,  377,  385,    0,  385,  385,  385,    0,
      377,  378,    0,    0,  375,    0,  383,  380,  386,  378,
      386,  386,  386,    0,    0,  384,    0,  382,    0,  385,

      388,  380,  388,  388,  388,  387,  383,  387,  387,  387,
      389,  384,  389,  389,  389,  390,  383,  390,  390,  390,
        0,    0,  385,    0,    0,  384,  386,    0,    0,  385,
      387,  391,    0,  391,  391,  391,  386,  392,    0,  392,
      392,  392,  393,    0,  393,  393,  393,  394,  388,  394,
      394,  394,    0,  387,    0,  386,    0,    0,  389,    0,
      387,    0,  395,  390,  395,  395,  395,  396,    0,  396,
      396,  396,    0,    0,    0,    0,  392,    0,    0,  391,
      397,    0,  397,  397,  397,  392,    0,    0,    0,  398,
      393,  398,  398,  398,    0,  394,  396,  399,    0,  399,

      399,  399,  395,    0,  400,  392,  400,  400,  400,  401,
      395,  401,  401,  401,  402,  396,  402,  402,  402,  403,
      397,  403,  403,  403,    0,    0,  396,  398,  397,    0,
        0,  395,    0,    0,  401,    0,  404,  398,  404,  404,
      404,    0,    0,    0,    0,  399,  403,    0,    0,  397,
        0,    0,  400,    0,  402,    0,  398,  401,    0,    0,
        0,    0,  402,    0,  401,    0,  405,  403,  405,  405,
      405,  404,    0,    0,    0,  406,  403,  406,  406,  406,
        0,    0,    0,  402,  404,  407,    0,  407,  407,  407,
        0,  408,    0,  408,  408,  408,    0,    0,    0,    0,

      409,  404,  409,  409,  409,    0,  407,  410,  406,  410,
      410,  410,    0,    0,  405,  411,    0,  411,  411,  411,
        0,    0,  412,  406,  412,  412,  412,  409,    0,    0,
      410,    0,  408,  407,    0,    0,  407,    0,  406,  408,
      413,    0,  413,  413,  413,    0,    0,  411,  409,  414,
        0,  414,  414,  414,    0,  410,    0,  409,    0,    0,
      410,  408,  415,  411,  415,  415,  415,    0,    0,  413,
      412,    0,    0,    0,    0,  414,  416,  411,  416,  416,
      416,  417,    0,  417,  417,  417,    0,  418,  413,  418,
      418,  418,  419,    0,  419,  419,  419,  414,    0,  413,

        0,  416,    0,    0,  421,  414,  421,  421,  421,  420,
      415,  420,  420,  420,  423,    0,  423,  423,  423,  417,
        0,    0,    0,    0,  416,    0,    0,  418,    0,  417,
        0,  416,    0,    0,  420,  418,  421,    0,    0,  422,
      419,  422,  422,  422,    0,    0,    0,  424,  417,  424,
      424,  424,  421,    0,  423,    0,  418,  420,    0,    0,
        0,    0,  423,    0,  420,  425,  421,  425,  425,  425,
        0,    0,  426,  422,  426,  426,  426,  427,    0,  427,
      427,  427,  428,  423,  428,  428,  428,  422,    0,    0,
        0,    0,  424,  426,    0,  424,    0,    0,  425,  427,

        0,    0,  429,  422,  429,  429,  429,  430,    0,  430,
      430,  430,    0,  425,    0,  431,    0,  431,  431,  431,
      426,  424,    0,  426,    0,  427,    0,    0,  425,  427,
      428,    0,  430,  432,  429,  432,  432,  432,  433,    0,
      433,  433,  433,  434,    0,  434,  434,  434,    0,    0,
      429,    0,    0,  431,  435,  430,  435,  435,  435,    0,
        0,    0,  430,  431,  429,  433,  436,    0,  436,  436,
      436,  432,    0,    0,    0,  437,  433,  437,  437,  437,
        0,  432,  431,  434,    0,  438,  433,  438,  438,  438,
      440,  434,  440,  440,  440,  433,    0,    0,    0,    0,

      432,    0,  435,    0,  441,  433,  441,  441,  441,    0,
        0,    0,  434,    0,  436,    0,    0,  438,  442,    0,
      442,  442,  442,  437,  443,  441,  443,  443,  443,  440,
        0,    0,  444,  438,  444,  444,  444,    0,  440,  445,
        0,  445,  445,  445,    0,    0,    0,  438,    0,    0,
        0,    0,  441,    0,    0,  441,    0,  442,  440,  443,
      446,    0,  446,  446,  446,    0,  442,  447,  445,  447,
      447,  447,  443,  448,    0,  448,  448,  448,    0,  449,
      444,  449,  449,  449,    0,    0,  442,  445,  450,  443,
      450,  450,  450,    0,  446,    0,  448,    0,  445,    0,

      449,  451,    0,  451,  451,  451,    0,    0,  446,  447,
      452,    0,  452,  452,  452,  447,    0,    0,    0,    0,
        0,  448,    0,  450,  446,    0,  448,  449,    0,    0,
      449,  453,    0,  453,  453,  453,  450,    0,  447,    0,
      451,  454,  452,  454,  454,  454,    0,    0,  452,  451,
        0,    0,    0,  450,    0,    0,    0,  455,  452,  455,
      455,  455,    0,  456,  453,  456,  456,  456,    0,  451,
      454,  457,  452,  457,  457,  457,    0,  452,  455,  453,
      458,    0,  458,  458,  458,    0,    0,    0,  456,  454,
        0,    0,    0,    0,  453,  459,  457,  459,  459,  459,

      454,    0,    0,    0,    0,  455,    0,    0,  455,  458,
      460,  456,  460,  460,  460,    0,    0,    0,  456,  457,
      459,  461,    0,  461,  461,  461,  457,    0,  458,  462,
        0,  462,  462,  462,  463,    0,  463,  463,  463,  458,
        0,    0,    0,  459,  467,  460,  467,  467,  467,    0,
      459,    0,    0,  464,  461,  464,  464,  464,  460,    0,
      465,    0,  465,  465,  465,    0,    0,  463,    0,  461,
      466,  462,  466,  466,  466,  460,    0,  462,    0,  467,
        0,    0,  463,    0,  461,  465,  468,    0,  468,  468,
      468,  464,  467,  466,    0,    0,    0,  463,    0,    0,

      462,  464,  469,    0,  469,  469,  469,    0,  465,  467,
      471,  468,  471,  471,  471,  465,    0,    0,  466,    0,
      464,    0,  470,  466,  470,  470,  470,  472,    0,  472,
      472,  472,    0,  473,  468,  473,  473,  473,    0,  471,
        0,  468,  469,  474,    0,  474,  474,  474,    0,  475,
      469,  475,  475,  475,  470,    0,    0,  476,  471,  476,
      476,  476,  477,    0,  477,  477,  477,    0,    0,  471,
      470,  469,  475,    0,    0,  472,  479,  474,  479,  479,
      479,  473,    0,  478,  470,  478,  478,  478,    0,  476,
      480,  474,  480,  480,  480,    0,  482,  475,  482,  482,

      482,    0,  475,    0,    0,  476,    0,  474,    0,    0,
      477,  480,  481,    0,  481,  481,  481,    0,    0,  476,
        0,  482,    0,    0,  479,  483,  478,  483,  483,  483,
      484,  478,  484,  484,  484,    0,    0,    0,  480,    0,
        0,  480,    0,    0,  482,    0,  487,  481,  487,  487,
      487,  482,  483,    0,  485,  478,  485,  485,  485,  486,
      481,  486,  486,  486,    0,    0,    0,  488,  484,  488,
      488,  488,  490,  483,  490,  490,  490,  481,  484,    0,
      486,  485,  483,  489,    0,  489,  489,  489,    0,  491,
        0,  491,  491,  491,  487,  499,  499,  484,    0,  499,

        0,  492,  485,  492,  492,  492,  490,  486,  489,    0,
      486,  485,    0,  499,  491,  488,    0,    0,  499,    0,
      490,    0,  516,    0,    0,  516,  492,    0,    0,  517,
      517,  489,  516,  499,    0,    0,  490,  491,  489,  517,
        0,  517,    0,  529,  491,  529,  529,  529,  499,  492,
      520,  520,  516,  517,    0,  516,  492,    0,    0,    0,
      520,  516,  520,  499,  527,  517,  527,  527,  527,  517,
        0,  517,    0,    0,  520,    0,    0,  522,  522,    0,
        0,    0,  517,    0,  523,  523,  520,  522,  522,  522,
      520,  529,  520,    0,  523,  523,  523,    0,  527,  524,

      524,  522,  532,  520,  532,  532,  532,    0,  523,  524,
      524,  524,  527,  522,    0,    0,    0,  522,  522,  522,
      523,  525,  525,  524,  523,  523,  523,    0,  527,    0,
      522,  525,    0,  525,    0,  524,    0,  523,    0,  524,
      524,  524,    0,    0,  528,  525,  528,  528,  528,    0,
      532,  530,  524,  530,  530,  530,  531,  525,  531,  531,
      531,  525,  533,  525,  533,  533,  533,  534,    0,  534,
      534,  534,    0,    0,  525,    0,  535,  531,  535,  535,
      535,    0,  536,  528,  536,  536,  536,    0,    0,    0,
      530,  537,  528,  537,  537,  537,    0,    0,  538,  530,

      538,  538,  538,    0,  531,    0,    0,  531,    0,    0,
      533,    0,  528,    0,  539,  534,  539,  539,  539,  530,
        0,    0,    0,  540,  535,  540,  540,  540,    0,  541,
      536,  541,  541,  541,  542,    0,  542,  542,  542,  537,
      543,    0,  543,  543,  543,    0,  538,  544,    0,  544,
      544,  544,  545,    0,  545,  545,  545,    0,    0,  542,
        0,    0,  539,  541,  546,    0,  546,  546,  546,    0,
      547,  540,  547,  547,  547,    0,    0,  541,    0,    0,
      543,  548,  542,  548,  548,  548,    0,    0,  543,  542,
        0,    0,    0,  541,  550,  544,  550,  550,  550,    0,

      545,  549,  548,  549,  549,  549,    0,    0,  547,  543,
        0,    0,  546,  551,    0,  551,  551,  551,  547,  552,
        0,  552,  552,  552,    0,    0,  550,    0,    0,  548,
        0,    0,  548,    0,  551,    0,    0,  547,    0,  549,
        0,  553,  550,  553,  553,  553,    0,    0,    0,  549,
      554,    0,  554,  554,  554,    0,  550,    0,    0,  552,
        0,  551,    0,    0,  551,    0,  553,  552,  549,  555,
        0,  555,  555,  555,    0,  556,  554,  556,  556,  556,
      557,    0,  557,  557,  557,    0,    0,    0,  552,  553,
      558,    0,  558,  558,  558,    0,  553,  559,  554,  559,

      559,  559,    0,    0,    0,  560,  554,  560,  560,  560,
      561,    0,  561,  561,  561,    0,    0,  555,  562,    0,
      562,  562,  562,  556,    0,    0,    0,  563,  557,  563,
      563,  563,    0,    0,  561,    0,    0,  560,  558,  564,
        0,  564,  564,  564,    0,  559,  565,  562,  565,  565,
      565,    0,  566,  560,  566,  566,  566,  567,  561,  567,
      567,  567,    0,  563,  561,    0,  562,  560,    0,    0,
      568,  564,  568,  568,  568,  563,    0,  562,  565,    0,
        0,  569,  567,  569,  569,  569,  570,  564,  570,  570,
      570,    0,    0,  563,  565,  573,    0,  573,  573,  573,

      566,  564,    0,  568,    0,  567,    0,  571,  565,  571,
      571,  571,  567,    0,    0,  570,    0,    0,  568,    0,
      572,  569,  572,  572,  572,    0,    0,    0,    0,  569,
        0,    0,  571,  568,  570,  574,    0,  574,  574,  574,
        0,    0,    0,  573,    0,  570,  572,    0,    0,  576,
      569,  576,  576,  576,  575,  571,  575,  575,  575,    0,
      574,  577,  571,  577,  577,  577,    0,  578,  572,  578,
      578,  578,    0,    0,    0,  579,  572,  579,  579,  579,
        0,    0,    0,  574,    0,    0,  577,    0,  575,    0,
      574,  576,    0,    0,    0,    0,  580,  576,  580,  580,

      580,  582,  575,  582,  582,  582,  578,    0,    0,  577,
      584,  579,  584,  584,  584,  578,  577,    0,  575,    0,
      576,    0,  581,  579,  581,  581,  581,    0,  583,  582,
      583,  583,  583,    0,  585,  578,  585,  585,  585,  580,
        0,  579,    0,  586,  580,  586,  586,  586,    0,  582,
      584,    0,    0,  583,    0,    0,  581,    0,  584,  582,
      587,    0,  587,  587,  587,    0,    0,    0,  580,  588,
      581,  588,  588,  588,  585,    0,  583,  586,    0,  584,
        0,    0,  585,  583,    0,  587,  581,    0,    0,    0,
      589,  586,  589,  589,  589,  590,    0,  590,  590,  590,

        0,    0,    0,  585,  588,    0,    0,  586,  587,  591,
        0,  591,  591,  591,    0,  587,  590,  588,  592,  589,
      592,  592,  592,  593,    0,  593,  593,  593,    0,  594,
      591,  594,  594,  594,  588,    0,    0,  596,  589,  596,
      596,  596,    0,  590,    0,    0,  590,    0,    0,  589,
        0,  595,  594,  595,  595,  595,    0,  591,  592,    0,
      591,  593,  596,    0,    0,  598,  592,  598,  598,  598,
        0,  593,    0,    0,  595,    0,  597,  594,  597,  597,
      597,    0,  594,    0,    0,  596,    0,  592,    0,    0,
      593,  599,  596,  599,  599,  599,    0,    0,    0,  595,

        0,    0,    0,  600,  595,  600,  600,  600,    0,    0,
      597,    0,    0,  598,    0,  601,  599,  601,  601,  601,
        0,    0,    0,  602,  597,  602,  602,  602,  600,  603,
        0,  603,  603,  603,  606,    0,  606,  606,  606,  599,
      597,  604,    0,  604,  604,  604,  599,    0,    0,  601,
        0,  600,  605,    0,  605,  605,  605,  610,  600,  610,
      610,  610,  607,  601,  607,  607,  607,    0,    0,  603,
      608,  602,  608,  608,  608,    0,  605,  603,    0,  601,
        0,    0,  606,    0,  604,    0,    0,  607,  609,  604,
      609,  609,  609,  608,    0,    0,    0,  610,  603,  611,

      605,  611,  611,  611,    0,  610,  605,    0,    0,    0,
      607,    0,    0,  604,    0,  609,    0,  607,  608,    0,
        0,    0,    0,  608,    0,  612,  610,  612,  612,  612,
        0,    0,    0,    0,  611,  613,  609,  613,  613,  613,
      614,    0,  614,  614,  614,  609,    0,  611,    0,  615,
        0,  615,  615,  615,  616,    0,  616,  616,  616,  617,
        0,  617,  617,  617,  611,  618,  614,  618,  618,  618,
        0,    0,    0,  612,  613,  619,  615,  619,  619,  619,
        0,    0,  620,  613,  620,  620,  620,  621,  614,  621,
      621,  621,    0,    0,    0,    0,  614,  615,    0,  617,

        0,    0,  616,  613,    0,    0,  615,  617,  622,  619,
      622,  622,  622,  618,    0,    0,  621,  623,    0,  623,
      623,  623,    0,  619,    0,  626,  626,    0,  617,  626,
      620,    0,  629,  629,    0,  621,  629,  630,  630,  619,
        0,  630,    0,  626,    0,    0,  621,    0,  626,    0,
      622,    0,  623,    0,    0,  629,  622,    0,    0,    0,
      630,    0,    0,  626,  646,  623,  646,  646,  646,    0,
      629,  640,  640,    0,    0,  630,    0,    0,  626,  622,
        0,  640,  623,  640,    0,  629,  641,  641,  646,    0,
      630,  643,  643,  626,    0,  640,  641,    0,  641,    0,

      629,  643,    0,  643,    0,  630,    0,  640,    0,    0,
      641,  640,  646,  640,    0,  643,    0,  647,  646,  647,
      647,  647,  641,    0,  640,    0,  641,  643,  641,    0,
        0,  643,    0,  643,    0,  644,  644,    0,    0,  641,
        0,    0,  645,  645,  643,  644,  644,  644,    0,    0,
        0,    0,  645,  645,  645,    0,  647,    0,  648,  644,
      648,  648,  648,    0,    0,  647,  645,    0,    0,    0,
      649,  644,  649,  649,  649,  644,  644,  644,  645,    0,
        0,    0,  645,  645,  645,  647,    0,  650,  644,  650,
      650,  650,    0,  648,  651,  645,  651,  651,  651,  652,

        0,  652,  652,  652,  649,  653,  648,  653,  653,  653,
        0,  654,    0,  654,  654,  654,    0,  659,  649,  659,
      659,  659,  656,  648,  656,  656,  656,  655,  650,  655,
      655,  655,    0,    0,  649,  650,  657,    0,  657,  657,
      657,    0,  651,  654,    0,  653,  658,  652,  658,  658,
      658,    0,  655,  653,    0,    0,    0,  650,    0,  654,
        0,    0,  656,    0,  660,  659,  660,  660,  660,  658,
      656,    0,    0,  654,  653,  655,  657,  661,    0,  661,
      661,  661,  655,  662,  657,  662,  662,  662,    0,    0,
        0,  656,    0,  663,  658,  663,  663,  663,  664,  658,

      664,  664,  664,    0,  665,  657,  665,  665,  665,    0,
        0,  666,  660,  666,  666,  666,  667,    0,  667,  667,
      667,    0,  661,  664,    0,  661,    0,    0,  663,    0,
        0,  662,  668,    0,  668,  668,  668,    0,  665,    0,
      669,  663,  669,  669,  669,  670,  664,  670,  670,  670,
        0,  661,  665,  664,    0,  667,    0,  668,  663,  666,
        0,    0,    0,  671,  667,  671,  671,  671,  665,  672,
        0,  672,  672,  672,  673,    0,  673,  673,  673,  669,
      668,    0,    0,    0,  667,  670,    0,  668,  669,    0,
      672,    0,    0,  670,    0,  674,    0,  674,  674,  674,

      675,  671,  675,  675,  675,    0,    0,    0,  669,    0,
        0,  671,    0,    0,  670,    0,    0,  672,    0,    0,
      672,    0,  673,  674,  676,  675,  676,  676,  676,  677,
      671,  677,  677,  677,    0,  678,    0,  678,  678,  678,
        0,    0,  679,  674,  679,  679,  679,  680,  675,  680,
      680,  680,    0,  674,    0,  675,  678,  681,    0,  681,
      681,  681,  682,    0,  682,  682,  682,    0,  677,    0,
        0,  679,  676,    0,  680,    0,  683,  677,  683,  683,
      683,    0,  681,  678,    0,  684,  678,  684,  684,  684,
      679,    0,    0,    0,    0,  680,    0,  677,    0,    0,

      682,  679,    0,    0,  680,  681,    0,    0,    0,    0,
      682,  685,  681,  685,  685,  685,    0,    0,    0,  686,
      684,  686,  686,  686,  683,    0,    0,    0,    0,  682,
        0,    0,  685,  684,  687,    0,  687,  687,  687,  688,
        0,  688,  688,  688,    0,    0,    0,    0,    0,  690,
      684,  690,  690,  690,  689,  687,  689,  689,  689,  685,
        0,    0,  685,  688,    0,    0,    0,  686,    0,  691,
        0,  691,  691,  691,  692,    0,  692,  692,  692,    0,
        0,  690,  687,    0,    0,  687,  693,  688,  693,  693,
      693,    0,  689,  688,  691,    0,  694,  690,  694,  694,

      694,    0,  689,  695,    0,  695,  695,  695,    0,    0,
        0,  690,    0,    0,  692,    0,  696,  691,  696,  696,
      696,  689,  692,    0,  691,  697,  693,  697,  697,  697,
        0,    0,    0,  698,  693,  698,  698,  698,  699,    0,
      699,  699,  699,  692,  694,  695,    0,    0,  696,    0,
        0,  695,    0,  697,  700,  693,  700,  700,  700,  701,
        0,  701,  701,  701,  696,  702,    0,  702,  702,  702,
        0,    0,    0,  697,  695,    0,    0,    0,  696,    0,
        0,  698,    0,  697,    0,  703,  699,  703,  703,  703,
      704,    0,  704,  704,  704,    0,    0,  705,  701,  705,

      705,  705,  700,    0,    0,    0,  706,  701,  706,  706,
      706,    0,  707,  702,  707,  707,  707,    0,  708,    0,
      708,  708,  708,    0,    0,    0,  709,  701,  709,  709,
      709,    0,    0,  703,    0,  707,    0,  710,  704,  710,
      710,  710,    0,    0,    0,  705,  711,  706,  711,  711,
      711,    0,    0,  712,  706,  712,  712,  712,  708,    0,
      707,    0,  710,    0,    0,  707,  708,    0,  713,    0,
      713,  713,  713,    0,  709,  714,  706,  714,  714,  714,
      715,    0,  715,  715,  715,  710,  727,  708,  727,  727,
      727,    0,  710,  712,  711,  724,  724,    0,    0,    0,

      714,  712,  713,  725,  725,  724,  726,  724,  726,  726,
      726,    0,    0,  725,  715,  725,  713,    0,    0,  724,
        0,  727,  712,  714,    0,    0,    0,  725,  715,    0,
      714,  724,  713,    0,  727,  724,    0,  724,  726,  725,
        0,    0,    0,  725,  715,  725,    0,    0,  724,    0,
        0,  727,    0,    0,  726,  728,  725,  728,  728,  728,
      729,    0,  729,  729,  729,    0,    0,  730,  726,  730,
      730,  730,  731,    0,  731,  731,  731,  732,    0,  732,
      732,  732,  733,    0,  733,  733,  733,  734,    0,  734,
      734,  734,  730,  735,    0,  735,  735,  735,  736,    0,

      736,  736,  736,  728,    0,    0,    0,  737,  729,  737,
      737,  737,    0,    0,    0,  730,    0,    0,  735,  736,
      731,    0,  730,    0,  738,  732,  738,  738,  738,  739,
      733,  739,  739,  739,    0,  734,  740,    0,  740,  740,
      740,  735,    0,    0,    0,    0,  736,    0,  735,  736,
      741,    0,  741,  741,  741,  737,    0,  740,  738,  742,
        0,  742,  742,  742,  743,    0,  743,  743,  743,    0,
        0,  744,  738,  744,  744,  744,  745,  739,  745,  745,
      745,    0,    0,    0,  740,    0,    0,  740,  738,    0,
        0,    0,  746,  742,  746,  746,  746,    0,  741,    0,

      747,    0,  747,  747,  747,    0,    0,  742,    0,    0,
      744,    0,  743,    0,  748,  746,  748,  748,  748,  744,
        0,    0,    0,  742,  745,  747,  749,    0,  749,  749,
      749,  750,    0,  750,  750,  750,    0,    0,    0,  744,
      746,    0,    0,    0,    0,  746,    0,  752,  747,  752,
      752,  752,  748,    0,  750,  747,  751,    0,  751,  751,
      751,  753,  748,  753,  753,  753,    0,  754,    0,  754,
      754,  754,    0,  755,  749,  755,  755,  755,  758,  750,
        0,  748,  758,    0,  750,  756,  758,  756,  756,  756,
      751,    0,  758,    0,  757,  752,  757,  757,  757,  753,

        0,    0,    0,    0,  751,  754,    0,    0,  758,  753,
        0,  755,  758,    0,    0,  754,  758,  756,  757,    0,
      751,  755,  758,  759,    0,  759,  759,  759,  753,    0,
        0,    0,    0,  756,  754,  760,    0,  760,  760,  760,
      755,  761,  757,  761,  761,  761,    0,  756,  757,  762,
        0,  762,  762,  762,  763,    0,  763,  763,  763,    0,
      764,  759,  764,  764,  764,  765,    0,  765,  765,  765,
      766,  759,  766,  766,  766,    0,    0,    0,  767,  763,
      767,  767,  767,  760,  768,  764,  768,  768,  768,  761,
      759,  766,    0,    0,  762,    0,  769,  762,  769,  769,

      769,  770,  763,  770,  770,  770,    0,    0,  764,  763,
      765,    0,    0,  765,    0,  764,    0,    0,  766,    0,
        0,  766,  768,  762,    0,    0,  767,  769,    0,    0,
        0,  771,  768,  771,  771,  771,    0,    0,  772,  765,
      772,  772,  772,  773,  769,  773,  773,  773,    0,  770,
        0,  768,    0,    0,    0,    0,  774,  769,  774,  774,
      774,  775,    0,  775,  775,  775,    0,    0,    0,  771,
      773,    0,  781,  781,    0,    0,  781,    0,  782,  771,
      782,  782,  782,    0,    0,    0,  772,    0,    0,    0,
      774,  773,    0,  775,    0,  781,    0,    0,  771,    0,

      773,    0,    0,  782,  774,    0,    0,    0,    0,  775,
      781,  783,    0,  783,  783,  783,    0,    0,    0,    0,
      774,    0,    0,  775,    0,  781,  782,  784,    0,  784,
      784,  784,  785,  782,  785,  785,  785,  783,    0,  786,
      781,  786,  786,  786,  787,    0,  787,  787,  787,  788,
        0,  788,  788,  788,  789,    0,  789,  789,  789,  783,
      790,    0,  790,  790,  790,    0,  791,  783,  791,  791,
      791,    0,    0,    0,    0,  784,    0,    0,  786,    0,
      785,  792,  788,  792,  792,  792,  793,  786,  793,  793,
      793,  791,  787,    0,  789,    0,  796,  788,  796,  796,

      796,  794,  789,  794,  794,  794,    0,  786,  790,    0,
        0,    0,  788,  795,  791,  795,  795,  795,    0,  792,
        0,  791,    0,  789,  793,  796,  794,    0,  797,  792,
      797,  797,  797,  798,  793,  798,  798,  798,    0,    0,
      795,    0,    0,  799,  796,  799,  799,  799,  792,  794,
        0,    0,    0,  793,    0,  796,  794,  797,    0,    0,
      800,  795,  800,  800,  800,  802,    0,  802,  802,  802,
      795,  801,    0,  801,  801,  801,  797,    0,    0,    0,
        0,  798,    0,    0,    0,    0,  803,  797,  803,  803,
      803,  799,  804,  801,  804,  804,  804,    0,  805,  800,

      805,  805,  805,    0,  802,    0,    0,  803,  800,    0,
        0,    0,    0,  802,  806,    0,  806,  806,  806,  801,
        0,    0,  805,  801,    0,    0,    0,  807,  800,  807,
      807,  807,    0,  802,  803,    0,    0,  803,    0,  808,
      804,  808,  808,  808,    0,    0,  805,  809,  806,  809,
      809,  809,  805,  810,    0,  810,  810,  810,    0,    0,
        0,  811,  806,  811,  811,  811,  812,    0,  812,  812,
      812,    0,  809,  808,    0,  807,    0,  813,  806,  813,
      813,  813,  814,    0,  814,  814,  814,  808,    0,    0,
      816,  816,    0,    0,  816,  809,  818,    0,  818,  818,

      818,  810,  809,  808,  819,    0,  819,  819,  819,  811,
        0,    0,    0,  816,  812,    0,    0,  813,    0,  820,
        0,  820,  820,  820,    0,  813,    0,  814,  816,  821,
      814,  821,  821,  821,  818,  822,    0,  822,  822,  822,
        0,    0,    0,  816,  818,  823,  813,  823,  823,  823,
        0,    0,  819,    0,  821,    0,  814,    0,  816,  820,
        0,    0,  824,  818,  824,  824,  824,  820,  825,    0,
      825,  825,  825,    0,  822,    0,  826,  821,  826,  826,
      826,    0,    0,  822,  821,    0,    0,    0,  820,    0,
        0,  824,  827,  823,  827,  827,  827,  825,  828,    0,

      828,  828,  828,  822,  829,    0,  829,  829,  829,  830,
      824,  830,  830,  830,    0,  831,  825,  831,  831,  831,
        0,  824,    0,    0,  826,    0,    0,  825,  829,    0,
      832,    0,  832,  832,  832,    0,    0,    0,  828,  833,
      827,  833,  833,  833,    0,    0,  828,  831,    0,    0,
        0,  834,  829,  834,  834,  834,    0,  830,  829,    0,
        0,    0,  835,  831,  835,  835,  835,  828,  836,    0,
      836,  836,  836,    0,    0,    0,    0,  831,  832,  837,
        0,  837,  837,  837,  833,    0,  838,  833,  838,  838,
      838,  839,  836,  839,  839,  839,    0,    0,    0,  834,

        0,  843,  835,  843,  843,  843,    0,    0,    0,    0,
      835,    0,    0,  833,    0,  844,  836,  844,  844,  844,
        0,    0,  836,    0,    0,  838,  845,  837,  845,  845,
      845,  835,    0,  846,  838,  846,  846,  846,  847,  839,
      847,  847,  847,  848,    0,  848,  848,  848,  849,  843,
      849,  849,  849,    0,  838,  850,    0,  850,  850,  850,
        0,    0,    0,  844,    0,  845,    0,  848,  851,  849,
      851,  851,  851,    0,  845,    0,  850,    0,  847,    0,
      852,  846,  852,  852,  852,  853,  847,  853,  853,  853,
        0,  848,    0,  851,  845,    0,  849,  848,  854,  849,

      854,  854,  854,  850,    0,    0,  850,  847,  855,    0,
      855,  855,  855,    0,    0,  858,  851,  858,  858,  858,
        0,    0,  859,  851,  859,  859,  859,    0,  852,    0,
      854,    0,  860,  853,  860,  860,  860,  861,    0,  861,
      861,  861,    0,    0,    0,  862,  854,  862,  862,  862,
      863,  858,  863,  863,  863,    0,  855,  860,    0,  861,
      854,    0,  869,  858,  869,  869,  869,  862,    0,  864,
      859,  864,  864,  864,  870,    0,  870,  870,  870,    0,
      860,  858,    0,  869,    0,  861,    0,  860,  871,  861,
      871,  871,  871,  862,  864,    0,    0,  862,  863,  872,

        0,  872,  872,  872,  873,    0,  873,  873,  873,    0,
      869,    0,  876,  869,  876,  876,  876,  864,    0,    0,
      871,    0,  870,    0,  864,    0,  877,    0,  877,  877,
      877,  872,    0,    0,    0,  876,  871,  878,    0,  878,
      878,  878,  873,    0,    0,  880,  880,  872,    0,  880,
      871,  877,  873,  879,    0,  879,  879,  879,    0,    0,
      876,  872,  878,  880,    0,  876,  881,  881,  880,    0,
      881,  873,    0,    0,  877,  882,    0,  882,  882,  882,
        0,  877,    0,  880,  881,  878,    0,    0,    0,  881,
        0,  883,  878,  883,  883,  883,    0,    0,  880,    0,

      882,  879,    0,  884,  881,  884,  884,  884,  885,  885,
      886,  886,  885,  880,  886,    0,    0,    0,  893,  881,
      893,  893,  893,  882,  900,  900,    0,    0,  900,    0,
      882,  885,    0,  886,  881,    0,  901,  901,    0,  883,
      901,    0,    0,    0,    0,    0,  885,  900,  886,    0,
        0,  884,    0,    0,    0,    0,    0,    0,    0,  901,
        0,  885,  900,  886,    0,    0,  893,    0,    0,    0,
        0,    0,    0,    0,  901,    0,  885,  900,  886,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  901,
        0,    0,  900,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  901,  903,  903,  903,  903,  903,
      903,  903,  903,  904,  904,  904,  904,  904,  904,  904,
      904,  905,  905,  905,  905,  905,  905,  905,  905,  906,
        0,  906,  906,  906,  906,  907,  907,  907,  908,    0,
      908,    0,  908,  908,  908,  908,  909,    0,  909,  909,
      909,  909,  909,  909,  910,    0,  910,  910,  910,  910,
      910,  910,  911,  911,  912,  912,    0,  912,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[211] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #include <iostream>
    #include <regex>
    #define YY_DECL int yylex()

    bool DEBUG = false;

    bool endsWith(const std::string & str, const std::string & suffix);
    void removeUnderline(std::string * str);
    void removeUnderline(char * str);

    struct Date {
        int day = 0;
        int month = 0;
        int year = -1;
    };

    enum TimeFormat {
        AM, PM, HOURS_24
    };

    struct Time {
        int hour = 0;
        int minute = 0;
        int second = 0;
        TimeFormat format = HOURS_24;
    };

    struct DateTime {
        Date* date = nullptr;
        Time* time = nullptr;
    };

    void printDateTimeLiteral(DateTime& datetime);
#line 2478 "lexer.flex.cpp"

#line 2480 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 60 "lexer.l"



#line 64 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;
    bool boolLiteral;



#line 2714 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 903 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 902 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 77 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 78 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 79 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 80 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 81 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 82 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 83 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 84 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 85 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 87 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 88 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 89 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 90 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 91 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 92 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 93 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 94 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 95 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 100 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 101 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 102 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 103 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 105 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 106 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 107 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 112 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 113 "lexer.l"
{printf("Found keyword : %s\n", yytext);}    
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 114 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 115 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 116 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 117 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 118 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 120 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 121 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 122 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 146 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 147 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 148 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 149 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 150 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 151 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 152 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 153 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 154 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 155 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 156 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 157 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 158 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 159 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 160 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 161 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 162 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 163 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 164 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 165 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 166 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 167 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 168 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 169 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 170 "lexer.l"
{printf("Found keyword : %s\n", yytext);}   
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 171 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 172 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 173 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 174 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 175 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 176 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 177 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 178 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 179 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 180 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 181 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 182 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 183 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 184 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 185 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 186 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 187 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 188 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 189 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 190 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 191 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 192 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 193 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 194 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 195 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 196 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 197 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 198 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 201 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 202 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 203 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 205 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 206 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 207 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 208 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 209 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 210 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 211 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 212 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 213 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 214 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 215 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 216 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 217 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 218 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 219 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 220 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 221 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 222 "lexer.l"
{printf("Found keyword : %s\n", yytext);} 
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 223 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 224 "lexer.l"
{printf("Found keyword : %s\n", yytext);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 226 "lexer.l"
{printf("Found nothing literal\n");}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 227 "lexer.l"
{printf("Found boolean literal : %s\n", yytext); boolLiteral = true;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 228 "lexer.l"
{printf("Found boolean literal : %s\n", yytext); boolLiteral = false;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 230 "lexer.l"
{printf("Found a XOR operator: %s\n", yytext);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 231 "lexer.l"
{printf("Found a MUL operator: %s\n", yytext);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 232 "lexer.l"
{printf("Found a FLOOR_DIV operator: %s\n", yytext);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 233 "lexer.l"
{printf("Found a DIV operator: %s\n", yytext);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 234 "lexer.l"
{printf("Found a PLUS operator: %s\n", yytext);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 235 "lexer.l"
{printf("Found a MINUS operator: %s\n", yytext);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 236 "lexer.l"
{printf("Found an ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 237 "lexer.l"
{printf("Found a XOR_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 238 "lexer.l"
{printf("Found a MUL_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 239 "lexer.l"
{printf("Found a ADD_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 240 "lexer.l"
{printf("Found a SUB_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 241 "lexer.l"
{printf("Found a LESS_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 242 "lexer.l"
{printf("Found a LESS operator: %s\n", yytext);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 243 "lexer.l"
{printf("Found a GREATER operator: %s\n", yytext);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 244 "lexer.l"
{printf("Found a GREATER_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 245 "lexer.l"
{printf("Found a NOT_EQUAL to operator: %s\n", yytext);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 246 "lexer.l"
{printf("Found a STR_CONCAT operator: %s\n", yytext);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 247 "lexer.l"
{printf("Found a STR_CONCAT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 248 "lexer.l"
{printf("Found a RSHIFT operator: %s\n", yytext);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 249 "lexer.l"
{printf("Found a LSHIFT operator: %s\n", yytext);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 250 "lexer.l"
{printf("Found a LSHIFT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 251 "lexer.l"
{printf("Found a RSHIFT_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 252 "lexer.l"
{printf("Found an FLOOR_DIV_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 253 "lexer.l"
{printf("Found a DIV_ASSIGNMENT operator: %s\n", yytext);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 255 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 256 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 257 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 258 "lexer.l"
{printf("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 260 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 261 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 262 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 263 "lexer.l"
{printf("Error: String literal wasn't closed\n"); yyterminate();}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 264 "lexer.l"
{
    printf("Error: String literal wasn't closed at line %d\n", yylineno - 1); 
    if (!DEBUG) {
        yyterminate();
    }
    else {
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 273 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        printf("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
    } else {
        printf("Error: character literal can have only one character, not string, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 283 "lexer.l"
{printf("Found a string literal: %s\n", strLiteral.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 286 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 291 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 296 "lexer.l"
{
    printf("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 302 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = atoi(intLiteral); printf("Found a integer value: %d\n", intValue);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 318 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 16);
    printf("Found a hex integer value: %d\n", intValue);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 335 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 8);
    printf("Found a oct integer value: %d\n", intValue);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 352 "lexer.l"
{
    std::string lexeme(yytext);
    removeUnderline(&lexeme);
    doubleValue = atof(lexeme.c_str());
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 359 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    removeUnderline(floatLiteral);
    doubleValue = atof(floatLiteral);
    printf("Found floating point literal: %f\n", doubleValue);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 367 "lexer.l"
{
    printf("Invalid float literal: %s at line %d\n", yytext, yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 372 "lexer.l"
{
    std::regex date_regex(R"((\d{1,2})[\-\/](\d{1,2})[\-\/](\d{4}))");
    std::regex time_regex(R"((\d{1,2}):(\d{2})(:(\d{2}))?(\s*(AM|PM))?)");
    std::regex hour_regex(R"((\d{1,2})\s*(AM|PM))");

    std::smatch match;
    std::string text(yytext);

    Date * date = nullptr;
    Time * time = nullptr;

    if (std::regex_search(text, match, date_regex)) {
        date = new Date();
        date->day = std::stoi(match[2].str());
        date->month = std::stoi(match[1].str());
        date->year = std::stoi(match[3].str());
    }

    if (std::regex_search(text, match, hour_regex)) {
        time = new Time();
        time->hour = std::stoi(match[1].str());

        if (match[2].str() == "AM") {
            time->format = AM;
        }
        else if (match[2].str() == "PM") {
            time->format = PM;
        }
    }

    if (std::regex_search(text, match, time_regex)) {
        time = new Time();
        time->hour = std::stoi(match[1].str());
        time->minute = std::stoi(match[2].str());
        time->second = match[4].matched ? std::stoi(match[4].str()) : 0;

        if (match[6].matched) {
            if (match[6].str() == "AM") {
                time->format = AM;
            }
            else if (match[6].str() == "PM") {
                time->format = PM;
            }
        }
    }


    datetime = DateTime();
    datetime.date = date;
    datetime.time = time;
    printf("Found a datetime literal: \n");
    printDateTimeLiteral(datetime);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 426 "lexer.l"
{
    printf("Invalid datetime literal: %s\n", yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 431 "lexer.l"
{
    printf("Datetime literal wasn't closed: %s\n", yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 436 "lexer.l"
{ printf("Found a separator left parenthesis: %s\n", yytext); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 437 "lexer.l"
{printf("Found a separator right parenthesis: %s\n", yytext);}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 438 "lexer.l"
{printf("Found a separator left curly brace: %s\n", yytext); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 439 "lexer.l"
{ printf("Found a separator right curly brace: %s\n", yytext); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 440 "lexer.l"
{printf("Found a separator question mark: %s\n", yytext); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 441 "lexer.l"
{printf("Found a separator point: %s\n", yytext); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 442 "lexer.l"
{printf("Found a separator exclamation mark: %s\n", yytext); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 443 "lexer.l"
{ printf("Found a separator comma: %s\n", yytext); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 444 "lexer.l"
{printf("Found a separator colon: %s\n", yytext); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 446 "lexer.l"
{printf("Found a identifier: %s\n", yytext);}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 448 "lexer.l"
{}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 449 "lexer.l"
{printf("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 450 "lexer.l"
{printf("Found end of line %d\n\n", yylineno - 1);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 451 "lexer.l"
{printf("File ended\n"); yyterminate();}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 453 "lexer.l"
ECHO;
	YY_BREAK
#line 3986 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 903 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 903 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 902);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 453 "lexer.l"


void removeUnderline(std::string* str) {
    if (str == nullptr) {
        return; 
    }
    str->erase(std::remove(str->begin(), str->end(), '_'), str->end());
}

void removeUnderline(char* str) {
    if (str == nullptr) {
        return; 
    }

    char* writePtr = str;
    char* readPtr = str;

    while (*readPtr != '\0') {
        if (*readPtr != '_') {
            *writePtr = *readPtr;
            writePtr++;
        }
        readPtr++;
    }

    *writePtr = '\0';
}


bool endsWith(const std::string& str, const std::string& suffix)
{
    return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
}

void printDateTimeLiteral(DateTime& datetime) {
    if (datetime.date != nullptr) {
        printf("Month: %d\n", datetime.date->month);
        printf("Day: %d\n", datetime.date->day);
        printf("Year: %d\n", datetime.date->year);
    }
    if (datetime.time != nullptr) {
        printf("Hour: %d\n", datetime.time->hour);
        printf("Minute: %d\n", datetime.time->minute);
        printf("Second: %d\n", datetime.time->second);
        printf("Time format: ");
        if (datetime.time->format == AM) {
            printf("AM\n");
        }
        else if (datetime.time->format == PM) {
            printf("PM\n");
        }
        else {
            printf("24-hour format\n");
        }
    }
}

void runTests() {
    DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };
    int numFiles = sizeof(files) / sizeof(files[0]);
    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        printf("Processing file: %s\n", files[i]);
        yylex();
        fclose(yyin);
        BEGIN(INITIAL);
        yylineno = 1;
    }
}

int main(int argc, char** argv) {
    if (argc > 1) {
        if (strcmp(argv[1], "--debug") == 0) {
            runTests();
            return 0;
        }
        fopen_s(&yyin, argv[1], "r");
        yylex();
    }
    else {
        printf("File not found");
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
+ Скобки и управляющие символы (Микулина)
*/
