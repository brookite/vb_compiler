#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[633] =
    {   0,
        0,    0,    0,    0,    0,    0,  160,  159,  156,  158,
      150,  126,  143,  154,  115,  123,  144,  145,  100,  103,
      151,  104,  149,  102,  135,  152,  153,  111,  105,  112,
      148,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  159,  101,   99,  159,  146,  147,  127,  129,  131,
      124,  125,  156,    0,  158,  143,  143,    0,  142,  143,
      116,    0,    0,  107,  108,  109,  138,  122,    0,  135,
      139,    0,  135,  135,  135,    0,  132,  118,  110,  114,
      113,  117,  155,  155,  155,   22,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   30,  155,  155,  155,  155,  155,  155,
      155,  155,  155,   34,   10,   11,  155,  155,   86,  155,
      155,  155,  155,  155,   87,  155,   16,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,   71,  155,
      155,  155,  155,  155,  155,  155,  155,    0,  121,  106,
      127,  128,  130,  124,    0,    0,    0,  143,    0,  143,
      143,  143,  143,  143,  136,  137,  138,  139,    0,    0,
      138,  135,  132,    0,  138,  135,  135,  135,    0,  135,
      140,    0,  132,  132,  132,    0,  119,  120,   73,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,   82,  155,  155,  155,
       56,  155,  155,  155,   84,  155,  155,  155,  155,  155,
      155,  155,  155,   13,  155,  155,   15,  155,   64,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  123,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,   70,
      155,  155,  155,  155,  155,  155,  155,   94,  157,    0,
        0,    0,    0,    0,  143,  143,  143,  143,  136,  136,
      136,  136,    0,  133,  137,  137,  137,  137,    0,  134,

        0,  138,  138,    0,  140,    0,  135,  138,    0,  140,
        0,  140,  132,  132,  132,  155,  155,  155,    2,  155,
       49,   75,  155,  155,  155,  155,   25,   77,    4,  155,
       51,   78,  155,  155,  155,  155,    6,   28,  155,  155,
      155,  155,   54,  155,  155,   83,    8,    0,  155,    9,
      155,  155,   85,  155,  155,  155,   12,   37,   63,  155,
      155,   39,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,   69,
       92,  155,  155,   20,   97,  155,  155,  155,  155,  155,
        0,    0,    0,    0,  143,  143,  143,  143,    0,  141,

      136,  136,  136,  133,  133,  133,    0,  137,  137,  137,
      134,  134,  134,    0,  138,    0,    0,  138,    0,  140,
      140,  140,  140,    0,  155,  155,   74,   23,   24,   50,
       76,    3,   26,    5,  155,  155,  155,   53,   80,    7,
      155,  155,  155,  155,    0,    0,    0,    0,   32,   98,
      155,  155,  155,   36,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,   43,  155,   67,  155,  155,
       91,  155,  155,  155,  155,  155,   21,   95,  155,   72,
        0,    0,    0,  141,  143,  143,    0,  143,  143,  143,
      133,  133,  133,  134,  134,  134,  138,  140,    0,  140,

      140,  140,  155,  155,  155,   52,   79,  155,  155,   55,
       31,    0,   59,    0,    0,    0,  155,  155,  155,   14,
      155,  155,   65,  155,   40,  155,  155,  155,   66,  155,
       44,   90,   68,   18,   45,   19,  155,  155,   47,    0,
        0,    0,    0,  143,  143,  143,  143,  140,  140,    1,
       48,  155,   29,   81,    0,    0,   60,    0,  155,  155,
       62,   38,   96,  155,  155,   89,  155,  155,  155,  155,
        0,    0,    0,    0,  143,  143,   27,    0,    0,    0,
       33,   35,   88,  155,  155,   17,  155,   93,    0,    0,
      143,    0,    0,   61,  155,   42,   46,    0,  143,    0,

        0,   58,   41,  143,    0,    0,  143,  143,    0,    0,
       57,  143,    0,  143,    0,  143,    0,  143,  143,  143,
        0,    0,    0,  143,  143,  143,    0,    0,    0,  143,
        0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,    9,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   44,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   44,   74,   75,   76,   77,   78,   79,   80,
       81,   44,   82,    1,   83,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    4,    3,    3,    3,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    1,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    8,    7,    7,    8,    7,
        7,    7,    7,    7,    7,    8,    7,    8,    7,    7,
        7,    7,    1,    1,    3,    1,    8,    6,    6,    6,
        6,    6,    6,    7,    7,    8,    7,    7,    8,    7,
        7,    7,    7,    7,    8,    7,    8,    7,    7,    7,
        7,    1,    1
    } ;

static const flex_int16_t yy_base[643] =
    {   0,
        0,    0,   81,   82,  376,  371,  370, 4828,   87,  329,
     4828, 4828,   90, 4828,   61, 4828, 4828, 4828,  291,  272,
     4828,  267,   78,  260,  127, 4828, 4828,   76, 4828,   79,
     4828,  110,  122,  200,  273,  341,   80,  155,  215,  281,
      268,  325,  271,  330,  381,  391,  439,  435,  478,  485,
      401,  222,  220,  212,   86, 4828, 4828,    0, 4828,  107,
        0, 4828,  119,  132,  231,  132,  212,  247,  211,  559,
     4828,    0,  175, 4828, 4828, 4828,  537, 4828,  104,  129,
     4828,  223, 4828, 4828, 4828,  218,  615,  167, 4828, 4828,
     4828,  151,  116,  462,  544,  526, 4828,  550,  581,  604,

      641,  661,  640,  372,  662,  677,  698,  712,  697,  743,
      752,  761,  770,  383,  789,  767,  798,  777,  820,  832,
      834,  842,  852,  879,  875,  885,  903,  922,  906,  912,
      959,  957,  968,  958,  994, 1005, 1015,  968,  336, 1025,
     1027, 1061, 1072, 1079, 1077, 1115, 1116, 1122, 1137, 1143,
     1135, 1161, 1172, 1188, 1204, 1180, 1194,  120, 4828, 4828,
        0, 4828, 4828,    0,  151, 1270,  161, 1258, 1274,  291,
     1278,  299,  314,  355, 1287, 1291, 1338, 4828,  515,  141,
     1353,  149,  470,  158, 1289, 4828, 4828, 4828,  179,    0,
     4828,  525, 4828, 4828, 4828, 1059, 4828, 4828, 1344, 1348,

     1349, 1392, 1385, 1403, 1425, 1407, 1443, 1447, 1465, 1458,
     1470, 1498, 1492, 1516, 1527, 1507, 1525, 1551, 1570, 1541,
     1582, 1591, 1598, 1617, 1635, 1624, 1638, 1645, 1661, 1682,
     1689, 1688, 1708, 1715, 1729, 1735, 1755, 1761, 1776, 1770,
     1802, 1816, 1813, 1822, 1824, 1855, 1861, 1867, 1882, 1888,
     1903, 1925, 1926, 1927, 1950, 1983, 1962, 1985, 1961, 1984,
     2018, 2022, 2027, 2045, 2063, 2070, 2081, 2105, 2123, 2117,
     2139, 2155, 2157, 2166, 2198, 2205, 2216, 2207,  106,  191,
     2286,  232,  186,  201, 2202,  458,  760, 1089, 2066, 4828,
     4828, 4828, 2206, 2247, 2279, 4828, 4828, 4828, 2265, 2303,

      242, 2332, 2353,  603, 2376,  253,  303, 2391,  508, 2398,
      321, 2425, 4828, 4828, 4828, 2434, 2329, 2416, 2435, 2444,
     2471, 2481, 2490, 2492, 2492, 2500, 2523, 2544, 2545, 2542,
     2545, 2563, 2565, 2591, 2598, 2601, 2602, 2607, 2635, 2640,
     2662, 2663, 2674, 2685, 2699, 2713, 2736, 2720, 2760, 2761,
     2769, 2797, 2775, 2802, 2820, 2811, 2835, 2844, 2853, 2862,
     2862, 2868, 2886, 2910, 2901, 2920, 2931, 2934, 2965, 2971,
     2972, 2993, 3007, 3028, 3029, 3030, 3051, 3052, 3086, 3085,
     3087, 3078, 3109, 3124, 3125, 3135, 3144, 3170, 3146, 3173,
      621,  345, 1129, 1301,  531, 1457, 3210, 1338, 1401,   88,

     4828, 4828, 4828, 4828, 4828, 4828, 3188, 4828, 4828, 4828,
     4828, 4828, 4828, 3190, 3231,  553,  398, 3240,  775, 3275,
     3278, 3297, 3324,  644, 3241, 3298, 3303, 3305, 3338, 3345,
     3346, 3360, 3369, 3381, 3399, 3415, 3418, 3408, 3434, 3454,
     3424, 3463, 3474, 3482,   66,  262,  638,  273, 3493, 3500,
     3514, 3533, 3540, 3549, 3551, 3560, 3584, 3586, 3595, 3605,
     3615, 3624, 3649, 3657, 3645, 3673, 3689, 3691, 3692, 3710,
     3712, 3745, 3759, 3760, 3780, 3769, 3795, 3796, 3806, 3816,
      415,  163, 3861, 4828, 1003, 3871, 3890, 1358,  867, 1176,
     4828, 4828, 4828, 4828, 4828, 4828, 3865, 3880,  430, 3925,

     3940, 3947, 3894, 3918, 3967, 3968, 3972, 3990, 4011, 4012,
     4023,  314, 4828,  420,  440,  456, 4034, 4046, 4067, 4068,
     3990, 4068, 4088, 4079, 4090, 4102, 4126, 4133, 4124, 4147,
     4169, 4174, 4178, 4180, 4192, 4213, 4214, 4235, 4228,  461,
      534,  544,  546, 1425, 1901, 1527, 1605, 4261, 4280, 4271,
     4275, 4282, 4310, 4318,  574,  659, 4828,  681, 4328, 4331,
     4334, 4337, 4352, 4378, 4362, 4368, 4386, 4407, 4409, 4434,
      632,  708, 1644, 1735, 2061, 4466, 4448,  271,  721,  724,
     4452, 4457, 4459, 4490, 4492, 4499, 4513, 4504,  734, 4552,
     1770,  738,  369, 4828, 4540, 4546, 4554, 1984, 4630, 4636,

      778, 4828, 4568, 2299, 1042,  805,  499, 2149,   68,  745,
     4828, 2289,  832, 4645, 4656, 4662, 4668, 2361, 1224, 1482,
      837,  832,  844, 2679, 2256, 2775,  875, 3144, 3277, 4678,
     4691, 4828, 4764, 4772, 4780, 4786, 4789, 4797, 4805, 4813,
     4817, 4819
    } ;

static const flex_int16_t yy_def[643] =
    {   0,
      632,    1,  633,  633,  634,  634,  632,  632,  632,  632,
      632,  632,  635,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  636,  636,  636,  636,  636,   35,   35,  636,  636,
       35,   35,   35,   40,   40,   40,   45,   45,   40,   40,
       40,  637,  632,  632,  637,  632,  632,  638,  632,  632,
      639,  632,  632,  632,  632,  635,  635,  632,  640,  635,
      632,  641,  632,  632,  632,  632,  632,  632,  632,   25,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,   40,   40,   40,  632,   40,   45,   40,

       40,   40,   45,   45,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   45,   45,   40,   40,   45,   45,   45,
       45,   40,   40,   40,  108,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   45,   35,   45,
       45,   45,   45,   45,   40,   45,   45,   45,   45,   45,
       40,   40,   40,   40,   40,   45,   45,  637,  632,  632,
      638,  632,  632,  639,  632,  632,  640,  635,  632,  635,
      635,  635,  635,  635,  642,  632,  632,  632,  632,  632,
      632,   25,   87,  632,  632,  632,  632,  632,  632,   25,
      632,  632,  632,  632,  632,  632,  632,  632,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   40,   40,   40,   40,   40,   40,   40,   45,
       45,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       40,   40,   40,   40,   40,   40,   40,   40,  632,  632,
      632,  632,  632,  632,  635,  635,  635,  635,  642,  632,
      632,  632,  632,  289,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,   25,  632,  632,  632,
      632,  632,  632,  632,  632,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   45,   45,   45,   45,   45,   40,
       40,   40,   40,   40,   40,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,  632,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   40,
       45,   45,   45,   45,   45,   40,   40,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   40,   40,   40,   40,   40,   40,   40,   45,   45,
      632,  632,  632,  632,  635,  635,  635,  635,  632,  640,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,   40,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   40,   40,   40,   40,   40,   40,
       45,   45,   45,   40,  632,  632,  632,  632,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       45,   45,   45,   45,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
      632,  632,  632,  632,  635,  635,  632,  635,  635,  635,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,   40,   40,   45,   45,   45,   45,   45,   45,
       45,  632,  632,  632,  632,  632,   45,   45,   45,   45,
       40,   40,   40,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  632,
      632,  632,  632,  635,  635,  635,  635,  632,  632,   45,
       45,   45,   45,   45,  632,  632,  632,  632,   40,   40,
       40,   40,   40,   40,   45,   45,   45,   45,   45,   45,
      632,  632,  632,  632,  635,  635,   45,  632,  632,  632,
       45,   45,   45,   45,   45,   45,   45,   45,  632,  632,
      635,  632,  632,  632,   45,   45,   45,  632,  635,  632,

      632,  632,   45,  635,  632,  632,  635,  635,  632,  632,
      632,  635,  632,  635,  632,  635,  632,  635,  635,  635,
      632,  632,  632,  635,  635,  635,  632,  632,  632,  635,
      632,    0,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632
    } ;

static const flex_int16_t yy_nxt[4912] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,    8,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   39,   39,   41,   42,
       43,   44,   45,   39,   46,   47,   48,   49,   39,   50,
       51,   39,   52,   53,    8,   54,   55,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   39,   39,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   39,   50,   51,
       39,   56,   57,   59,   59,   71,   60,   60,   63,  610,
       63,   67,   68,   67,   69,   72,   69,   77,   77,   88,

       89,   90,   73,   91,   92,  157,  157,  120,  279,   70,
       70,   94,  162,  512,   93,   94,   93,   93,   93,   93,
       63,  121,   63,  181,  181,   72,   93,  122,   93,   93,
       93,   93,   73,  165,  632,  165,  163,  120,   69,  157,
      157,   94,  512,   64,   79,   94,   80,   80,  182,  182,
       95,  121,  165,  279,  165,   96,  122,   81,   82,   81,
      177,  177,   83,   98,   97,   84,  163,   69,  182,  182,
       97,   81,   85,   99,   86,  198,   97,  185,  185,  481,
       95,  481,   94,   87,   96,  183,   94,   81,   82,   81,
       94,  197,   83,   98,  176,   84,  123,  180,  310,  310,

       81,   85,   99,   86,   93,  183,   93,   93,   93,   93,
      391,  391,   94,   67,   68,   67,   94,   69,   69,   93,
       94,   93,   93,   93,   93,  393,  123,  100,  101,  102,
      103,   70,   70,   65,  104,  105,  160,  184,  106,  184,
      394,  107,  185,  185,  159,  108,  109,  110,   68,   68,
       68,  392,  392,  186,   97,  393,  187,  100,  101,  102,
      103,  302,  302,  188,  104,  105,  166,  166,  106,   97,
      394,  107,  420,  420,  108,  109,  110,   93,  158,   93,
       93,   93,   93,  186,   78,   93,  187,   93,   93,   93,
       93,   76,  188,  632,  513,   94,   75,   69,   94,   94,

      111,  632,  132,  127,  112,   69,   94,  516,  113,  128,
      285,  285,  133,  124,  114,   74,  632,  592,  286,  286,
       69,  125,  182,  182,  513,   94,  126,   97,   94,   94,
      111,   65,  132,  127,  112,   97,   94,  516,  113,  128,
      312,  312,  133,  124,  114,   93,  592,   93,   93,   93,
       93,  125,   94,  287,  555,  126,  129,  632,  134,  183,
       94,   69,  135,   94,  483,  483,  130,   94,  115,  632,
       94,  254,  136,   62,  137,   94,  131,  255,   62,  116,
      632,  117,   94,  287,  555,  118,  129,  632,  134,  632,
       94,  119,  135,   94,  288,   97,  130,   94,  115,  211,

       94,  254,  136,  137,   94,  131,  632,  255,  138,  116,
       94,  117,  632,   94,  118,  602,   94,  418,  418,   94,
      119,   94,  141,   94,  288,  139,   94,   94,  140,  211,
      228,   94,  632,   94,  540,  540,   94,  632,  138,  632,
       94,   94,  156,   94,  602,   94,   94,  632,   94,  500,
      500,   94,  141,   94,  139,   94,   94,  140,  556,  228,
      632,   94,   94,   94,   69,   94,   94,  142,  557,  148,
      143,   94,  156,  144,  145,   94,  149,  397,  397,  150,
      571,  571,   94,   94,  632,  146,  147,  306,  556,  307,
      307,  558,   94,  632,   94,  632,   94,  142,  557,  148,

      143,  632,   94,  144,  145,   69,  149,   94,  150,  632,
       94,   94,   94,  151,  146,  147,  152,   94,  153,  155,
      608,  558,  632,  154,   94,   94,  183,  308,  308,  301,
       94,  301,   94,  632,  302,  302,   94,   69,  632,  311,
       94,  311,  632,  151,  312,  312,  152,   94,  153,  155,
      485,  485,  154,  572,  572,   94,  177,  177,   94,   94,
      168,  169,  168,  632,  309,   69,   94,  178,  179,  178,
      632,   94,  415,  415,  199,  170,   94,  170,  171,  171,
      172,  178,   94,  573,   94,  574,  173,  632,   94,   94,
       94,  200,  632,  180,  632,   94,   94,  178,  179,  178,

       94,  174,  632,  578,  199,  632,   94,  632,   94,  416,
      178,  632,   94,  573,   94,  574,  173,  417,   94,  417,
       94,  200,  418,  418,   94,  201,  632,  202,   94,  203,
      632,  174,  189,  578,  190,  190,   94,  481,   94,  481,
      482,  482,  204,  632,   94,  191,  192,  191,  632,  205,
      193,  589,  589,  194,  201,  632,  202,   94,  203,  191,
      195,  632,  196,  423,  423,  632,   94,  209,  210,  514,
      632,   87,  204,   94,   94,  191,  192,  191,  205,  632,
      193,   94,  206,  194,   94,  515,   94,   94,  191,  195,
      579,  196,  207,   94,   94,  208,  632,  209,  210,  514,

      424,   94,  212,   94,  213,  632,   94,   94,  632,   94,
      632,   94,  206,   94,  515,   94,   94,  214,  632,  580,
      579,  207,   94,   94,   94,  208,  215,  590,  590,   94,
       94,   94,  212,  632,  213,   94,   94,   94,  216,   94,
      217,  632,   94,   94,   94,  632,  218,  214,  221,  580,
      593,   94,  219,  598,  598,  594,  215,   94,  220,   94,
       94,  398,  399,  398,  613,  613,  400,   94,  216,  632,
      217,   94,   94,  601,   94,   94,  218,  221,  222,  632,
      593,  223,  219,   94,   94,  594,   94,  220,  224,  499,
      226,  499,   94,   94,  500,  500,  632,   94,  225,   94,

      632,   94,   94,  601,  232,   94,   94,   94,  222,  227,
       94,  223,  230,   94,   94,   94,   94,  224,  229,  606,
      226,   94,   94,   94,   94,  632,   94,  225,  231,   94,
       94,   94,   94,   94,  232,   94,   94,   94,   94,  227,
       94,  230,  632,   94,   94,  611,   94,   94,  229,  606,
       94,  615,  615,   94,  632,  233,  627,  627,  231,   94,
       94,   94,   94,  632,   94,   94,  632,   94,   94,  632,
      234,  628,   94,   69,   94,  611,   94,   94,  235,   94,
      632,   94,  236,  629,   94,  233,  632,   94,  632,   94,
      632,   94,   94,   94,  631,  631,   94,   94,  237,  632,

      234,  628,  632,   94,   94,   94,  546,  235,   94,  238,
       94,   94,  236,  629,   94,   94,   94,   94,  632,   94,
      632,  239,   94,  632,   94,  240,   94,  237,  632,  632,
       94,  632,  632,   94,  632,   94,  546,  632,   94,  238,
      241,   94,  244,   94,   94,   94,   94,   94,   94,   94,
      239,   94,   94,   94,   94,  240,  632,   94,  632,   94,
      632,  632,  242,  243,  632,   94,  632,   94,   94,  632,
      241,  632,  244,   94,   94,  632,   94,   94,  632,  632,
       94,  632,   94,  632,   94,  632,   94,  245,  246,   94,
       94,   94,  242,  243,  250,   94,   94,   94,   94,   94,

       94,  632,   94,   94,   94,  632,  247,  248,   94,   69,
      632,  632,  253,   94,  249,   94,  632,  245,  246,   94,
       94,   94,  544,  544,  250,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  247,  248,   94,   94,   94,
      632,  253,   94,  249,   94,   94,  252,   94,  632,  632,
       94,  251,   94,  256,  257,   94,   94,  258,  632,  632,
       94,  609,  609,  610,   94,  632,  259,   94,   94,   94,
      632,   94,   94,  260,   94,   94,  252,   94,  632,   94,
      251,  632,   94,  256,  257,   94,  632,  258,   94,   94,
      398,  399,  398,  632,  313,  400,  259,  314,   94,   94,

       94,   94,  260,   94,  315,   94,  263,  632,   94,   94,
      262,  632,  261,  632,  632,  632,   94,  265,   94,   94,
      264,  632,   94,   94,  313,  632,   94,  314,  632,   94,
      399,  399,  399,  315,   94,  484,  263,   94,  632,   94,
      262,  261,  266,   94,  270,   94,  267,  265,   94,   94,
      264,   94,   94,  271,  632,   94,  268,  632,  632,  269,
       94,  632,   94,   94,   94,  632,   94,   94,  632,   94,
       94,  632,  266,   94,  270,  273,  267,  632,  632,   94,
       94,   94,   69,  271,   94,  632,  268,   94,  269,   94,
      272,   94,   94,   94,   94,   94,  632,   94,   94,  632,

       94,   94,  274,  632,   94,  273,   94,   94,  632,   94,
       94,  632,   94,   94,  632,  547,   94,   94,  275,  272,
       94,   94,  276,   94,  278,  632,  632,   94,   94,  632,
       69,   94,  274,   94,   94,   94,   94,   94,   94,  277,
      632,   94,   94,  632,   94,  547,   94,  275,  632,   94,
       94,   94,  276,  278,  632,  632,   94,  632,   94,  168,
      169,  168,   94,  625,   69,  632,   94,   94,  632,  277,
       94,  169,  169,  169,   94,  169,  169,  169,   94,  168,
      169,  168,  632,  632,   69,  173,  280,  632,  280,  281,
      281,  282,  632,  625,  170,  632,  170,  283,  632,  172,

      174,  283,  399,  399,  399,  173,  632,  484,  308,  308,
      295,  632,  284,  632,  632,  173,  284,  632,  632,   81,
      174,   81,  290,  632,  632,  291,  296,  283,  632,  297,
      174,  283,  292,   81,  293,  173,  298,  632,  299,  398,
      399,  398,  284,  294,  400,  309,  284,  300,  632,   81,
      174,   81,  290,  632,  632,  291,  296,  177,  177,  297,
      632,  292,   81,  293,   69,  298,  632,  299,  178,  179,
      178,  316,  303,  303,  632,   94,   94,  545,  545,  632,
      318,  632,  178,   81,  304,   81,  317,  632,   94,  632,
      632,   94,   94,   94,  180,   94,   94,   81,  178,  179,

      178,  316,  399,  399,  399,   94,   94,  484,  632,  305,
      318,  178,  320,   81,  304,   81,  317,   94,  632,   94,
       94,   94,   94,  319,   94,   94,   81,  632,  632,   94,
       94,   69,   94,  632,   94,  632,   94,  632,  632,   94,
      632,  321,  320,  632,  575,  575,  632,   94,  323,   94,
       94,   94,   94,  319,   94,  632,  322,  632,   94,  632,
       94,   94,  632,   69,   94,   94,  632,  632,   94,   94,
       94,  321,   94,  395,  325,  395,   94,  632,  323,   94,
       94,  632,   94,   94,  632,   94,  322,   94,   69,  324,
       94,   94,   94,  632,   94,  632,  327,   94,   94,  632,

       94,   94,   94,  632,  325,   94,  632,  632,  632,   94,
      632,  326,   94,  632,  328,   94,   94,   94,  324,   94,
       94,  626,   94,   94,   94,   94,  327,   94,  398,  399,
      398,   94,   94,  400,   94,  632,  632,  330,   94,   94,
      326,   94,   94,  328,  329,   94,   94,   94,   94,  331,
      632,  626,  333,  334,   94,   94,   94,   94,  632,   94,
      632,   94,   94,  332,  632,   94,  330,   94,   94,   94,
       94,   94,   94,  329,   94,  632,  335,   94,   94,  331,
      632,  333,  334,   94,  632,  338,   94,   94,   94,   94,
       94,   94,  336,  332,  632,   94,   94,   94,   94,   94,

      632,   94,   94,  337,  632,  335,  398,  399,  398,   94,
       94,  400,  632,   94,  338,   94,  632,   94,  632,  632,
      632,   94,  336,   94,  339,   94,   94,  632,  632,   94,
       94,  340,   94,  337,  632,  632,   94,  632,  341,   94,
       94,  632,  632,   94,   94,  399,  399,  399,  632,   94,
      484,  342,  632,   94,  339,   94,   94,   94,   94,  344,
       94,  340,   94,  632,   94,   94,  343,   94,  341,   94,
       94,  632,   94,  345,  632,   94,  632,   94,   94,   94,
       94,  342,  632,   94,  632,   94,   94,   94,  632,  344,
       94,   94,  348,   94,   94,  346,  343,   94,   94,  632,

       94,   94,  632,  345,  632,   94,   94,   94,   94,   94,
      632,  632,   94,  347,   94,   94,  632,  632,  632,   94,
       94,   94,   94,   94,  632,  346,  632,   94,   94,   94,
      632,   94,  632,  349,   94,   94,  399,  399,  399,  632,
       94,  484,  632,  347,   94,  632,  632,   94,   94,  632,
       94,   94,   94,   94,  350,   94,   94,  632,   94,   94,
      351,   94,  349,   94,  352,  632,  632,   94,  632,   94,
       94,  599,  600,  599,   94,   94,  400,   94,   94,  632,
       94,  632,   94,  350,  632,   94,  632,   94,  632,  351,
      632,   94,  354,   94,  352,   94,  353,   94,  632,   94,

       94,   94,   94,   94,  632,   94,   94,  355,   94,   94,
       94,  356,  632,  632,  632,   94,   94,   94,  632,  632,
      632,   94,  354,   94,  632,   94,  353,  632,  632,   94,
      632,   94,   94,  357,   94,   94,  632,  355,   94,  632,
       94,  356,   94,  632,   94,   94,   94,   94,   94,  358,
       94,  360,  632,   94,   94,  359,   94,  632,   94,  632,
      632,   94,   94,  357,   94,  632,  632,   94,   94,  632,
      632,   94,   94,  632,  632,   94,   94,  632,   94,  358,
      632,  360,   94,   94,   94,  359,   94,   94,   94,  632,
       94,  632,   94,  361,   94,  632,   94,   94,  632,   94,

       94,  632,   94,  632,  632,   94,  632,   69,   94,   94,
      632,   94,   94,  362,   94,   94,  363,  632,   94,  364,
      576,  576,  632,  361,   94,  632,   94,  632,   94,   94,
       94,   94,   94,  632,   94,   94,  632,   94,  365,   94,
       94,  632,  362,   94,  632,   94,  363,   94,  632,  364,
       94,  632,   94,  367,   94,   94,  632,  632,   94,  632,
       94,   94,  632,  366,   94,  632,  632,  632,  365,   94,
       94,   94,   94,   94,   94,  368,   94,   94,  632,   94,
      632,  632,   94,  367,   94,  600,  600,  600,   94,   94,
      484,  632,  371,  366,   94,  632,  369,   94,   94,   94,

       94,   94,   94,   94,  368,   94,   94,   94,   94,   94,
       94,   94,   94,  632,  632,  632,  632,  632,   94,   94,
      372,  370,  371,   94,  632,  369,   94,   94,   94,   94,
       94,  373,   94,  632,   94,   94,  632,   94,   94,  632,
       94,   94,   94,  632,  632,   94,  632,  632,  632,   94,
      372,  370,  632,  375,   94,  632,   94,   94,   94,   94,
      373,   94,   94,  632,  374,   94,   94,   69,  632,   94,
      632,  376,   94,  632,   94,   94,  632,  632,  632,   94,
      591,  591,  632,  375,   94,  632,  632,  632,  632,  377,
       94,   94,   94,  374,   94,   94,  378,   94,   94,  632,

      376,  290,   94,   94,  291,  632,  632,   94,   94,  632,
       94,  292,  632,  293,   94,  632,  379,   94,  377,  632,
       94,   94,  294,  380,  632,   94,  378,   94,   94,  632,
      632,  290,   94,  632,  291,  632,   94,  632,   94,   94,
      292,  632,  293,   94,   94,  379,   94,  381,  632,   94,
       94,  632,   94,  380,   94,   69,  632,   94,  382,  632,
      632,   94,   94,  632,   94,  632,  632,   94,  612,  612,
      383,   94,  632,  632,   94,  632,  632,  381,   94,  384,
       94,   94,  632,  632,   94,  632,  385,   94,  382,   94,
       94,  632,  632,   94,  632,   94,   94,   94,   94,  383,

       94,   94,   94,  386,  632,  632,  387,  632,   69,  384,
      632,   94,  632,   94,  632,  632,  385,   94,  395,   94,
      395,  396,  396,  632,  632,   94,  632,   94,   94,   94,
       94,   94,  386,  388,  632,  632,  387,   94,   94,   94,
       94,  401,  632,   94,  402,   94,  389,   94,   94,  632,
       94,  403,   94,  632,  390,  632,   94,  398,  399,  398,
       94,   94,  400,  388,  632,  632,  632,   94,   94,   94,
      632,  401,   94,  632,  402,   94,  389,   94,   94,   94,
      403,   94,  404,  632,  390,  405,   94,  169,  169,  169,
       94,  632,  406,  632,  407,   69,  632,  632,  295,  632,

      408,  632,  280,  409,  280,   69,  632,  282,  614,  614,
      410,  632,  404,  283,  296,  405,  632,  297,  607,  607,
      608,  406,  295,  407,  298,  632,  299,  632,  284,  632,
      408,  632,  632,  409,  632,  300,  632,  632,  411,  410,
      632,  412,  632,  283,  296,  632,  632,  297,  413,  632,
      414,  415,  415,  298,  632,  299,  632,  632,  284,  300,
      426,   94,  178,  632,  178,  632,  632,   69,  411,   94,
      632,  412,  303,  303,   94,  632,  178,  413,  632,  414,
      624,  624,  632,   81,  304,   81,  632,  632,  416,  632,
      426,   94,  178,  632,  178,  303,  303,   81,  632,   94,

      632,  632,  632,   94,  632,  178,  191,  419,  191,  305,
      308,  308,  632,   81,  304,   81,  632,  421,  421,  632,
      191,   81,  632,   81,  632,  632,   81,  632,  191,  192,
      191,  632,  305,  632,  632,   81,  191,  419,  191,  632,
      632,  632,  191,  632,  423,  423,  632,  309,  427,  191,
      632,   81,  632,   81,  422,  191,   94,  191,  191,  192,
      191,   94,  632,  632,   81,  632,   94,   94,  632,  191,
      632,  191,  425,  632,   94,   94,   94,  632,  427,   94,
       94,  424,  428,  632,   94,  191,   94,  191,  632,   94,
       94,  632,  632,  632,  632,  632,   94,   94,  191,  632,

      632,  632,  425,   94,   94,   94,   94,  632,   94,   94,
      632,   94,  428,   94,   94,  632,   94,  632,   94,   94,
      632,   94,   94,  430,   94,  632,   94,   94,  429,  632,
       94,  432,   94,   94,  632,   94,  431,   94,  632,   94,
      632,   94,  632,   94,   94,   94,  632,   94,  632,   94,
       94,   94,   94,  430,   94,   94,  632,   94,  429,  632,
       94,  432,   94,  632,   94,  431,   94,   94,   94,  632,
       94,   94,   94,   94,   94,  632,   94,   94,  632,  632,
       94,  632,   94,  632,  632,   94,  632,  433,   94,   94,
       94,   94,   94,  632,  632,   94,   94,   94,  632,   94,

      632,   94,   94,   94,   94,   94,  632,   94,   94,  632,
       94,  434,   94,  632,  632,   94,  433,   94,   94,   94,
       94,   94,  632,   94,  632,   94,  435,   94,   94,   94,
       94,   94,  632,   94,   94,   94,   94,   94,   94,   94,
      434,  632,  632,   94,  436,  437,   94,  632,   94,   94,
      632,   94,  632,   94,   94,  632,  435,  632,   94,   94,
       94,   94,   94,  632,   94,   94,  438,   94,   94,  632,
      632,  632,   94,  436,  437,   94,  632,   94,   94,   94,
       94,  632,   94,   94,   94,   69,  439,   94,  632,   94,
       94,  632,   94,  632,  632,  440,  438,   94,  630,  630,

      632,   94,  632,  632,  441,  632,   94,   94,   94,   94,
       94,   94,   94,   94,  632,  439,   94,  632,   94,   94,
       94,   94,  632,  348,  442,  440,   94,  632,  632,   94,
      632,   94,   94,  632,  441,   94,   94,  443,   94,   94,
       94,  632,   94,   94,  632,  632,   94,   94,  632,  632,
       94,  632,  445,  632,  442,  446,   94,   94,   94,  632,
       94,   94,  632,   94,  632,  447,  632,  443,  632,  448,
       94,  444,   94,  632,  632,   94,  398,  399,  398,  632,
       94,  400,  445,   94,  632,  446,   94,   94,   94,   94,
      632,  449,  632,   94,  447,  632,   94,  632,  448,  632,

      450,  444,   94,  632,   94,   94,  632,   94,   94,   94,
      632,  632,   94,   94,  632,  632,   94,   94,   94,   94,
      632,  449,   94,  632,   94,  632,   94,  632,  632,   94,
      450,  632,   94,   94,   94,  632,   94,   94,   94,  632,
      632,   94,   94,  451,   94,   94,  452,   94,   94,   94,
      632,   94,  632,  453,   94,   94,  632,  454,   94,   94,
      632,  632,   94,  632,   94,  632,  632,   94,   94,  632,
       94,   94,  451,   94,  632,  452,  632,   94,   94,   94,
       94,  632,   94,  453,   94,  632,  454,   94,   94,  456,
      632,   94,   94,   94,   94,   94,   94,   94,  632,  632,

       94,   94,   94,  632,  632,  632,   94,  455,   94,   94,
       94,   94,   94,   94,  632,   94,  632,   94,  632,  456,
       94,  457,  632,  632,   94,   94,   94,  632,   94,   94,
       94,  632,   94,   94,  632,   94,  455,   94,   94,  458,
      632,   94,  459,   94,   94,   94,  632,  632,   94,  632,
      632,  457,   94,  632,   94,  632,  632,   94,   94,   94,
       94,  462,   94,   94,  632,  460,  632,   94,  632,  458,
      461,   94,  459,  632,   94,  632,   94,   94,   94,  632,
      632,   94,   94,   94,  632,  632,   94,  632,  632,  632,
       94,  462,   94,   94,  460,  632,  463,  632,   94,   94,

      461,   94,  632,  632,  632,   94,  464,   94,  632,   94,
       94,  632,   94,  465,  632,   94,   94,  632,   94,   94,
       94,  632,   94,  632,  632,  632,  463,  632,   94,   94,
      632,  632,  466,  632,   94,  632,  464,   94,   94,  632,
       94,   94,  632,  465,   94,   94,  632,   94,   94,  632,
       94,  467,  632,  632,   94,   94,   94,   94,  469,  468,
      632,  470,  466,  632,   94,  632,   94,  632,  632,   94,
      632,  632,   94,   94,   94,   94,   94,   94,   94,   94,
      467,  632,  632,   94,  632,   94,   94,   94,  469,  468,
      472,  470,  632,  632,  632,   94,   94,  471,   94,   94,

      632,   94,   94,   94,   94,   94,   94,  632,   94,   94,
       94,  632,   94,   94,   94,  632,  632,  632,  474,  632,
      472,  473,  632,   94,   94,   94,  471,   94,   94,   94,
       94,   94,   94,   94,   94,  632,  632,  632,  475,  632,
       94,   94,   94,   94,   94,  399,  399,  399,  474,   94,
      484,  473,   94,  632,   94,  632,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  476,   94,  475,   94,
       94,   94,  632,   94,  632,   94,   94,  477,  632,   94,
       94,  632,  632,   94,   94,  632,   94,   94,  632,   94,
      479,  632,  632,   94,   94,   94,  476,   94,   94,   94,

       94,  632,   94,   94,  480,   94,   94,  477,  478,   94,
       94,  486,  487,  486,   94,   94,  400,   94,   94,  479,
       94,  632,   94,  491,  632,  494,  492,  632,  495,  632,
       94,  488,   94,  493,  480,  496,  632,  489,  478,  632,
       94,  632,  632,  632,   94,  632,   94,  632,  632,   94,
      415,  415,  490,  491,  632,  494,  492,  632,  495,  497,
      497,  178,  493,  178,  496,  632,  632,  489,  632,  632,
       81,  632,   81,   94,  632,  178,  632,  632,  399,  399,
      399,   94,  490,  484,   81,  632,  503,  416,  632,  632,
      632,  178,  632,  178,  501,  501,  498,  421,  421,  632,

       81,  632,   81,   94,  178,  191,  419,  191,  191,  192,
      191,   94,  632,   81,  632,  503,  421,  421,  632,  191,
      632,  632,  191,  632,  632,  504,  632,  191,  192,  191,
       94,  502,   94,  632,  422,  191,  419,  191,  191,  192,
      191,  191,   94,  423,  423,   94,  632,   94,  191,   94,
       94,  191,   94,  422,  191,  504,  191,  191,  192,  191,
       94,  632,   94,  632,  632,   94,  632,  632,  191,  632,
      191,   94,   94,   94,   94,  632,   94,  632,   94,   94,
      424,   94,   94,  632,  191,   94,  191,   94,  632,   94,
       94,  632,   94,   94,  632,   94,   94,  191,  632,  632,

      632,  632,   94,   94,   94,  632,  632,   94,   94,  632,
      632,   94,  632,   94,   94,  632,   94,   94,   94,   94,
      632,   94,   94,  632,  632,   94,   94,  632,   94,  632,
      632,   94,  632,   94,  632,  632,   94,  632,   94,  505,
       94,  632,   94,  632,   94,   94,  506,   94,   94,  632,
       94,   94,  632,   94,   94,   94,  632,   94,   94,  632,
       94,   94,  632,   94,  507,  632,   94,  632,  508,  505,
       94,   94,  632,   94,   94,  632,  506,   94,   94,   94,
       94,   94,   94,  632,  632,   94,   94,  632,   94,   94,
      509,  632,   94,  507,   94,  632,   94,  508,  632,   94,

       94,   94,  632,  632,   94,  510,  632,   94,   94,  632,
       94,  632,  632,  632,  511,  632,   94,  632,   94,  632,
      509,   94,   94,  632,   94,   94,  632,   94,   94,  632,
      632,   94,   94,   94,  632,  510,   94,  632,   94,   94,
       94,  632,  632,  632,  511,   94,   94,   94,  632,  517,
       94,  632,   94,  632,   94,   94,   94,  632,  632,   94,
      632,  632,   94,   94,  632,   94,  632,   94,  518,  632,
       94,  519,   94,   94,   94,  632,   94,  632,   94,  517,
       94,   94,  520,   94,   94,   94,  632,  632,   94,   94,
      632,   94,   94,  632,   94,   94,   94,  632,  518,  632,

       94,  519,   94,   94,  632,  521,  632,   94,  632,  632,
       94,   94,  520,   94,   94,  632,   94,  632,   94,   94,
      632,   94,   94,   94,  522,   94,   94,   94,  632,   94,
       94,   94,  523,  632,  521,  524,  525,   94,  632,  632,
       94,  632,  526,  632,  632,   94,   94,  632,   94,  632,
       94,   94,  632,  632,  522,  632,   94,   94,   94,   94,
       94,  523,   94,  632,  632,  524,  525,   94,   94,   94,
      527,   94,  526,  632,  632,   94,   94,   94,  528,   94,
      632,   94,  632,  632,   94,  530,  529,  632,   94,  632,
       94,   94,  632,   94,  632,  632,   94,   94,  632,  527,

       94,   94,  632,  632,   94,   94,   94,   94,  528,  632,
      632,  632,  632,   94,   94,  530,  529,  632,   94,   94,
      632,   94,   94,   94,   94,   94,  632,  632,  632,  531,
       94,   94,   94,   94,   94,   94,   94,   94,  532,  632,
      533,  632,   94,   94,   94,  632,  632,   94,  632,  632,
       94,   94,   94,   94,   94,   94,  632,   94,  632,  531,
      632,   94,   94,   94,  632,   94,   94,  532,  632,  632,
      533,  632,   94,  632,   94,  632,  534,   94,  632,  632,
       94,  632,   94,  632,   94,   94,   94,  632,  535,  632,
       94,   94,   94,  536,  632,  632,  632,  632,  632,   94,

       94,   94,  538,  632,   94,   94,  534,   94,  632,   94,
      632,  632,   94,  632,   94,   94,  632,  632,  535,   94,
       94,   94,   94,  536,  632,   94,  537,   94,   94,   94,
       94,   94,  538,   94,   94,   94,   94,  632,   94,   94,
       94,   94,   94,   94,  632,  632,   94,  632,   94,  632,
       94,   94,  539,  632,   94,  537,   94,   94,   94,  632,
      632,   94,  487,  487,  487,   94,   94,  484,   94,   94,
       94,  632,  486,  487,  486,  632,   94,  400,   94,  632,
       94,  539,  541,  632,  497,  497,   94,  632,  542,  632,
       94,  487,  487,  487,  632,   81,  484,   81,  489,  497,

      497,  632,  632,  543,  632,  632,  632,  632,  632,   81,
      191,  632,  191,  490,  632,  632,  632,  542,  542,  632,
      632,  498,  632,  632,  191,   81,   94,   81,  489,  632,
      632,  632,  543,  543,   94,  550,  498,  632,   81,   94,
      191,  632,  191,  490,  548,  548,  632,  542,  632,  632,
       94,  632,  632,  191,  632,  191,   94,  191,  551,  501,
      501,  632,  543,   94,   94,  550,  501,  501,   94,  191,
      191,  419,  191,  632,  632,  632,  632,  191,  419,  191,
       94,  549,  632,  632,  191,  191,  632,  191,  551,  632,
      632,  191,   94,  632,   94,   94,  502,  632,  191,   94,

      191,  419,  191,  502,  632,  632,  632,  191,  419,  191,
      632,   94,   94,  191,  552,   94,   94,   94,  632,   94,
      191,  632,   94,  632,   94,   94,  632,  632,  632,   94,
       94,  632,  632,  632,   94,  562,  553,   94,   94,   94,
       94,   94,  632,  552,   94,   94,  632,   94,   94,  554,
       94,  632,   94,  632,  632,   94,   94,  632,   94,   94,
       94,   94,  632,   94,  562,  553,   94,   94,   94,   94,
       94,  632,  632,   94,  632,  559,  632,  632,   94,  554,
       94,   94,  632,  632,   94,   94,  632,   94,   94,  632,
       94,   94,  560,   94,   94,   94,   94,  632,  632,   94,

       94,  563,  632,   94,  632,  559,  564,   94,   94,  632,
       94,  561,   94,   94,   94,   94,  632,   94,  632,   94,
       94,  560,   94,   94,   94,   94,   94,  632,   94,   94,
       94,  563,  632,   94,   94,  632,  564,   94,   94,  632,
      561,   94,   94,   94,   94,  632,  565,   94,  632,   94,
       94,   94,   94,   94,  632,   94,  632,  566,   94,   94,
       94,  632,   94,   94,  632,  632,   94,  632,   94,  632,
       94,   94,  632,   94,   94,  565,  632,   94,   94,  567,
       94,   94,  632,   94,  632,  568,  632,  566,  632,  632,
       94,   94,  632,  632,   94,  632,   94,   94,  632,   94,

       94,   94,   94,  632,   94,   94,   94,   94,  567,   94,
      632,  632,  632,   94,  632,  568,   94,  632,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  632,  632,
      632,   94,  632,  632,  632,   94,   94,   94,  632,   94,
       94,   94,   94,  632,  632,   94,  632,   94,  632,   94,
       94,   94,  632,   94,   94,   94,   94,   94,   94,  632,
       94,  569,   94,  632,  632,   94,  570,  632,   94,  632,
       94,   94,   94,  632,  632,   94,  632,  632,  632,   94,
      548,  548,   94,  632,  632,   94,   94,   94,  632,   94,
      569,  191,   94,  191,  632,  632,  570,  632,   94,  548,

      548,   94,   94,  632,   94,  191,  632,  632,   94,   94,
      191,   94,  191,  577,  632,   94,  632,  549,   94,   94,
      632,  191,   94,  191,  191,  632,   94,  632,   94,   94,
      632,  632,   94,  632,  191,  632,  549,   94,  632,   94,
      191,  632,  191,  577,   94,   94,  632,   94,   94,  632,
      632,   94,  632,  191,   94,   94,  632,   94,   94,  632,
       94,  632,   94,   94,  632,   94,   94,   94,  581,   94,
      632,   94,  632,   94,   94,   94,  582,   94,  632,   94,
      632,  632,   94,   94,   94,  632,   94,  632,  632,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  581,   94,

      632,   94,   94,  632,   94,  582,  584,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  583,  585,   94,   94,
      632,  632,   94,   94,  632,   94,   94,  632,  632,  632,
       94,  632,  632,   94,   94,  584,   94,  632,   94,  632,
       94,   94,  632,   94,   94,  632,  583,  585,   94,  632,
      632,   94,   94,  587,   94,  632,   94,  632,  586,   94,
      632,   94,   94,  632,   94,  632,   94,  486,  487,  486,
      632,  632,  400,  632,  632,   94,  632,  632,  588,   94,
       94,   94,  587,   94,   94,   94,   94,  586,  632,  632,
      632,   94,   94,  489,  632,   94,   94,  632,  632,   94,

      632,   94,  632,   94,   94,   94,   94,  588,  490,   94,
       94,  632,  632,  632,   94,  632,   94,  595,  632,   94,
      632,   94,  596,  489,   94,   94,   94,  632,   94,  632,
       94,   94,   94,   94,   94,   94,   94,   94,  490,   94,
       94,  632,  632,   94,  597,  632,   94,  595,   94,   94,
      632,   94,  596,  487,  487,  487,   94,   94,  484,  632,
       94,   94,  632,   94,  632,   94,   94,   94,   94,  632,
       94,  632,   94,   94,  597,   94,  632,   94,  632,  542,
       94,   94,  632,  632,   94,  632,   94,   94,  632,   94,
       94,  603,  632,   94,  543,   94,  632,   94,   94,  632,

      632,   94,  632,   94,  632,  632,  632,  632,  632,  542,
      632,   94,   94,   94,  632,   94,   94,  632,  632,   94,
      603,  632,   94,  632,  543,   94,  632,   94,  632,  632,
       94,  599,  600,  599,  632,  632,  400,  600,  600,  600,
      632,   94,  484,  632,   94,  632,  616,  617,  616,  604,
      604,  400,  632,  632,  632,  605,  605,  617,  617,  617,
      632,  632,  484,  616,  617,  616,  618,  632,  400,  617,
      617,  617,  619,  632,  484,  632,  632,  621,  632,  616,
      617,  616,  632,  622,  400,  632,  632,  620,  632,  619,
      632,  632,  617,  617,  617,  622,  632,  484,  623,  632,

      632,  632,  619,  632,  620,  619,  632,  632,  632,  632,
      623,  632,  632,  622,  632,  632,  632,  620,  622,  619,
      620,  632,  632,  632,  632,  622,  632,  632,  623,  632,
      632,  632,  632,  623,  620,  619,  632,  632,  632,  632,
      623,  632,  632,  632,  632,  632,  632,  632,  622,  632,
      620,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  623,   58,   58,   58,   58,   58,   58,
       58,   58,   61,   61,   61,   61,   61,   61,   61,   61,
       66,   66,   66,   66,   66,   66,   66,   66,   94,  632,
       94,   94,   94,   94,  157,  157,  157,  161,  632,  161,

      632,  161,  161,  161,  161,  164,  632,  164,  164,  164,
      164,  164,  164,  167,  632,  167,  167,  167,  167,  167,
      167,  175,  175,  289,  289,  632,  289,    7,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632
    } ;

static const flex_int16_t yy_chk[4912] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,   15,    3,    4,    9,  609,
        9,   13,   13,   13,  400,   15,   13,   23,   23,   28,

       28,   28,   15,   30,   30,   55,   55,   37,  279,   13,
       13,   37,   60,  445,   32,   37,   32,   32,   32,   32,
       63,   37,   63,   79,   79,   15,   33,   37,   33,   33,
       33,   33,   15,   64,   66,   64,   60,   37,   66,  158,
      158,   37,  445,    9,   25,   37,   25,   25,   80,   80,
       32,   37,  165,  165,  165,   32,   37,   25,   25,   25,
      180,  180,   25,   33,   32,   25,   60,  167,  182,  182,
       93,   25,   25,   33,   25,   92,   33,  184,  184,  482,
       32,  482,   38,   25,   32,   80,   38,   25,   25,   25,
       38,   88,   25,   33,   73,   25,   38,  180,  189,  189,

       25,   25,   33,   25,   34,  182,   34,   34,   34,   34,
      280,  280,   38,   67,   67,   67,   38,   69,   67,   39,
       38,   39,   39,   39,   39,  283,   38,   34,   34,   34,
       34,   67,   67,   65,   34,   34,   54,   82,   34,   82,
      284,   34,   82,   82,   53,   34,   34,   34,   68,   68,
       68,  282,  282,   86,   34,  283,   86,   34,   34,   34,
       34,  301,  301,   86,   34,   34,   68,   68,   34,   39,
      284,   34,  306,  306,   34,   34,   34,   35,   52,   35,
       35,   35,   35,   86,   24,   40,   86,   40,   40,   40,
       40,   22,   86,  170,  446,   41,   20,  170,   43,   41,

       35,  172,   43,   41,   35,  172,   43,  448,   35,   41,
      170,  170,   43,   40,   35,   19,  173,  578,  172,  172,
      173,   40,  307,  307,  446,   41,   40,   35,   43,   41,
       35,   10,   43,   41,   35,   40,   43,  448,   35,   41,
      311,  311,   43,   40,   35,   36,  578,   36,   36,   36,
       36,   40,   42,  173,  512,   40,   42,  174,   44,  307,
       42,  174,   44,  139,  392,  392,   42,  139,   36,    7,
       44,  139,   44,    6,   44,   44,   42,  139,    5,   36,
        0,   36,   42,  173,  512,   36,   42,    0,   44,    0,
       42,   36,   44,  139,  174,   36,   42,  139,   36,  104,

       44,  139,   44,   44,   44,   42,    0,  139,   45,   36,
      114,   36,    0,   45,   36,  593,  104,  417,  417,  104,
       36,   45,   46,   46,  174,   45,   45,  114,   45,  104,
      114,   46,    0,   51,  481,  481,   46,    0,   45,    0,
      114,   51,   51,   45,  593,  104,   51,    0,  104,  499,
      499,   45,   46,   46,   45,   45,  114,   45,  514,  114,
      286,   46,   48,   51,  286,   46,   47,   47,  515,   48,
       47,   51,   51,   47,   47,   51,   48,  286,  286,   48,
      540,  540,   48,   47,    0,   47,   47,  183,  514,  183,
      183,  516,   48,    0,   94,    0,   47,   47,  515,   48,

       47,  607,   94,   47,   47,  607,   48,   94,   48,    0,
       49,   48,   47,   49,   47,   47,   49,   50,   49,   50,
      607,  516,    0,   49,   94,   50,  183,  309,  309,  179,
       50,  179,   94,  395,  179,  179,   94,  395,    0,  192,
       49,  192,    0,   49,  192,  192,   49,   50,   49,   50,
      395,  395,   49,  541,  541,   50,   77,   77,   96,   50,
       70,   70,   70,    0,  309,   70,   96,   77,   77,   77,
        0,   96,  416,  416,   95,   70,   95,   70,   70,   70,
       70,   77,   98,  542,   95,  543,   70,    0,   96,   95,
       98,   98,    0,   77,    0,   98,   96,   77,   77,   77,

       96,   70,    0,  555,   95,    0,   95,    0,   99,  416,
       77,    0,   98,  542,   95,  543,   70,  304,   95,  304,
       98,   98,  304,  304,   98,   99,    0,   99,   99,   99,
        0,   70,   87,  555,   87,   87,  100,  391,   99,  391,
      391,  391,  100,    0,  100,   87,   87,   87,    0,  100,
       87,  571,  571,   87,   99,    0,   99,   99,   99,   87,
       87,    0,   87,  424,  424,    0,  100,  103,  103,  447,
        0,   87,  100,  101,  100,   87,   87,   87,  100,    0,
       87,  101,  101,   87,  103,  447,  101,  103,   87,   87,
      556,   87,  101,  102,  105,  102,    0,  103,  103,  447,

      424,  102,  105,  101,  106,    0,  102,  105,    0,  106,
        0,  101,  101,  103,  447,  101,  103,  106,    0,  558,
      556,  101,  106,  102,  105,  102,  107,  572,  572,  109,
      107,  102,  105,    0,  106,  102,  105,  109,  107,  106,
      108,    0,  109,  107,  108,    0,  108,  106,  109,  558,
      579,  106,  108,  589,  589,  580,  107,  108,  108,  109,
      107,  287,  287,  287,  610,  610,  287,  109,  107,    0,
      108,  109,  107,  592,  108,  110,  108,  109,  110,    0,
      579,  110,  108,  110,  111,  580,  108,  108,  110,  419,
      112,  419,  111,  112,  419,  419,    0,  111,  111,  116,

        0,  112,  113,  592,  118,  110,  112,  116,  110,  113,
      113,  110,  116,  110,  111,  113,  115,  110,  115,  601,
      112,  118,  111,  112,  118,    0,  111,  111,  117,  116,
      117,  112,  113,  115,  118,  112,  115,  116,  117,  113,
      113,  116,    0,  117,  113,  606,  115,  119,  115,  601,
      118,  613,  613,  118,    0,  119,  621,  621,  117,  120,
      117,  121,  115,    0,  119,  115,    0,  119,  117,  489,
      120,  622,  117,  489,  122,  606,  120,  119,  121,  120,
        0,  121,  122,  623,  123,  119,    0,  122,    0,  120,
        0,  121,  123,  119,  627,  627,  119,  123,  123,    0,

      120,  622,    0,  125,  122,  120,  489,  121,  120,  125,
      121,  124,  122,  623,  123,  125,  122,  126,    0,  124,
        0,  125,  123,    0,  124,  126,  123,  123,    0,    0,
      126,    0,    0,  125,    0,  127,  489,    0,  129,  125,
      127,  124,  130,  127,  130,  125,  129,  126,  127,  124,
      125,  129,  130,  124,  128,  126,    0,  130,    0,  126,
        0,    0,  128,  128,    0,  127,    0,  128,  129,    0,
      127,    0,  130,  127,  130,    0,  129,  127,    0,    0,
      129,    0,  130,    0,  128,    0,  130,  131,  131,  132,
      134,  131,  128,  128,  134,  138,  128,  132,  134,  131,

      133,    0,  132,  134,  131,  485,  132,  132,  133,  485,
        0,    0,  138,  133,  133,  138,    0,  131,  131,  132,
      134,  131,  485,  485,  134,  138,  135,  132,  134,  131,
      133,  132,  134,  131,  135,  132,  132,  136,  133,  135,
        0,  138,  133,  133,  138,  136,  137,  137,    0,    0,
      136,  136,  140,  140,  141,  137,  135,  141,    0,    0,
      137,  605,  605,  605,  135,    0,  141,  136,  135,  140,
        0,  141,  140,  141,  141,  136,  137,  137,    0,  136,
      136,    0,  140,  140,  141,  137,    0,  141,  142,  137,
      288,  288,  288,    0,  196,  288,  141,  196,  140,  143,

      141,  140,  141,  141,  196,  142,  144,    0,  142,  145,
      143,    0,  142,    0,    0,    0,  143,  145,  142,  143,
      144,    0,  145,  144,  196,    0,  144,  196,    0,  143,
      393,  393,  393,  196,  142,  393,  144,  142,    0,  145,
      143,  142,  146,  147,  147,  143,  146,  145,  143,  148,
      144,  145,  144,  148,    0,  144,  146,    0,    0,  146,
      147,    0,  146,  147,  149,    0,  148,  151,    0,  148,
      150,    0,  146,  147,  147,  151,  146,    0,  490,  148,
      151,  149,  490,  148,  149,    0,  146,  150,  146,  147,
      150,  146,  147,  152,  149,  148,    0,  151,  148,    0,

      150,  152,  152,    0,  153,  151,  152,  156,    0,  151,
      149,    0,  153,  149,    0,  490,  150,  153,  153,  150,
      154,  157,  154,  152,  156,    0,  619,  156,  154,    0,
      619,  152,  152,  154,  153,  152,  155,  156,  157,  155,
        0,  157,  153,    0,  155,  490,  153,  153,    0,  155,
      154,  157,  154,  156,    0,    0,  156,    0,  154,  168,
      168,  168,  154,  619,  168,    0,  155,  157,    0,  155,
      157,  166,  166,  166,  155,  169,  169,  169,  155,  171,
      171,  171,    0,    0,  171,  168,  166,    0,  166,  166,
      166,  166,    0,  619,  171,    0,  171,  166,    0,  171,

      168,  169,  394,  394,  394,  171,    0,  394,  185,  185,
      176,    0,  166,    0,    0,  168,  169,    0,    0,  185,
      171,  185,  175,    0,    0,  175,  176,  166,    0,  176,
      168,  169,  175,  185,  175,  171,  176,    0,  176,  398,
      398,  398,  166,  175,  398,  185,  169,  176,    0,  185,
      171,  185,  175,    0,    0,  175,  176,  177,  177,  176,
      488,  175,  185,  175,  488,  176,    0,  176,  177,  177,
      177,  199,  181,  181,    0,  200,  201,  488,  488,    0,
      201,    0,  177,  181,  181,  181,  200,    0,  199,    0,
        0,  199,  200,  201,  177,  200,  201,  181,  177,  177,

      177,  199,  399,  399,  399,  200,  201,  399,    0,  181,
      201,  177,  203,  181,  181,  181,  200,  199,    0,  202,
      199,  200,  201,  202,  200,  201,  181,  544,    0,  203,
      204,  544,  203,    0,  206,    0,  202,    0,    0,  202,
        0,  204,  203,    0,  544,  544,    0,  204,  206,  202,
      204,  206,  205,  202,  206,    0,  205,    0,  203,  396,
      204,  203,    0,  396,  206,  202,    0,    0,  202,  205,
      207,  204,  205,  396,  208,  396,  204,    0,  206,  204,
      206,    0,  205,  206,  620,  210,  205,  207,  620,  207,
      207,  208,  209,    0,  208,    0,  210,  211,  205,    0,

      207,  205,  210,    0,  208,  210,    0,    0,    0,  209,
        0,  209,  209,    0,  211,  210,  207,  211,  207,  207,
      208,  620,  209,  208,  213,  212,  210,  211,  546,  546,
      546,  210,  213,  546,  210,    0,    0,  213,  209,  216,
      209,  209,  212,  211,  212,  212,  211,  216,  214,  214,
        0,  620,  216,  216,  213,  212,  214,  217,    0,  215,
        0,  214,  213,  215,    0,  217,  213,  215,  220,  216,
      217,  212,  215,  212,  212,    0,  217,  216,  214,  214,
        0,  216,  216,  218,    0,  220,  214,  217,  220,  215,
      214,  218,  218,  215,    0,  217,  218,  215,  220,  217,

        0,  215,  219,  219,    0,  217,  547,  547,  547,  221,
      219,  547,    0,  218,  220,  219,    0,  220,    0,    0,
        0,  218,  218,  222,  221,  218,  221,    0,    0,  221,
      223,  222,  219,  219,    0,    0,  222,    0,  223,  221,
      219,    0,    0,  223,  219,  573,  573,  573,    0,  224,
      573,  224,    0,  222,  221,  221,  226,  224,  221,  226,
      223,  222,  224,    0,  226,  222,  225,  225,  223,  226,
      227,    0,  223,  228,    0,  225,    0,  228,  227,  224,
      225,  224,    0,  227,    0,  228,  226,  224,    0,  226,
      228,  224,  231,  229,  226,  229,  225,  225,  226,    0,

      227,  229,    0,  228,    0,  225,  229,  228,  227,  225,
        0,    0,  227,  230,  230,  228,    0,    0,    0,  228,
      232,  231,  230,  229,    0,  229,    0,  230,  232,  231,
        0,  229,    0,  232,  231,  229,  574,  574,  574,    0,
      233,  574,    0,  230,  230,    0,    0,  234,  233,    0,
      232,  231,  230,  233,  233,  234,  230,    0,  232,  231,
      234,  235,  232,  231,  236,    0,    0,  236,    0,  235,
      233,  591,  591,  591,  235,  236,  591,  234,  233,    0,
      236,    0,  233,  233,    0,  234,    0,  237,    0,  234,
        0,  235,  238,  238,  236,  237,  237,  236,    0,  235,

      237,  238,  240,  235,    0,  236,  238,  239,  239,  236,
      240,  240,    0,    0,    0,  240,  239,  237,    0,    0,
        0,  239,  238,  238,    0,  237,  237,    0,    0,  237,
        0,  238,  240,  241,  241,  238,    0,  239,  239,    0,
      240,  240,  241,    0,  240,  243,  239,  241,  242,  242,
      239,  245,    0,  243,  244,  243,  242,    0,  243,    0,
        0,  242,  244,  241,  241,    0,    0,  244,  245,    0,
        0,  245,  241,    0,    0,  243,  241,    0,  242,  242,
        0,  245,  246,  243,  244,  243,  242,  243,  247,    0,
      242,    0,  244,  246,  248,    0,  244,  245,    0,  246,

      245,    0,  246,  545,    0,  247,    0,  545,  247,  249,
        0,  248,  246,  248,  248,  250,  249,    0,  247,  250,
      545,  545,    0,  246,  248,    0,  249,    0,  246,  249,
      251,  246,  250,    0,  247,  250,    0,  247,  251,  249,
      248,    0,  248,  248,    0,  250,  249,  251,    0,  250,
      251,    0,  252,  253,  254,  249,    0,    0,  249,    0,
      251,  250,    0,  252,  250,    0,    0,    0,  251,  252,
      253,  254,  252,  253,  254,  254,  251,  255,    0,  251,
        0,    0,  252,  253,  254,  598,  598,  598,  259,  257,
      598,    0,  257,  252,  255,    0,  255,  255,  252,  253,

      254,  252,  253,  254,  254,  259,  257,  255,  259,  257,
      256,  260,  258,    0,    0,    0,    0,    0,  259,  257,
      258,  256,  257,  255,    0,  255,  255,  256,  260,  258,
      256,  260,  258,    0,  259,  257,    0,  259,  257,    0,
      256,  260,  258,    0,    0,  261,    0,    0,    0,  262,
      258,  256,    0,  262,  263,    0,  256,  260,  258,  256,
      260,  258,  261,  575,  261,  261,  262,  575,    0,  262,
        0,  263,  264,    0,  263,  261,    0,    0,    0,  262,
      575,  575,    0,  262,  263,    0,    0,    0,    0,  264,
      265,  261,  264,  261,  261,  262,  265,  266,  262,    0,

      263,  289,  264,  263,  289,    0,    0,  265,  267,    0,
      265,  289,    0,  289,  266,    0,  266,  266,  264,    0,
      265,  264,  289,  267,    0,  267,  265,  266,  267,    0,
        0,  289,  268,    0,  289,    0,  265,    0,  267,  265,
      289,    0,  289,  266,  270,  266,  266,  268,    0,  268,
      269,  608,  268,  267,  267,  608,    0,  267,  269,    0,
        0,  270,  268,    0,  270,    0,    0,  269,  608,  608,
      269,  271,    0,    0,  270,    0,    0,  268,  268,  271,
      269,  268,    0,    0,  271,    0,  272,  272,  269,  273,
      270,    0,    0,  270,    0,  272,  269,  273,  274,  269,

      272,  271,  273,  273,  285,    0,  274,    0,  285,  271,
        0,  274,    0,  271,    0,    0,  272,  272,  285,  273,
      285,  285,  285,    0,    0,  272,    0,  273,  274,  272,
      275,  273,  273,  275,    0,    0,  274,  276,  275,  278,
      274,  293,    0,  275,  293,  276,  276,  278,  277,    0,
      276,  293,  278,    0,  277,    0,  277,  625,  625,  625,
      275,  277,  625,  275,    0,    0,    0,  276,  275,  278,
        0,  293,  275,    0,  293,  276,  276,  278,  277,  276,
      293,  278,  294,    0,  277,  294,  277,  281,  281,  281,
      277,  612,  294,    0,  294,  612,    0,    0,  295,    0,

      299,  604,  281,  299,  281,  604,    0,  281,  612,  612,
      299,    0,  294,  281,  295,  294,    0,  295,  604,  604,
      604,  294,  300,  294,  295,    0,  295,    0,  281,    0,
      299,    0,    0,  299,    0,  295,    0,    0,  300,  299,
        0,  300,    0,  281,  295,    0,    0,  295,  300,    0,
      300,  302,  302,  295,    0,  295,    0,    0,  281,  300,
      317,  317,  302,  618,  302,    0,    0,  618,  300,  317,
        0,  300,  303,  303,  317,    0,  302,  300,    0,  300,
      618,  618,    0,  303,  303,  303,    0,    0,  302,    0,
      317,  317,  302,    0,  302,  305,  305,  303,    0,  317,

        0,    0,    0,  317,    0,  302,  305,  305,  305,  303,
      308,  308,    0,  303,  303,  303,    0,  310,  310,    0,
      305,  308,    0,  308,    0,    0,  303,    0,  310,  310,
      310,    0,  305,    0,    0,  308,  305,  305,  305,    0,
        0,    0,  310,    0,  312,  312,    0,  308,  318,  305,
        0,  308,    0,  308,  310,  312,  318,  312,  310,  310,
      310,  318,    0,    0,  308,    0,  316,  319,    0,  312,
        0,  310,  316,    0,  316,  319,  320,    0,  318,  316,
      319,  312,  320,    0,  320,  312,  318,  312,    0,  320,
      318,    0,    0,    0,    0,    0,  316,  319,  312,    0,

        0,    0,  316,  321,  316,  319,  320,    0,  316,  319,
        0,  321,  320,  322,  320,    0,  321,    0,  320,  325,
        0,  322,  323,  324,  324,    0,  322,  326,  323,    0,
      323,  326,  324,  321,    0,  323,  325,  324,    0,  325,
        0,  321,    0,  322,  326,  321,    0,  326,    0,  325,
      327,  322,  323,  324,  324,  322,    0,  326,  323,    0,
      323,  326,  324,    0,  323,  325,  324,  327,  325,    0,
      327,  328,  329,  326,  330,    0,  326,  331,    0,    0,
      327,    0,  330,    0,    0,  331,    0,  330,  328,  329,
      331,  328,  329,    0,    0,  332,  327,  333,    0,  327,

        0,  328,  329,  332,  330,  333,    0,  331,  332,    0,
      333,  333,  330,    0,    0,  331,  330,  328,  329,  331,
      328,  329,    0,  334,    0,  332,  334,  333,  336,  337,
      335,  334,    0,  332,  338,  333,  334,  332,  335,  333,
      333,    0,    0,  335,  335,  336,  337,    0,  336,  337,
        0,  338,    0,  334,  338,    0,  334,    0,  336,  337,
      335,  334,  339,    0,  338,  334,  339,  340,  335,    0,
        0,    0,  335,  335,  336,  337,    0,  336,  337,  339,
      338,  624,  339,  338,  340,  624,  340,  340,    0,  341,
      342,    0,  339,    0,    0,  341,  339,  340,  624,  624,

        0,  343,    0,    0,  342,    0,  341,  342,  339,  341,
      342,  339,  344,  340,    0,  340,  340,    0,  343,  341,
      342,  343,    0,  348,  344,  341,  345,    0,    0,  344,
        0,  343,  344,    0,  342,  341,  342,  345,  341,  342,
      346,    0,  344,  345,    0,    0,  345,  343,    0,    0,
      343,    0,  348,    0,  344,  348,  345,  346,  344,    0,
      346,  344,    0,  347,    0,  348,    0,  345,    0,  348,
      346,  347,  345,    0,    0,  345,  626,  626,  626,    0,
      347,  626,  348,  347,    0,  348,  346,  349,  350,  346,
        0,  349,    0,  347,  348,    0,  351,    0,  348,    0,

      351,  347,  353,    0,  349,  350,    0,  349,  350,  347,
        0,    0,  347,  351,    0,    0,  351,  349,  350,  353,
        0,  349,  353,    0,  352,    0,  351,    0,    0,  354,
      351,    0,  353,  349,  350,    0,  349,  350,  356,    0,
        0,  352,  351,  352,  352,  351,  354,  355,  353,  354,
        0,  353,    0,  355,  352,  356,    0,  356,  356,  354,
        0,    0,  357,    0,  355,    0,    0,  355,  356,    0,
      352,  358,  352,  352,    0,  354,    0,  355,  354,  357,
      359,    0,  357,  355,  356,    0,  356,  356,  358,  361,
        0,  358,  357,  355,  360,  362,  355,  359,    0,    0,

      359,  358,  360,    0,    0,    0,  361,  360,  357,  361,
      359,  357,  362,  363,    0,  362,    0,  358,    0,  361,
      358,  363,    0,    0,  360,  362,  359,    0,  365,  359,
      363,    0,  360,  363,    0,  361,  360,  364,  361,  364,
        0,  362,  365,  363,  362,  365,    0,    0,  365,    0,
        0,  363,  366,    0,  364,    0,    0,  364,  365,  363,
      366,  368,  363,  367,    0,  366,    0,  364,    0,  364,
      367,  367,  365,    0,  365,    0,  367,  365,  368,    0,
        0,  368,  366,  364,    0,    0,  364,    0,    0,    0,
      366,  368,  369,  367,  366,    0,  369,    0,  370,  371,

      367,  367,    0,    0,    0,  367,  370,  368,    0,  369,
      368,    0,  369,  371,    0,  370,  371,    0,  370,  371,
      372,    0,  369,    0,    0,    0,  369,    0,  370,  371,
        0,    0,  372,    0,  373,    0,  370,  372,  369,    0,
      372,  369,    0,  371,  370,  371,    0,  370,  371,    0,
      372,  373,    0,    0,  373,  374,  375,  376,  375,  374,
        0,  376,  372,    0,  373,    0,  372,    0,    0,  372,
        0,    0,  374,  375,  376,  374,  375,  376,  377,  378,
      373,    0,    0,  373,    0,  374,  375,  376,  375,  374,
      378,  376,    0,    0,    0,  377,  378,  377,  377,  378,

        0,  374,  375,  376,  374,  375,  376,    0,  377,  378,
      382,    0,  380,  379,  381,    0,    0,    0,  382,    0,
      378,  379,    0,  382,  377,  378,  377,  377,  378,  380,
      379,  381,  380,  379,  381,    0,    0,    0,  383,    0,
      382,  383,  380,  379,  381,  628,  628,  628,  382,  383,
      628,  379,  382,    0,  383,    0,  384,  385,  380,  379,
      381,  380,  379,  381,  384,  385,  386,  386,  383,  384,
      385,  383,    0,  389,    0,  386,  387,  387,    0,  383,
      386,    0,    0,  383,  387,    0,  384,  385,    0,  387,
      389,    0,    0,  389,  384,  385,  386,  386,  384,  385,

      390,    0,  388,  389,  390,  386,  387,  387,  388,  386,
      388,  397,  397,  397,  387,  388,  397,  390,  387,  389,
      390,    0,  389,  407,    0,  414,  407,    0,  414,    0,
      390,  397,  388,  407,  390,  414,    0,  397,  388,    0,
      388,    0,    0,    0,  388,    0,  390,    0,    0,  390,
      415,  415,  397,  407,    0,  414,  407,    0,  414,  418,
      418,  415,  407,  415,  414,    0,    0,  397,    0,    0,
      418,    0,  418,  425,    0,  415,    0,    0,  629,  629,
      629,  425,  397,  629,  418,    0,  425,  415,    0,    0,
        0,  415,    0,  415,  420,  420,  418,  421,  421,    0,

      418,    0,  418,  425,  415,  420,  420,  420,  421,  421,
      421,  425,    0,  418,    0,  425,  422,  422,    0,  420,
        0,    0,  421,    0,    0,  426,    0,  422,  422,  422,
      427,  420,  428,    0,  421,  420,  420,  420,  421,  421,
      421,  422,  426,  423,  423,  426,    0,  427,  420,  428,
      427,  421,  428,  422,  423,  426,  423,  422,  422,  422,
      427,    0,  428,    0,    0,  429,    0,    0,  423,    0,
      422,  426,  430,  431,  426,    0,  427,    0,  428,  427,
      423,  428,  429,    0,  423,  429,  423,  432,    0,  430,
      431,    0,  430,  431,    0,  429,  433,  423,    0,    0,

        0,    0,  430,  431,  432,    0,    0,  432,  434,    0,
        0,  429,    0,  433,  429,    0,  433,  432,  430,  431,
        0,  430,  431,    0,    0,  434,  433,    0,  434,    0,
        0,  435,    0,  432,    0,    0,  432,    0,  434,  435,
      438,    0,  433,    0,  435,  433,  436,  436,  438,    0,
      437,  441,    0,  438,  434,  436,    0,  434,  437,    0,
      436,  435,    0,  437,  437,    0,  439,    0,  441,  435,
      438,  441,    0,  435,  439,    0,  436,  436,  438,  439,
      437,  441,  438,    0,    0,  436,  440,    0,  437,  436,
      442,    0,  437,  437,  440,    0,  439,  441,    0,  440,

      441,  443,    0,    0,  439,  443,    0,  442,  439,    0,
      442,    0,    0,    0,  444,    0,  440,    0,  443,    0,
      442,  443,  444,    0,  440,  449,    0,  444,  440,    0,
        0,  443,  450,  449,    0,  443,  442,    0,  449,  442,
      450,    0,    0,    0,  444,  450,  451,  443,    0,  451,
      443,    0,  444,    0,  451,  449,  444,    0,    0,  451,
        0,    0,  450,  449,    0,  452,    0,  449,  452,    0,
      450,  453,  453,  452,  450,    0,  451,    0,  452,  451,
      453,  454,  455,  455,  451,  453,    0,    0,  451,  454,
        0,  455,  456,    0,  454,  452,  455,    0,  452,    0,

      456,  453,  453,  452,    0,  456,    0,  452,    0,    0,
      453,  454,  455,  455,  453,    0,  457,    0,  458,  454,
        0,  455,  456,  454,  457,  455,  458,  459,    0,  457,
      456,  458,  458,    0,  456,  459,  460,  460,    0,    0,
      459,    0,  461,    0,    0,  460,  457,    0,  458,    0,
      460,  462,    0,    0,  457,    0,  458,  459,  457,  461,
      458,  458,  461,    0,    0,  459,  460,  460,  462,  459,
      462,  462,  461,    0,    0,  460,  463,  465,  463,  460,
        0,  462,    0,    0,  464,  465,  464,    0,  461,    0,
      465,  461,    0,  463,    0,    0,  463,  462,    0,  462,

      462,  464,    0,    0,  464,  466,  463,  465,  463,    0,
        0,    0,    0,  466,  464,  465,  464,    0,  466,  465,
        0,  467,  463,  468,  469,  463,    0,    0,    0,  467,
      464,  468,  469,  464,  467,  466,  468,  469,  469,    0,
      470,    0,  470,  466,  471,    0,    0,  466,    0,    0,
      470,  467,  471,  468,  469,  470,    0,  471,    0,  467,
        0,  468,  469,  467,    0,  468,  469,  469,    0,    0,
      470,    0,  470,    0,  471,    0,  472,  472,    0,    0,
      470,    0,  471,    0,  470,  472,  471,    0,  473,    0,
      472,  473,  474,  474,    0,    0,    0,    0,    0,  473,

      474,  476,  476,    0,  473,  474,  472,  472,    0,  476,
        0,    0,  475,    0,  476,  472,    0,    0,  473,  472,
      475,  473,  474,  474,    0,  475,  475,  477,  478,  473,
      474,  476,  476,  473,  474,  477,  478,    0,  479,  476,
      477,  478,  475,  476,    0,    0,  479,    0,  480,    0,
      475,  479,  479,    0,  475,  475,  480,  477,  478,    0,
        0,  480,  483,  483,  483,  477,  478,  483,  479,  477,
      478,    0,  486,  486,  486,    0,  479,  486,  480,    0,
      479,  479,  483,    0,  497,  497,  480,    0,  483,    0,
      480,  487,  487,  487,    0,  497,  487,  497,  486,  498,

      498,    0,    0,  483,    0,    0,    0,    0,    0,  497,
      498,    0,  498,  486,    0,    0,    0,  487,  483,    0,
        0,  497,    0,    0,  498,  497,  503,  497,  486,    0,
        0,    0,  487,  483,  503,  503,  498,    0,  497,  503,
      498,    0,  498,  486,  500,  500,    0,  487,    0,    0,
      504,    0,    0,  498,    0,  500,  503,  500,  504,  501,
      501,    0,  487,  504,  503,  503,  502,  502,  503,  500,
      501,  501,  501,    0,    0,    0,    0,  502,  502,  502,
      504,  500,    0,    0,  501,  500,    0,  500,  504,    0,
        0,  502,  504,    0,  505,  506,  501,    0,  500,  507,

      501,  501,  501,  502,    0,    0,    0,  502,  502,  502,
        0,  505,  506,  501,  505,  506,  507,  508,    0,  507,
      502,    0,  521,    0,  505,  506,    0,    0,    0,  507,
      521,    0,    0,    0,  508,  521,  508,  508,  509,  510,
      505,  506,    0,  505,  506,  507,    0,  508,  507,  509,
      511,    0,  521,    0,    0,  509,  510,    0,  509,  510,
      521,  517,    0,  508,  521,  508,  508,  511,  509,  510,
      511,    0,    0,  518,    0,  517,    0,    0,  517,  509,
      511,  517,    0,    0,  509,  510,    0,  509,  510,    0,
      518,  517,  518,  518,  519,  520,  511,    0,    0,  511,

      522,  522,    0,  518,    0,  517,  524,  517,  522,    0,
      517,  519,  520,  522,  519,  520,    0,  525,    0,  518,
      523,  518,  518,  524,  519,  520,  524,    0,  523,  526,
      522,  522,    0,  523,  525,    0,  524,  525,  522,    0,
      519,  520,  522,  519,  520,    0,  526,  525,    0,  526,
      523,  529,  524,  527,    0,  524,    0,  527,  523,  526,
      528,    0,  523,  525,    0,    0,  525,    0,  529,    0,
      527,  529,    0,  527,  530,  526,    0,  528,  526,  528,
      528,  529,    0,  527,    0,  530,    0,  527,    0,    0,
      528,  530,    0,    0,  530,    0,  531,  529,    0,  527,

      529,  532,  527,    0,  530,  533,  528,  534,  528,  528,
        0,    0,    0,  531,    0,  530,  531,    0,  532,  535,
      530,  532,  533,  530,  534,  533,  531,  534,    0,    0,
        0,  532,    0,    0,    0,  533,  535,  534,    0,  535,
      536,  537,  531,    0,    0,  531,    0,  532,    0,  535,
      532,  533,    0,  534,  533,  539,  534,  536,  537,    0,
      536,  537,  538,    0,    0,  535,  538,    0,  535,    0,
      536,  537,  539,    0,    0,  539,    0,    0,    0,  538,
      548,  548,  538,    0,    0,  539,  536,  537,    0,  536,
      537,  548,  538,  548,    0,    0,  538,    0,  550,  549,

      549,  539,  551,    0,  539,  548,    0,    0,  538,  552,
      549,  538,  549,  552,    0,  550,    0,  548,  550,  551,
        0,  548,  551,  548,  549,    0,  552,    0,  550,  552,
        0,    0,  551,    0,  548,    0,  549,  553,    0,  552,
      549,    0,  549,  552,  550,  554,    0,  550,  551,    0,
        0,  551,    0,  549,  553,  552,    0,  553,  552,    0,
      559,    0,  554,  560,    0,  554,  561,  553,  559,  562,
        0,  560,    0,  559,  561,  554,  560,  562,    0,  561,
        0,    0,  562,  553,  563,    0,  553,    0,    0,  565,
      559,  554,  563,  560,  554,  566,  561,  563,  559,  562,

        0,  560,  559,    0,  561,  560,  565,  562,  561,  565,
      564,  562,  566,  567,  563,  566,  564,  567,  564,  565,
        0,    0,  563,  564,    0,  566,  563,    0,    0,    0,
      567,    0,    0,  567,  568,  565,  569,    0,  565,    0,
      564,  566,    0,  567,  566,    0,  564,  567,  564,    0,
        0,  568,  564,  569,  568,    0,  569,    0,  568,  567,
        0,  570,  567,    0,  568,    0,  569,  576,  576,  576,
        0,    0,  576,    0,    0,  577,    0,    0,  570,  581,
      568,  570,  569,  568,  582,  569,  583,  568,    0,    0,
        0,  570,  577,  576,    0,  577,  581,    0,    0,  581,

        0,  582,    0,  583,  582,  577,  583,  570,  576,  581,
      570,    0,    0,    0,  582,    0,  583,  584,    0,  585,
        0,  577,  585,  576,  577,  581,  586,    0,  581,    0,
      582,  588,  583,  582,  584,  583,  585,  584,  576,  585,
      587,    0,    0,  586,  587,    0,  586,  584,  588,  585,
        0,  588,  585,  590,  590,  590,  586,  587,  590,    0,
      587,  588,    0,  584,    0,  585,  584,  595,  585,    0,
      587,    0,  586,  596,  587,  586,    0,  588,    0,  590,
      588,  597,    0,    0,  595,    0,  587,  595,    0,  587,
      596,  595,    0,  596,  590,  603,    0,  595,  597,    0,

        0,  597,    0,  596,    0,    0,    0,    0,    0,  590,
        0,  597,  603,  595,    0,  603,  595,    0,    0,  596,
      595,    0,  596,    0,  590,  603,    0,  597,    0,    0,
      597,  599,  599,  599,    0,    0,  599,  600,  600,  600,
        0,  603,  600,    0,  603,    0,  614,  614,  614,  599,
      599,  614,    0,    0,    0,  600,  600,  615,  615,  615,
        0,    0,  615,  616,  616,  616,  614,    0,  616,  617,
      617,  617,  614,    0,  617,    0,    0,  615,    0,  630,
      630,  630,    0,  615,  630,    0,    0,  614,    0,  616,
        0,    0,  631,  631,  631,  617,    0,  631,  615,    0,

        0,    0,  614,    0,  616,  630,    0,    0,    0,    0,
      617,    0,    0,  615,    0,    0,    0,  614,  631,  616,
      630,    0,    0,    0,    0,  617,    0,    0,  615,    0,
        0,    0,    0,  631,  616,  630,    0,    0,    0,    0,
      617,    0,    0,    0,    0,    0,    0,    0,  631,    0,
      630,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  631,  633,  633,  633,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  634,  634,  634,
      635,  635,  635,  635,  635,  635,  635,  635,  636,    0,
      636,  636,  636,  636,  637,  637,  637,  638,    0,  638,

        0,  638,  638,  638,  638,  639,    0,  639,  639,  639,
      639,  639,  639,  640,    0,  640,  640,  640,  640,  640,
      640,  641,  641,  642,  642,    0,  642,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[160] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #include <iostream>
    #include <regex>
    #include "../compiler/utils.hpp"
    #include "../parser/grammar.tab.h"
    #define YY_DECL int yylex()

    void removeUnderline(std::string * str);
    void removeUnderline(char * str);

    void printDateTimeLiteral(DateTime& datetime);

    bool LEXER_DEBUG = false;

    // Система флагов, которая позволяет определять когда '=' это присваивание, а когда проверка равенства
    bool new_stmt = true; // выставляется каждый раз, когда встречается новый statement
    bool blocking_kw = false; // иногда у If, While и т.п. скобок у expr может не быть, и первое '=' учтется как присваивание, хотя это не так
    bool in_brace = false; // определяет находится ли лексер внутри скобок, если да, то всегда = - это сравнение
    bool in_compound = false; // гарантирует, чтобы первый statement внутри составных операторов (If, For, ...) мог быть присваиванием 
#line 1794 "lexer.flex.cpp"

#line 1796 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 45 "lexer.l"



#line 49 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime * datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;
    bool boolLiteral;



#line 2030 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 633 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 632 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return AND_ALSO; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return BYTE_KW; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 64 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CDATE_KW; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 65 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CINTEGER_KW; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CONST_KW; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CSINGLE_KW; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CULONG_KW; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); in_compound = true; return ELSE_KW; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return EXIT_KW; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); in_compound = true; return IN_KW; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return IS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return LIKE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return MOD; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return MYBASE_KW; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return NEW_KW; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return OR;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return READONLY_KW; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return SINGLE_KW; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return STRING_KW; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); new_stmt = true; return THEN_KW; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return ULONG_KW; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return AS_KW; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return BYVAL_KW; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CBOOL_KW; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CDOUBLE_KW; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CLASS_KW; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CONTINUE_KW; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CSTRING_KW; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CUSHORT_KW; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; in_compound = true; return DO_KW; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; in_compound = true; return ELSEIF_KW; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return ERASE_KW; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return FUNCTION_KW; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; in_compound = true; return IF_KW; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return INHERITS_KW;  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return ISNOT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return LONG_KW; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return MYCLASS_KW;  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return NEXT_KW; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return OR_ELSE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return PARAMARRAY_KW; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return PROTECTED_KW; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return REDIM_KW; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; return RETURN_KW; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return STATIC_KW; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return STRUCT_KW; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return USHORT_KW;  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return BOOLEAN_KW; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CALL_KW; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CBYTE_KW; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CLONG_KW; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CSBYTE_KW;  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CTYPE_KW; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return DATE_KW; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return DOUBLE_KW; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return END_KW; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return END_FUNCTION; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return END_SELECT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return END_IF; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return END_SUB; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return END_WHILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return INTEGER_KW; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return LOOP_KW; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return NOT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return OBJECT_KW; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return PUBLIC_KW; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return SBYTE_KW; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return SHARED_KW; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return STEP_KW; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return SUB_KW; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); in_compound = true; return TO_KW; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; in_compound = true; return WHILE_KW; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return AND; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return BYREF_KW; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; in_compound = true; return CASE_KW; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CCHAR_KW; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CHAR_KW; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return COBJECT_KW; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CSHORT_KW; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return CUINTEGER_KW; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return DECIMAL_KW; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = false; return DIM_KW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; return EACH_KW; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); in_compound = true; return FOR_KW; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return GOTO_KW; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return ME_KW; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return OF_KW; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return OPTIONAL_KW; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return PRIVATE_KW; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; return SELECT_KW; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return SHORT_KW; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return STOP_KW; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return UINTEGER_KW; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); return XOR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "lexer.l"
{ lexer_print("Found keyword : %s\n", yytext); blocking_kw = true; return UNTIL_KW; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 158 "lexer.l"
{ lexer_print("Found nothing literal\n"); return NOTHING; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 159 "lexer.l"
{ lexer_print("Found boolean literal : %s\n", yytext); yylval.Bool = true; return BOOL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 160 "lexer.l"
{ lexer_print("Found boolean literal : %s\n", yytext); yylval.Bool = false; return BOOL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 162 "lexer.l"
{lexer_print("Found a XOR operator: %s\n", yytext); return '^'; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "lexer.l"
{lexer_print("Found a MUL operator: %s\n", yytext); return '*'; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "lexer.l"
{lexer_print("Found a FLOOR_DIV operator: %s\n", yytext); return '\\'; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "lexer.l"
{lexer_print("Found a DIV operator: %s\n", yytext); return '/'; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 166 "lexer.l"
{lexer_print("Found a PLUS operator: %s\n", yytext); return '+'; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "lexer.l"
{lexer_print("Found a MINUS operator: %s\n", yytext); return '-'; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 168 "lexer.l"
{
    if (new_stmt && !in_brace && !blocking_kw) {
        lexer_print("Found an assignment operator: %s\n", yytext); 
        new_stmt = false;
        return '='; 
    }
    if (blocking_kw) {
        blocking_kw = false;
        new_stmt = false;
    }
    lexer_print("Found an equality operator: %s\n", yytext); 
    return EQ;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 181 "lexer.l"
{lexer_print("Found a XOR_ASSIGNMENT operator: %s\n", yytext); return EXP_ASSIGN; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 182 "lexer.l"
{lexer_print("Found a MUL_ASSIGNMENT operator: %s\n", yytext); return MUL_ASSIGN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 183 "lexer.l"
{lexer_print("Found a ADD_ASSIGNMENT operator: %s\n", yytext); return ADD_ASSIGN; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 184 "lexer.l"
{lexer_print("Found a SUB_ASSIGNMENT operator: %s\n", yytext); return SUB_ASSIGN; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "lexer.l"
{lexer_print("Found a LESS_EQUAL to operator: %s\n", yytext); return LEQ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "lexer.l"
{lexer_print("Found a LESS operator: %s\n", yytext); return '<'; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "lexer.l"
{lexer_print("Found a GREATER operator: %s\n", yytext); return '>'; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "lexer.l"
{lexer_print("Found a GREATER_EQUAL to operator: %s\n", yytext); return GEQ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "lexer.l"
{lexer_print("Found a NOT_EQUAL to operator: %s\n", yytext); return NEQ; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "lexer.l"
{lexer_print("Found a STR_CONCAT operator: %s\n", yytext); return '&'; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "lexer.l"
{lexer_print("Found a STR_CONCAT_ASSIGNMENT operator: %s\n", yytext); return STRCAT_ASSIGN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "lexer.l"
{lexer_print("Found a RSHIFT operator: %s\n", yytext); return RSHIFT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "lexer.l"
{lexer_print("Found a LSHIFT operator: %s\n", yytext); return LSHIFT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "lexer.l"
{lexer_print("Found a LSHIFT_ASSIGNMENT operator: %s\n", yytext); return LSHIFT_ASSIGN; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "lexer.l"
{lexer_print("Found a RSHIFT_ASSIGNMENT operator: %s\n", yytext); return RSHIFT_ASSIGN; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "lexer.l"
{ lexer_print("Found an FLOOR_DIV_ASSIGNMENT operator: %s\n", yytext); return FLOORDIV_ASSIGN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "lexer.l"
{lexer_print("Found a DIV_ASSIGNMENT operator: %s\n", yytext); return DIV_ASSIGN; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{lexer_print("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL); return ENDL;}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 202 "lexer.l"
{lexer_print("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL); return ENDL; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 204 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 205 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 206 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 207 "lexer.l"
{lexer_error("Error: String literal wasn't closed\n"); yyterminate();}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{
    lexer_error("Error: String literal wasn't closed at line %d\n", yylineno - 1); 
    if (!DEBUG) {
        yyterminate();
    }
    else {
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 217 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        lexer_print("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
        yylval.Char = charValue;
        return CHAR;
    } else {
        lexer_error("Error: character literal can have only one character, not string, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 229 "lexer.l"
{lexer_print("Found a string literal: %s\n", strLiteral.c_str()); yylval.Str = new std::string(strLiteral); BEGIN(INITIAL); lexer_print("%d", STR); return STR; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 232 "lexer.l"
{
    lexer_error("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.l"
{
    lexer_error("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 242 "lexer.l"
{
    lexer_error("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 248 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    bool isUnsigned = false;
    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        isUnsigned = true;
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }


    removeUnderline(intLiteral);
    intValue = atoll(intLiteral); lexer_print("Found a integer value: %d\n", intValue);
    IntType t = IntType::NO_SPEC;
    if (endsWith(lexeme, "S")){
        t = IntType::SHORT_MOD;
    } else if (endsWith(lexeme, "L")) {
        t = IntType::LONG_MOD;
    } else if (endsWith(lexeme, "I")) {
        t = IntType::INT_MOD;
    }
    yylval.Int = new IntLiteral(intValue, t, isUnsigned);
    return INT;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 277 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    bool isUnsigned = false;
    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        isUnsigned = true;
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, nullptr, 16);
    lexer_print("Found a hex integer value: %d\n", intValue);
    IntType t = IntType::NO_SPEC;
    if (endsWith(lexeme, "S")){
        t = IntType::SHORT_MOD;
    } else if (endsWith(lexeme, "L")) {
        t = IntType::LONG_MOD;
    } else if (endsWith(lexeme, "I")) {
        t = IntType::INT_MOD;
    }
    yylval.Int = new IntLiteral(intValue, t, isUnsigned);
    return INT;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 306 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    bool isUnsigned = false;
    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        isUnsigned = true;
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, nullptr, 8);
    lexer_print("Found a oct integer value: %d\n", intValue);
    IntType t = IntType::NO_SPEC;
    if (endsWith(lexeme, "S")){
        t = IntType::SHORT_MOD;
    } else if (endsWith(lexeme, "L")) {
        t = IntType::LONG_MOD;
    }  else if (endsWith(lexeme, "I")) {
        t = IntType::INT_MOD;
    }
    yylval.Int = new IntLiteral(intValue, t, isUnsigned);
    return INT;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 335 "lexer.l"
{
    std::string lexeme(yytext);
    removeUnderline(&lexeme);
    doubleValue = atof(lexeme.c_str());
    lexer_print("Found floating point literal: %f\n", doubleValue);
    yylval.Float = new FloatLiteral(doubleValue, FloatType::NO_SPEC);
    return FLOAT;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 344 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    removeUnderline(floatLiteral);
    doubleValue = atof(floatLiteral);
    lexer_print("Found floating point literal: %f\n", doubleValue);
    FloatType ft = FloatType::NO_SPEC;
    if (endsWith(std::string(yytext), "d") || endsWith(std::string(yytext), "D")) {
        ft = FloatType::DECIMAL_MOD;
    } else if (endsWith(std::string(yytext), "f") || endsWith(std::string(yytext), "F")) {
        ft = FloatType::FLOAT_MOD;
    } else if (endsWith(std::string(yytext), "R") || endsWith(std::string(yytext), "r")) {
        ft = FloatType::DOUBLE_MOD;
    }
    yylval.Float = new FloatLiteral(doubleValue, ft);
    return FLOAT;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 362 "lexer.l"
{
    lexer_print("Invalid float literal: %s at line %d\n", yytext, yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 367 "lexer.l"
{
    std::regex date_regex(R"((\d{1,2})[\-\/](\d{1,2})[\-\/](\d{4}))");
    std::regex time_regex(R"((\d{1,2}):(\d{2})(:(\d{2}))?(\s*(AM|PM))?)");
    std::regex hour_regex(R"((\d{1,2})\s*(AM|PM))");

    std::smatch match;
    std::string text(yytext);

    Date * date = nullptr;
    Time * time = nullptr;

    if (std::regex_search(text, match, date_regex)) {
        date = new Date();
        date->day = std::stoi(match[2].str());
        date->month = std::stoi(match[1].str());
        date->year = std::stoi(match[3].str());
    }

    if (std::regex_search(text, match, hour_regex)) {
        time = new Time();
        time->hour = std::stoi(match[1].str());

        if (match[2].str() == "AM") {
            time->format = AM;
        }
        else if (match[2].str() == "PM") {
            time->format = PM;
        }
    }

    if (std::regex_search(text, match, time_regex)) {
        time = new Time();
        time->hour = std::stoi(match[1].str());
        time->minute = std::stoi(match[2].str());
        time->second = match[4].matched ? std::stoi(match[4].str()) : 0;

        if (match[6].matched) {
            if (match[6].str() == "AM") {
                time->format = AM;
            }
            else if (match[6].str() == "PM") {
                time->format = PM;
            }
        }
    }


    datetime = new DateTime();
    datetime->date = date;
    datetime->time = time;
    lexer_print("Found a datetime literal: \n");
    printDateTimeLiteral(*datetime);
    yylval.DateTime = datetime;
    return DATETIME;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 423 "lexer.l"
{
    lexer_error("Invalid datetime literal: %s\n", yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 428 "lexer.l"
{
    lexer_error("Datetime literal wasn't closed: %s\n", yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 433 "lexer.l"
{ lexer_print("Found a separator left parenthesis: %s\n", yytext); in_brace = true; return '(';}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 434 "lexer.l"
{lexer_print("Found a separator right parenthesis: %s\n", yytext); in_brace = false; return ')';}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 435 "lexer.l"
{lexer_print("Found a separator left curly brace: %s\n", yytext); in_brace = true; return '{';}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 436 "lexer.l"
{ lexer_print("Found a separator right curly brace: %s\n", yytext); in_brace = false; return '}';}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 437 "lexer.l"
{lexer_print("Found a separator question mark: %s\n", yytext); return '?';}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 438 "lexer.l"
{lexer_print("Found a separator point: %s\n", yytext); return '.';}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 439 "lexer.l"
{lexer_print("Found a separator exclamation mark: %s\n", yytext); return '!'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 440 "lexer.l"
{ lexer_print("Found a separator comma: %s\n", yytext); return ','; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 441 "lexer.l"
{lexer_print("Found a separator colon: %s\n", yytext); return ':'; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 442 "lexer.l"
{lexer_error("Invalid semicolon character, not allowed at line %d", yylineno); if (!DEBUG) yyterminate();}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 443 "lexer.l"
{lexer_error("Invalid dollar character, not allowed at line %d", yylineno); if (!DEBUG) yyterminate();}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 445 "lexer.l"
{
    lexer_print("Found a identifier: %s\n", yytext);
    if (endsWith(yytext, "]")) {
        std::string buffer = yytext + 1;
        buffer = buffer.substr(0, buffer.length() - 1);
        yylval.Id = new std::string(buffer);
    } else {
        yylval.Id = new std::string(yytext);
    }
    return ID;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 457 "lexer.l"
{}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 458 "lexer.l"
{lexer_print("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 459 "lexer.l"
{
    lexer_print("Found end of line %d\n\n", yylineno - 1);
    if (in_compound) {
        in_compound = false;
        new_stmt = true;
        lexer_print("Set new statement in compound statement");
    }
    blocking_kw = false;
    return ENDL; 
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 469 "lexer.l"
{lexer_print("File ended\n"); yyterminate();}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 471 "lexer.l"
ECHO;
	YY_BREAK
#line 3131 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 633 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 633 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 632);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 471 "lexer.l"


void removeUnderline(std::string* str) {
    if (str == nullptr) {
        return; 
    }
    str->erase(std::remove(str->begin(), str->end(), '_'), str->end());
}

void removeUnderline(char* str) {
    if (str == nullptr) {
        return; 
    }

    char* writePtr = str;
    char* readPtr = str;

    while (*readPtr != '\0') {
        if (*readPtr != '_') {
            *writePtr = *readPtr;
            writePtr++;
        }
        readPtr++;
    }

    *writePtr = '\0';
}


void printDateTimeLiteral(DateTime & datetime) {
    if (datetime.date != nullptr) {
        lexer_print("Month: %d\n", datetime.date->month);
        lexer_print("Day: %d\n", datetime.date->day);
        lexer_print("Year: %d\n", datetime.date->year);
    }
    if (datetime.time != nullptr) {
        lexer_print("Hour: %d\n", datetime.time->hour);
        lexer_print("Minute: %d\n", datetime.time->minute);
        lexer_print("Second: %d\n", datetime.time->second);
        lexer_print("Time format: ");
        if (datetime.time->format == AM) {
            lexer_print("AM\n");
        }
        else if (datetime.time->format == PM) {
            lexer_print("PM\n");
        }
        else {
            lexer_print("24-hour format\n");
        }
    }
}

void runLexerTests() {
    LEXER_DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };
    int numFiles = sizeof(files) / sizeof(files[0]);
    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        lexer_print("Processing file: %s\n", files[i]);
        yylex();
        fclose(yyin);
        BEGIN(INITIAL);
        yylineno = 1;
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
+ Скобки и управляющие символы (Микулина)
*/
