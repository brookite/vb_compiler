#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 157
#define YY_END_OF_BUFFER 158
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[631] =
    {   0,
        0,    0,    0,    0,    0,    0,  158,  157,  154,  156,
      150,  126,  143,  115,  123,  144,  145,  100,  103,  151,
      104,  149,  102,  135,  152,  111,  105,  112,  148,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  157,
      101,   99,  157,  146,  147,  127,  129,  131,  124,  125,
      154,    0,  156,  143,  143,    0,  142,  143,  116,    0,
        0,  107,  108,  109,  138,  122,    0,  135,  139,    0,
      135,  135,  135,    0,  132,  118,  110,  114,  113,  117,
      153,  153,  153,   22,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,   30,  153,  153,  153,  153,  153,  153,  153,  153,
      153,   34,   10,   11,  153,  153,   86,  153,  153,  153,
      153,  153,   87,  153,   16,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,   71,  153,  153,  153,
      153,  153,  153,  153,  153,    0,  121,  106,  127,  128,
      130,  124,    0,    0,    0,  143,    0,  143,  143,  143,
      143,  143,  136,  137,  138,  139,    0,    0,  138,  135,
      132,    0,  138,  135,  135,  135,    0,  135,  140,    0,
      132,  132,  132,    0,  119,  120,   73,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,   82,  153,  153,  153,   56,  153,
      153,  153,   84,  153,  153,  153,  153,  153,  153,  153,
      153,   13,  153,  153,   15,  153,   64,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  123,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   70,  153,  153,
      153,  153,  153,  153,  153,   94,  155,    0,    0,    0,
        0,    0,  143,  143,  143,  143,  136,  136,  136,  136,
        0,  133,  137,  137,  137,  137,    0,  134,    0,  138,

      138,    0,  140,    0,  135,  138,    0,  140,    0,  140,
      132,  132,  132,  153,  153,  153,    2,  153,   49,   75,
      153,  153,  153,  153,   25,   77,    4,  153,   51,   78,
      153,  153,  153,  153,    6,   28,  153,  153,  153,  153,
       54,  153,  153,   83,    8,    0,  153,    9,  153,  153,
       85,  153,  153,  153,   12,   37,   63,  153,  153,   39,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   69,   92,  153,
      153,   20,   97,  153,  153,  153,  153,  153,    0,    0,
        0,    0,  143,  143,  143,  143,    0,  141,  136,  136,

      136,  133,  133,  133,    0,  137,  137,  137,  134,  134,
      134,    0,  138,    0,    0,  138,    0,  140,  140,  140,
      140,    0,  153,  153,   74,   23,   24,   50,   76,    3,
       26,    5,  153,  153,  153,   53,   80,    7,  153,  153,
      153,  153,    0,    0,    0,    0,   32,   98,  153,  153,
      153,   36,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,   43,  153,   67,  153,  153,   91,  153,
      153,  153,  153,  153,   21,   95,  153,   72,    0,    0,
        0,  141,  143,  143,    0,  143,  143,  143,  133,  133,
      133,  134,  134,  134,  138,  140,    0,  140,  140,  140,

      153,  153,  153,   52,   79,  153,  153,   55,   31,    0,
       59,    0,    0,    0,  153,  153,  153,   14,  153,  153,
       65,  153,   40,  153,  153,  153,   66,  153,   44,   90,
       68,   18,   45,   19,  153,  153,   47,    0,    0,    0,
        0,  143,  143,  143,  143,  140,  140,    1,   48,  153,
       29,   81,    0,    0,   60,    0,  153,  153,   62,   38,
       96,  153,  153,   89,  153,  153,  153,  153,    0,    0,
        0,    0,  143,  143,   27,    0,    0,    0,   33,   35,
       88,  153,  153,   17,  153,   93,    0,    0,  143,    0,
        0,   61,  153,   42,   46,    0,  143,    0,    0,   58,

       41,  143,    0,    0,  143,  143,    0,    0,   57,  143,
        0,  143,    0,  143,    0,  143,  143,  143,    0,    0,
        0,  143,  143,  143,    0,    0,    0,  143,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,    1,   22,
       23,   24,   25,    8,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   42,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   42,   72,   73,   74,   75,   76,   77,   78,
       79,   42,   80,    1,   81,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    1,    3,    4,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        1,    1,    1,    1,    1,    6,    6,    6,    6,    6,
        6,    7,    7,    8,    7,    7,    8,    7,    7,    7,
        7,    7,    7,    8,    7,    8,    7,    7,    7,    7,
        1,    1,    3,    1,    8,    6,    6,    6,    6,    6,
        6,    7,    7,    8,    7,    7,    8,    7,    7,    7,
        7,    7,    8,    7,    8,    7,    7,    7,    7,    1,
        1
    } ;

static const flex_int16_t yy_base[641] =
    {   0,
        0,    0,   79,   80,  414,  410,  407, 4629,   85,  394,
     4629, 4629,   88,   61, 4629, 4629, 4629,  366,  352, 4629,
      349,   77,  333,  124, 4629,   76, 4629,   79, 4629,  107,
      125,  200,  271,  337,  160,  242,  113,  279,  266,  317,
      328,  411,  403,  417,  458,  436,  529,  140,  427,  283,
      293,  262,   85, 4629, 4629,    0, 4629,  111,    0, 4629,
      107,  121,  233,  103,  300,  219,  194,  601, 4629,    0,
      173, 4629, 4629, 4629,  500, 4629,  107,  109, 4629,  143,
     4629, 4629, 4629,  327,  656,  166, 4629, 4629, 4629,  154,
      121,  504,  518,  537, 4629,  544,  636,  542,  624,  629,

      717,  642,  725,  730,  740,  805,  745,  738,  780,  811,
      753,  838,  844,  822,  852,  878,  885,  651,  901,  907,
      913,  918,  906,  974,  948,  981,  986,  995, 1002, 1028,
     1033, 1010, 1057, 1063, 1082, 1075, 1069, 1093, 1146, 1106,
     1136, 1134, 1158, 1152, 1210, 1221, 1172, 1226, 1231, 1236,
     1241, 1249, 1257, 1288, 1300,  116, 4629, 4629,    0, 4629,
     4629,    0,  208, 1314,  143,  498, 1257,  195, 1340,  274,
      149,  245, 1325, 1349, 1388, 4629,  246,  199, 1407,  270,
      382,  118, 1410, 4629, 4629, 4629,  152,    0, 4629,  441,
     4629, 4629, 4629, 1330, 4629, 4629, 1437, 1368, 1447, 1465,

     1476, 1489, 1501, 1496, 1506, 1512, 1532, 1538, 1555, 1562,
     1579, 1585, 1595, 1605, 1611, 1617, 1635, 1646, 1664, 1675,
     1686, 1693, 1699, 1704, 1714, 1742, 1725, 1755, 1766, 1772,
     1782, 1789, 1795, 1802, 1813, 1829, 1842, 1856, 1862, 1868,
     1879, 1896, 1903, 1909, 1926, 1932, 1956, 1961, 1946, 1979,
     1985, 1995, 2015, 2020, 2026, 2042, 2054, 2073, 2083, 2091,
     2096, 2103, 2108, 2124, 2155, 2171, 2176, 2181, 2186, 2197,
     2192, 2208, 2251, 2223, 2260, 2265,  116,  162, 2280,  212,
      175,  187, 2134,  314,  585,  621, 2244, 4629, 4629, 4629,
     1908, 2266, 2288, 4629, 4629, 4629, 2301, 2312,  222, 2340,

     2361,  647, 2388,  249,  295, 2395,  340, 2410,  252, 2432,
     4629, 4629, 4629, 2427, 2469, 2437, 2450, 2500, 2505, 2510,
     2518, 2526, 2531, 2536, 2541, 2552, 2568, 2573, 2583, 2590,
     2599, 2604, 2611, 2622, 2640, 2646, 2653, 2662, 2669, 2679,
     2695, 2703, 2709, 2716, 2721, 2716, 2735, 2730, 2789, 2794,
     2799, 2805, 2813, 2818, 2823, 2828, 2846, 2852, 2865, 2875,
     2880, 2895, 2901, 2908, 2922, 2929, 2938, 2958, 2965, 2971,
     2988, 2995, 2979, 3008, 3021, 3035, 3044, 3062, 3068, 3074,
     3082, 3091, 3096, 3109, 3115, 3121, 3129, 3143,  880,  279,
      833,  933,  346,  455, 3157, 1054, 1090,   86, 4629, 4629,

     4629, 4629, 4629, 4629, 2338, 4629, 4629, 4629, 4629, 4629,
     4629, 2717, 3136,  350,  289, 3161,  851, 3180, 3195, 3217,
     3239,  359, 3222, 3276, 3256, 3283, 3296, 3305, 3310, 3315,
     3326, 3332, 3337, 3343, 3348, 3357, 3362, 3373, 3390, 3379,
     3404, 3416,   67,  230,  435,  322, 3422, 3431, 3437, 3444,
     3451, 3465, 3480, 3486, 3498, 3491, 3507, 3515, 3545, 3565,
     3572, 3578, 3584, 3604, 3612, 3619, 3633, 3638, 3647, 3653,
     3661, 3685, 3696, 3703, 3668, 3715, 3721, 3735,  309,  321,
     3750, 4629,  420, 3756, 3776,  555,  698,  940, 4629, 4629,
     4629, 4629, 4629, 4629, 3765, 3770,  363, 3785, 3819, 3834,

     3861, 3802, 3851, 3876, 3891, 3900, 3910, 3915, 3925,  364,
     4629,  384,  436,  432, 3930, 3941, 3949, 3957, 3964, 3980,
     3988, 3996, 4011, 4018, 4023, 4039, 4049, 4058, 4065, 4070,
     4080, 4089, 4096, 4101, 4107, 4121, 4112,  411,  467,  497,
      502,  677,  945, 1119, 1320, 4112, 4137, 4130, 4154, 4170,
     4180, 4186,  520,  520, 4629,  527, 4196, 4203, 4208, 4213,
     4219, 4233, 4245, 4250, 4255, 4266, 4275, 4282,  497,  580,
     1347, 1484, 1129, 4303, 4287,  511,  555,  580, 4304, 4315,
     4325, 4334, 4341, 4356, 4368, 4374,  633, 4382, 1520,  582,
      556, 4629, 4394, 4388, 4405, 1738, 2216, 2481,  578, 4629,

     4410, 1576,  650,  596,  706, 1268,   67,  635, 4629, 1626,
      687, 4428, 4453, 4463, 4474, 1656, 1066, 1155,  721,  653,
      708, 1717, 1810, 1837,  761, 1921, 1994, 4484, 4494, 4629,
     4565, 4573, 4581, 4587, 4590, 4598, 4606, 4614, 4618, 4620
    } ;

static const flex_int16_t yy_def[641] =
    {   0,
      630,    1,  631,  631,  632,  632,  630,  630,  630,  630,
      630,  630,  633,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  634,
      634,  634,  634,  634,   33,  634,  634,  634,   33,   33,
       33,  634,  634,  634,   33,  634,  634,  634,  634,  635,
      630,  630,  635,  630,  630,  636,  630,  630,  637,  630,
      630,  630,  630,  633,  633,  630,  638,  633,  630,  639,
      630,  630,  630,  630,  630,  630,  630,   24,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  634,  634,  634,  630,  634,  634,   47,  634,  634,

      634,  634,  634,  634,  634,  634,  634,   47,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  106,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,   33,  634,  634,  634,
      634,   33,  634,   33,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  635,  630,  630,  636,  630,
      630,  637,  630,  630,  638,  633,  630,  633,  633,  633,
      633,  633,  640,  630,  630,  630,  630,  630,  630,   24,
       85,  630,  630,  630,  630,  630,  630,   24,  630,  630,
      630,  630,  630,  630,  630,  630,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  630,  630,  630,  630,
      630,  630,  633,  633,  633,  633,  640,  630,  630,  630,
      630,  287,  630,  630,  630,  630,  630,  630,  630,  630,

      630,  630,  630,  630,   24,  630,  630,  630,  630,  630,
      630,  630,  630,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  630,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  630,  630,
      630,  630,  633,  633,  633,  633,  630,  638,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  630,  630,  630,  630,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  630,  630,
      630,  630,  633,  633,  630,  633,  633,  633,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  630,
      630,  630,  630,  630,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  630,  630,  630,
      630,  633,  633,  633,  633,  630,  630,  634,  634,  634,
      634,  634,  630,  630,  630,  630,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  630,  630,
      630,  630,  633,  633,  634,  630,  630,  630,  634,  634,
      634,  634,  634,  634,  634,  634,  630,  630,  633,  630,
      630,  630,  634,  634,  634,  630,  633,  630,  630,  630,

      634,  633,  630,  630,  633,  633,  630,  630,  630,  633,
      630,  633,  630,  633,  630,  633,  633,  633,  630,  630,
      630,  633,  633,  633,  630,  630,  630,  633,  630,    0,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630
    } ;

static const flex_int16_t yy_nxt[4711] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,    8,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   37,   37,   39,   40,   41,   42,
       43,   37,   44,   45,   46,   47,   37,   48,   49,   37,
       50,   51,    8,   52,   53,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   37,   37,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   37,   48,   49,   37,   54,
       55,   57,   57,   69,   58,   58,   61,  608,   61,   65,
       66,   65,   67,   70,   67,   75,   75,   86,   87,   88,

       71,   89,   90,  155,  155,  630,   68,   68,   61,   67,
       61,   91,  510,   91,   91,   91,  160,   91,  277,   91,
       91,   91,  163,   70,  163,  179,  179,  180,  180,   91,
       71,   91,   91,   91,  155,  155,  183,  183,  161,   62,
       77,  510,   78,   78,   91,   93,   91,   91,   91,   67,
       94,  630,   79,   80,   79,   67,  182,   81,  182,   95,
       82,  183,  183,  181,   96,   95,   79,   83,  161,   84,
      308,  308,  153,   95,   97,   93,  196,   95,   85,   94,
      389,  389,   79,   80,   79,  118,  285,   81,  195,   92,
       82,  174,   95,   92,   96,   79,   83,  630,   84,  119,

       67,   67,  153,   97,   91,  120,   91,   91,   91,  163,
      277,  163,  391,  283,  283,  118,  285,  175,  175,   92,
       66,   66,   66,   92,  392,   98,   99,  100,  101,  119,
      390,  390,  102,  103,  120,   63,  104,  164,  164,  105,
      300,  300,  391,  106,  107,  108,   91,  630,   91,   91,
       91,   67,   95,  178,  392,   98,   99,  100,  101,  299,
      511,  299,  102,  103,  300,  300,  104,  418,  418,  105,
      310,  310,  106,  107,  108,   91,  630,   91,   91,   91,
       67,  121,  286,   91,  158,   91,   91,   91,  180,  180,
      511,   92,  284,  284,   95,   92,  109,  481,  481,  125,

      110,   65,   66,   65,  111,  126,   67,  416,  416,  122,
      112,  121,  286,  180,  180,  157,  630,  123,   68,   68,
       67,   92,  124,   95,  181,   92,  109,  538,  538,  125,
      110,   95,  395,  395,  111,  126,  479,  156,  479,  122,
      112,   91,   92,   91,   91,   91,  127,  123,  630,  181,
       92,  124,   67,   92,  514,   76,  128,  130,  306,  306,
      184,   92,  113,  185,  483,  483,  129,  131,  413,  413,
      186,   74,   92,  114,   73,  115,  127,  421,  421,  116,
       92,  498,  498,   92,  514,  117,  128,  130,   72,   95,
      184,   92,  113,  185,  307,  129,   63,  131,  304,  186,

      305,  305,  553,  114,  414,  115,  630,   91,  116,   91,
       91,   91,   60,  422,  117,   91,   60,   91,   91,   91,
      554,   91,  630,   91,   91,   91,   67,  630,  136,  569,
      569,   91,  553,   91,   91,   91,  181,  132,  542,  542,
       91,  133,   91,   91,   91,  137,  139,  630,  138,  630,
      554,  134,  630,  135,  309,   95,  309,  630,  136,  310,
      310,   67,  555,   95,  512,  556,  154,  132,  146,   95,
      393,  133,  393,  630,  137,  147,  139,  138,  148,   95,
      513,  134,  135,   92,  140,  570,  570,  141,   95,  630,
      142,  143,  555,  630,  512,  556,  154,   92,  146,  166,

      167,  166,  144,  145,   67,  147,  630,  148,   91,  513,
       91,   91,   91,   92,  140,  587,  587,  141,  175,  175,
      142,  143,   91,  171,   91,   91,   91,   92,  176,  177,
      176,  144,  145,   91,  571,   91,   91,   91,  172,  572,
      630,   91,  176,   91,   91,   91,  197,  576,   91,  577,
       91,   91,   91,  171,  178,  590,   95,  630,  176,  177,
      176,   67,  149,  578,  571,  150,  630,  151,  172,  572,
       95,  176,  152,  543,  543,   92,  197,  576,  202,  577,
       92,   95,  591,  198,  590,  203,  396,  397,  396,   95,
      630,  398,  149,  578,  630,  150,   95,  151,  588,  588,

      600,  152,  166,  167,  166,   92,  630,   67,  202,  592,
       92,  630,  591,  198,  203,  599,  168,  604,  168,  169,
      169,  170,  396,  397,  396,  630,  171,  398,   91,  600,
       91,   91,   91,   91,  609,   91,   91,   91,  630,  592,
       91,  172,   91,   91,   91,  599,   91,  604,   91,   91,
       91,  596,  596,  611,  611,   91,  171,   91,   91,   91,
      415,  206,  415,  204,  609,  416,  416,  209,  607,  607,
      608,  172,  187,  205,  188,  188,   95,  630,  199,  630,
      200,   95,  201,   67,  189,  190,  189,  232,   95,  191,
      626,  206,  192,  204,   95,  573,  573,  209,  189,  193,

      630,  194,  205,   95,   67,  613,  613,  199,  630,  200,
       85,  201,   67,  630,  189,  190,  189,  232,  630,  191,
      626,   91,  192,   91,   91,   91,  606,  189,  193,   91,
      194,   91,   91,   91,   91,  544,   91,   91,   91,  625,
      625,  630,  207,  208,   91,  627,   91,   91,   91,   91,
      630,   91,   91,   91,  630,  211,  630,   91,  630,   91,
       91,   91,  630,  210,  630,  544,  213,  630,  212,   95,
      630,  220,  207,  208,  221,  627,   92,   95,  214,  629,
      629,  222,   95,  630,   91,  211,   91,   91,   91,  630,
      225,  630,   95,  210,  219,  630,  213,   95,  212,  630,

      630,  220,  630,  630,  221,   95,   92,  630,  214,   91,
      222,   91,   91,   91,  630,   91,  630,   91,   91,   91,
      225,  630,  630,  219,  223,  630,   91,  630,   91,   91,
       91,  215,   95,  630,  397,  397,  397,  216,  224,  482,
      630,  630,   91,  217,   91,   91,   91,  630,   91,  218,
       91,   91,   91,  223,  630,  630,   91,   95,   91,   91,
       91,  215,  630,   95,  497,  228,  497,  216,  224,  498,
      498,  227,  630,  217,   95,  630,  630,  630,  218,  630,
      229,  630,   91,  226,   91,   91,   91,  630,  630,   91,
       95,   91,   91,   91,  228,  479,   95,  479,  480,  480,

      630,  227,  630,  230,   95,   91,  630,   91,   91,   91,
      229,   91,  226,   91,   91,   91,  630,   91,  231,   91,
       91,   91,   91,  630,   91,   91,   91,  630,  630,  630,
       95,  630,   92,  230,  397,  397,  397,   95,  236,  482,
      630,  630,  630,  233,   92,  234,   67,  630,  231,  630,
      237,   67,   91,   95,   91,   91,   91,  235,  630,   95,
      630,  630,   92,  574,  574,   95,  630,  630,  236,  630,
       95,  630,  233,  630,   92,  234,  630,  545,   91,  237,
       91,   91,   91,  239,  630,   91,  235,   91,   91,   91,
       91,  630,   91,   91,   91,  630,  630,  630,  630,   91,

       95,   91,   91,   91,  630,  630,   91,  545,   91,   91,
       91,  630,  238,  239,   91,  630,   91,   91,   91,  240,
      241,  630,  630,  242,  630,  630,   95,  630,  243,  244,
      630,  630,   91,   95,   91,   91,   91,   91,   95,   91,
       91,   91,  238,  630,  248,  630,  630,   95,  630,  240,
      241,  630,  630,  242,   95,  396,  397,  396,  243,  244,
      398,   91,   95,   91,   91,   91,  630,   91,  630,   91,
       91,   91,   67,  630,  248,  245,  246,  247,  630,   91,
       95,   91,   91,   91,  630,   95,   91,  630,   91,   91,
       91,  397,  397,  397,   92,  630,  482,   91,   92,   91,

       91,   91,  252,  623,  245,  246,  247,  249,  253,   95,
       91,  250,   91,   91,   91,   95,  630,  251,  630,  254,
      396,  397,  396,  630,   92,  398,  630,   95,   92,  630,
      630,  630,  252,  623,   95,   67,  249,  630,  253,  630,
       91,  250,   91,   91,   91,   95,  251,  589,  589,  254,
       91,  630,   91,   91,   91,  259,  630,  630,   95,  261,
      630,   67,   91,   92,   91,   91,   91,   92,  630,  630,
      630,  255,  260,  262,  256,  630,   91,  264,   91,   91,
       91,  265,  630,  257,  259,   92,  630,  630,   95,  261,
      258,  266,  624,   92,  267,  630,  263,   92,   95,  630,

      630,  255,  260,  262,  256,  630,  630,  264,  630,  630,
       95,  265,  630,  257,   91,   92,   91,   91,   91,  258,
      630,  266,  624,  267,   95,   91,  263,   91,   91,   91,
       91,  630,   91,   91,   91,   91,  268,   91,   91,   91,
       91,  630,   91,   91,   91,   91,  630,   91,   91,   91,
      269,  630,  630,   91,  630,   91,   91,   91,  167,  167,
      167,   91,   95,   91,   91,   91,  268,  630,  630,  271,
      630,  270,  630,   95,   67,  272,  630,  630,   95,  630,
      269,  274,  281,   95,  630,  273,  610,  610,   95,  630,
      275,  630,   91,   95,   91,   91,   91,  282,  630,  271,

      270,   95,  630,  630,   91,  272,   91,   91,   91,   95,
      630,  274,  281,  630,  273,  167,  167,  167,  630,  630,
      275,  396,  397,  396,  630,  630,  398,  282,  630,  278,
      276,  278,  279,  279,  280,  630,  630,  630,  630,  281,
       95,  166,  167,  166,  630,  630,   67,  630,  397,  397,
      397,  630,   95,  482,  282,  168,  630,  168,  288,  276,
      170,  289,  630,  311,  630,  171,  312,  293,  290,  281,
      291,  630,   91,  313,   91,   91,   91,  630,  630,  292,
      172,  630,  294,  630,  282,  295,  630,  630,  288,  630,
      630,  289,  296,  311,  297,  171,  312,  290,  630,  291,

      630,  630,  313,  298,  315,  630,  175,  175,  630,  630,
      172,  630,  294,  630,  630,  295,  176,  177,  176,  630,
       95,  296,  630,  297,  630,  301,  301,  630,  306,  306,
      176,  630,  630,  630,  315,   79,  302,   79,   79,  630,
       79,   91,  178,   91,   91,   91,  176,  177,  176,   79,
      630,   91,   79,   91,   91,   91,  630,  630,  630,  176,
      630,  303,  314,  630,  307,   79,  302,   79,   79,   91,
       79,   91,   91,   91,  630,  630,  316,  630,   79,  630,
       91,   79,   91,   91,   91,  397,  397,  397,  630,   95,
      482,  630,  314,   91,  317,   91,   91,   91,  630,   95,

       91,  318,   91,   91,   91,   91,  316,   91,   91,   91,
       91,  630,   91,   91,   91,  630,   91,   95,   91,   91,
       91,  597,  598,  597,  317,  319,  398,  630,   95,  630,
      320,  318,  630,  630,  630,  321,   91,  323,   91,   91,
       91,   95,   91,  630,   91,   91,   91,  630,   95,  630,
      322,  630,  630,   95,  630,  319,  630,  630,   95,   91,
      320,   91,   91,   91,   95,  321,   91,  323,   91,   91,
       91,  630,  630,  630,  325,  630,  324,  630,  630,  322,
      630,  630,   67,   91,   95,   91,   91,   91,  630,   91,
       95,   91,   91,   91,  605,  605,  606,  326,  630,   91,

      630,   91,   91,   91,  325,  324,  327,   95,  630,   91,
      630,   91,   91,   91,   95,   91,  329,   91,   91,   91,
      630,   91,  328,   91,   91,   91,  326,  630,  630,  330,
      630,   95,   67,  630,  630,  327,  630,   95,  630,   91,
      630,   91,   91,   91,  612,  612,  329,   95,  331,  332,
       91,  328,   91,   91,   91,  630,  334,   95,  630,  330,
      333,  630,   67,   95,  630,  630,  335,  630,   91,   95,
       91,   91,   91,  630,  622,  622,  630,  331,  332,   91,
      630,   91,   91,   91,  630,  630,  334,   95,  336,  333,
       91,  630,   91,   91,   91,  630,  335,   91,   95,   91,

       91,   91,  630,   91,  337,   91,   91,   91,   91,  630,
       91,   91,   91,  338,  630,  630,   95,  336,   91,  630,
       91,   91,   91,   67,  339,  340,  630,   95,  341,   91,
      630,   91,   91,   91,  337,  628,  628,  342,   95,  598,
      598,  598,  630,  338,  482,   95,   91,  630,   91,   91,
       91,   95,  630,  630,  339,  340,   95,  344,  341,   91,
      630,   91,   91,   91,  630,  630,   95,  342,  343,  346,
       91,  630,   91,   91,   91,  630,   91,   95,   91,   91,
       91,  630,  630,  630,  345,  630,   91,  344,   91,   91,
       91,  630,  630,   91,   95,   91,   91,   91,  343,   91,

      630,   91,   91,   91,  630,  630,   91,   95,   91,   91,
       91,  396,  397,  396,  345,  347,  398,   91,   95,   91,
       91,   91,  630,  630,   95,  630,  348,  630,  630,  350,
      630,  630,  349,   91,   95,   91,   91,   91,  396,  397,
      396,   95,  630,  398,  347,  630,   91,   95,   91,   91,
       91,  630,  351,  630,   95,  348,  630,  630,  352,  350,
       91,  349,   91,   91,   91,   95,   91,  630,   91,   91,
       91,  353,   91,  630,   91,   91,   91,  630,  630,  630,
      630,   95,  351,   91,  630,   91,   91,   91,  352,  630,
      630,  355,  630,  630,   95,  354,  630,  630,  630,  356,

       91,  353,   91,   91,   91,  630,  630,   91,   95,   91,
       91,   91,  630,   91,   95,   91,   91,   91,  630,  357,
       95,  355,  397,  397,  397,  354,  630,  482,  358,  356,
       91,   95,   91,   91,   91,  630,   91,  630,   91,   91,
       91,  399,  630,  630,  400,  359,  630,  630,   95,  357,
       91,  401,   91,   91,   91,   95,  630,  630,  358,  630,
       91,   95,   91,   91,   91,   91,  630,   91,   91,   91,
      630,  399,  630,  630,  400,  359,  360,  630,   95,  363,
      401,  630,  630,   91,   95,   91,   91,   91,  361,   91,
      362,   91,   91,   91,  630,  397,  397,  397,   95,   91,

      482,   91,   91,   91,  630,  360,  630,  630,   95,  363,
      365,  630,  630,   95,  630,  364,  630,  630,  361,   91,
      362,   91,   91,   91,   91,  630,   91,   91,   91,  630,
       91,   95,   91,   91,   91,  630,  630,   95,  630,  630,
      365,  366,  630,  630,  630,  364,   91,   95,   91,   91,
       91,  630,  630,  630,  369,  630,  368,  630,   91,  367,
       91,   91,   91,  630,  630,  630,  630,   95,  630,  630,
      366,  630,   95,  630,  630,  370,  630,   91,   95,   91,
       91,   91,  630,  630,  369,  630,  368,   91,  367,   91,
       91,   91,  630,  630,   95,   91,  630,   91,   91,   91,

       91,  630,   91,   91,   91,  370,   95,   91,  630,   91,
       91,   91,   91,  630,   91,   91,   91,  630,  371,  630,
      373,  630,  630,  630,  630,   95,  630,  372,   91,  630,
       91,   91,   91,  630,  630,   95,  630,  630,  374,  376,
       67,  630,  630,   95,  630,  375,  630,  371,   95,  393,
      373,  393,  394,  394,  630,   95,  372,  630,  630,   91,
       95,   91,   91,   91,  630,  630,  630,  374,  377,  376,
      630,  630,  630,  630,  375,   91,   95,   91,   91,   91,
       91,  630,   91,   91,   91,   91,  630,   91,   91,   91,
       91,  630,   91,   91,   91,  378,   91,  377,   91,   91,

       91,   91,  630,   91,   91,   91,  630,   95,  630,  380,
      630,  379,   91,  630,   91,   91,   91,  597,  598,  597,
      630,  381,  398,   95,  382,  378,  383,   91,   95,   91,
       91,   91,  630,   95,  602,  602,  384,  630,   95,  380,
      630,  379,  630,  630,   95,  630,  385,  630,  630,   95,
      381,  630,  630,  630,  382,   91,  383,   91,   91,   91,
       95,  630,  387,  630,   91,  384,   91,   91,   91,   91,
      630,   91,   91,   91,  630,   95,  385,  288,  630,  630,
      289,  167,  167,  167,  386,  630,  630,  290,  630,  291,
      630,  630,  387,  630,  630,  278,  388,  278,  292,  402,

      280,  630,  403,   95,  630,  281,  293,  288,  630,  404,
      289,  405,   95,  630,  386,  630,  290,   95,  291,  630,
      282,  294,  630,  630,  295,  630,  388,  630,  630,  402,
      293,  296,  403,  297,  406,  281,  630,  407,  404,  630,
      405,  630,  298,  630,  408,  409,  630,  630,  410,  630,
      282,  294,  630,  630,  295,  411,  630,  412,  413,  413,
      296,  630,  297,  630,  406,  630,  298,  407,  176,  630,
      176,  489,  630,  408,  490,  409,  630,  630,  410,  301,
      301,  491,  176,  630,  411,  630,  412,  630,  630,   79,
      302,   79,  630,  630,  414,  630,  630,  630,  176,  630,

      176,  489,  630,   79,  490,  630,  301,  301,  630,  630,
      491,  176,  630,  306,  306,  303,  189,  417,  189,   79,
      302,   79,  630,   79,  630,   79,  630,  630,  419,  419,
      189,   91,   79,   91,   91,   91,  630,   79,  189,  190,
      189,   91,  303,   91,   91,   91,  189,  417,  189,  307,
      421,  421,  189,   79,   91,   79,   91,   91,   91,  189,
      189,  630,  189,  423,  420,  630,   79,  425,  189,  190,
      189,  630,  630,   91,  189,   91,   91,   91,  630,   95,
      630,  189,  598,  598,  598,  630,  422,  482,  630,   95,
      189,  630,  189,  423,  630,  630,  630,  425,  424,  603,

      603,  630,   95,  189,   91,  630,   91,   91,   91,   91,
      630,   91,   91,   91,   91,  630,   91,   91,   91,  630,
      630,   95,   91,  630,   91,   91,   91,  630,  424,  630,
       91,  630,   91,   91,   91,   91,  426,   91,   91,   91,
       91,  630,   91,   91,   91,   91,  630,   91,   91,   91,
      630,  630,   95,  630,  427,  428,   91,   95,   91,   91,
       91,  630,   95,  630,  630,  430,  426,  630,  630,  630,
       95,  630,   91,  429,   91,   91,   91,   91,   95,   91,
       91,   91,  630,   95,  427,  428,  630,   91,   95,   91,
       91,   91,  630,   95,   91,  430,   91,   91,   91,  630,

      630,  630,  429,   91,   95,   91,   91,   91,   91,  630,
       91,   91,   91,  630,  630,   91,  431,   91,   91,   91,
       95,  630,  630,  630,  630,   95,   91,  630,   91,   91,
       91,  630,  630,  630,  630,   95,  630,  433,  630,  630,
      630,  630,   95,  432,   91,  431,   91,   91,   91,  630,
       91,   95,   91,   91,   91,  434,   95,   91,  630,   91,
       91,   91,  630,   95,  435,  630,   91,  433,   91,   91,
       91,  630,  432,   91,   95,   91,   91,   91,  630,  630,
      630,  630,  436,   91,  434,   91,   91,   91,  630,  630,
      630,  630,   95,  435,  630,  630,  630,  630,   95,   91,

      438,   91,   91,   91,  630,   95,  437,   91,  630,   91,
       91,   91,  436,   91,   95,   91,   91,   91,  439,  346,
       91,   95,   91,   91,   91,   91,  630,   91,   91,   91,
      438,   95,  630,  630,   91,  437,   91,   91,   91,   91,
      440,   91,   91,   91,  630,  441,  443,   95,  439,  444,
      492,  630,  630,  493,  442,   95,  630,  630,  630,  445,
      494,   95,  630,  446,  447,  630,  630,  630,   95,  630,
      440,  630,  630,   95,  630,  441,  443,  630,  630,  444,
      492,  630,   95,  493,  442,  630,  630,   95,  445,  494,
      630,  630,  446,   91,  447,   91,   91,   91,   91,  630,

       91,   91,   91,   91,  630,   91,   91,   91,  630,   91,
      630,   91,   91,   91,  630,  630,  630,   91,  448,   91,
       91,   91,   91,  630,   91,   91,   91,   91,  630,   91,
       91,   91,   91,  630,   91,   91,   91,  630,  449,  630,
      630,   95,  630,  630,  451,  630,   95,  450,  448,  630,
       91,   95,   91,   91,   91,  630,   91,   95,   91,   91,
       91,  630,  452,  630,  630,   95,  630,  449,  630,   91,
       95,   91,   91,   91,  451,   95,  450,  630,  630,   91,
       95,   91,   91,   91,   91,  630,   91,   91,   91,  630,
      454,  452,  630,  630,  630,  453,  630,  630,   95,   91,

      630,   91,   91,   91,   95,   91,  630,   91,   91,   91,
      630,  630,   91,  455,   91,   91,   91,   95,  630,  630,
      454,  630,  456,  630,  453,  630,   91,   95,   91,   91,
       91,  630,   95,   91,  630,   91,   91,   91,  630,  630,
      457,  630,   91,  455,   91,   91,   91,   95,  630,  630,
      630,  458,  456,   95,  460,  630,  630,  630,  630,  459,
       95,  630,   91,  630,   91,   91,   91,  461,  630,   91,
      457,   91,   91,   91,   95,   91,  630,   91,   91,   91,
      458,   95,  630,   91,  460,   91,   91,   91,  630,  459,
       95,  462,   91,  630,   91,   91,   91,  461,  630,   91,

      630,   91,   91,   91,  463,  630,  467,  630,  464,  630,
       95,  630,   91,  630,   91,   91,   91,   95,  630,  630,
      630,  462,  630,   95,  466,   91,  630,   91,   91,   91,
      465,   95,  630,  630,  463,  630,  467,  468,  464,   91,
       95,   91,   91,   91,  630,  630,  630,   95,   91,  630,
       91,   91,   91,  630,  466,  630,  630,  630,  630,  465,
       95,  630,  630,  630,  630,  469,   91,  468,   91,   91,
       91,  470,   91,   95,   91,   91,   91,  471,   91,  630,
       91,   91,   91,  630,  630,  630,   91,   95,   91,   91,
       91,  630,  630,  630,  469,   91,   95,   91,   91,   91,

       91,  470,   91,   91,   91,  630,  630,  471,  630,  473,
      630,  630,  472,   91,   95,   91,   91,   91,  630,   91,
       95,   91,   91,   91,  630,   91,   95,   91,   91,   91,
      630,  630,  630,   91,   95,   91,   91,   91,  474,  473,
      630,  630,  472,   95,  630,  630,  475,   91,   95,   91,
       91,   91,  630,  630,  413,  413,  630,  476,  484,  485,
      484,   95,  630,  398,  176,  630,  176,   95,  474,  630,
      630,  477,  478,   95,  630,  630,  475,  486,  176,  495,
      495,   95,  487,  630,  630,  630,  630,  476,  630,   79,
      414,   79,  630,  630,  176,   95,  176,  488,  499,  499,

      477,  630,  478,   79,  630,  630,  630,  176,  189,  417,
      189,  630,  487,  419,  419,  496,  630,  630,  630,   79,
      630,   79,  189,  189,  190,  189,   91,  488,   91,   91,
       91,  630,   79,  630,  500,  419,  419,  189,  189,  417,
      189,  630,  630,  630,  630,  189,  190,  189,  630,  420,
      630,  189,  630,  189,  190,  189,  630,  421,  421,  189,
       91,  630,   91,   91,   91,  501,  189,  189,  630,  189,
      630,  420,  630,  630,   95,  189,  190,  189,  630,  630,
       91,  189,   91,   91,   91,  630,  630,   91,  189,   91,
       91,   91,  630,  422,  501,  630,  630,  189,  630,  189,

       91,  502,   91,   91,   91,  630,  630,  630,   95,   91,
      189,   91,   91,   91,   91,  630,   91,   91,   91,   91,
      630,   91,   91,   91,  630,  630,  630,  630,   95,  630,
       91,  502,   91,   91,   91,   95,   91,  630,   91,   91,
       91,   91,  630,   91,   91,   91,  630,   91,   95,   91,
       91,   91,   91,  630,   91,   91,   91,   95,  630,  630,
      630,   91,   95,   91,   91,   91,   91,   95,   91,   91,
       91,  630,  504,  630,  630,  503,  630,   91,   95,   91,
       91,   91,  630,   91,   95,   91,   91,   91,  630,   95,
      630,  630,  505,  630,   91,   95,   91,   91,   91,  630,

       95,  630,  504,  630,  507,  503,  630,  630,   91,   95,
       91,   91,   91,  630,   95,  630,  630,  630,  630,  630,
       91,  505,   91,   91,   91,   95,   91,  630,   91,   91,
       91,   95,  506,  508,  507,   91,  630,   91,   91,   91,
      630,   91,   95,   91,   91,   91,  509,  630,   91,  630,
       91,   91,   91,  630,  630,   91,   95,   91,   91,   91,
      630,  506,  630,  508,  630,  630,  630,  630,   95,   91,
      515,   91,   91,   91,   95,  630,  509,  516,  630,  630,
      517,  630,  630,   95,   91,  630,   91,   91,   91,   95,
       91,  630,   91,   91,   91,   91,   95,   91,   91,   91,

      515,  630,   91,   95,   91,   91,   91,  516,  630,  518,
      517,   91,  630,   91,   91,   91,  630,   95,  630,   91,
      630,   91,   91,   91,  630,  630,  630,  630,  630,  519,
      630,  630,   95,  630,  630,  521,  520,  630,   95,  518,
      630,  630,  630,   95,  523,  522,  630,  630,  630,   91,
       95,   91,   91,   91,  630,  630,  630,  630,  519,   95,
      630,  630,  630,  630,  521,  630,  520,   95,  630,   91,
      524,   91,   91,   91,  523,  522,   91,  630,   91,   91,
       91,  630,   91,  630,   91,   91,   91,  630,   91,  630,
       91,   91,   91,  630,  630,  630,  630,   95,  630,  526,

      524,  630,  630,  630,  630,  527,  630,  630,   91,  525,
       91,   91,   91,  630,  630,  630,   91,   95,   91,   91,
       91,  630,  528,   91,   95,   91,   91,   91,  630,  526,
       95,  630,  630,  630,  630,  527,   95,   91,  525,   91,
       91,   91,   91,  630,   91,   91,   91,  630,  630,  630,
      529,   91,  528,   91,   91,   91,   95,   91,  630,   91,
       91,   91,  630,  630,   95,   91,  531,   91,   91,   91,
      630,   95,   91,  630,   91,   91,   91,  530,  630,  630,
      529,  630,  532,  630,  630,   95,  630,  630,  533,   91,
       95,   91,   91,   91,  630,  630,  531,  630,  630,   95,

       91,  630,   91,   91,   91,   95,  530,   91,  630,   91,
       91,   91,  532,   95,  630,  630,  534,  630,  533,   91,
       95,   91,   91,   91,  630,   91,  630,   91,   91,   91,
      630,  630,  630,  630,  536,  630,  630,   95,  630,   91,
      535,   91,   91,   91,  630,  630,  534,  630,   95,  630,
      630,  485,  485,  485,  630,   95,  482,  484,  485,  484,
      630,  630,  398,  630,  536,  537,  630,   95,  630,  535,
      539,  630,  630,   95,  630,  540,  630,  485,  485,  485,
      630,  487,  482,  495,  495,  630,  630,   95,  495,  495,
      541,  630,  630,   79,  537,   79,  488,  630,  189,  630,

      189,  540,  630,  546,  546,  540,   91,   79,   91,   91,
       91,  487,  189,  189,  630,  189,  541,  630,  630,  496,
      541,  630,  630,   79,  496,   79,  488,  189,  189,  630,
      189,  540,  630,  630,  630,  630,   79,  499,  499,  547,
      549,  189,  630,  189,  630,  189,  541,  189,  417,  189,
      630,  630,  499,  499,   95,   91,  189,   91,   91,   91,
      630,  189,  189,  417,  189,   91,  630,   91,   91,   91,
      549,  630,  630,  500,  630,  630,  189,  189,  417,  189,
       91,  630,   91,   91,   91,  630,  630,  630,  500,  630,
      189,  630,  189,  417,  189,   91,  550,   91,   91,   91,

      548,  630,  630,   95,   91,  189,   91,   91,   91,  630,
      630,  630,  630,   95,   91,  630,   91,   91,   91,   91,
      630,   91,   91,   91,  630,  550,  630,  630,   95,   91,
      548,   91,   91,   91,   91,  630,   91,   91,   91,  630,
      630,  630,  630,   95,  551,   91,  552,   91,   91,   91,
      630,  630,   95,   91,  630,   91,   91,   91,  630,  630,
      630,   91,   95,   91,   91,   91,  630,   95,   91,  557,
       91,   91,   91,  551,  630,  630,  552,   95,  630,  630,
      630,  630,   95,  630,   91,  558,   91,   91,   91,  630,
      630,  559,   91,   95,   91,   91,   91,  630,  630,  557,

       91,   95,   91,   91,   91,  630,  630,  560,  630,   95,
      630,  561,  630,  630,  558,   91,   95,   91,   91,   91,
      559,  562,   91,  630,   91,   91,   91,   91,  630,   91,
       91,   91,   95,  630,  630,  630,  560,  630,  630,  630,
       95,  561,  630,   91,  630,   91,   91,   91,   95,  630,
      630,  562,  564,   91,  630,   91,   91,   91,  630,  630,
      563,  630,   91,   95,   91,   91,   91,  630,  630,   91,
       95,   91,   91,   91,   91,   95,   91,   91,   91,  630,
      630,  630,  564,  565,   91,  630,   91,   91,   91,  563,
      630,   95,  630,   91,  566,   91,   91,   91,  630,  630,

       91,   95,   91,   91,   91,   91,  630,   91,   91,   91,
       95,   91,  565,   91,   91,   91,   91,   95,   91,   91,
       91,  630,   95,  630,  566,   91,  630,   91,   91,   91,
      546,  546,   95,  630,   91,  630,   91,   91,   91,  630,
      189,   95,  189,  630,  630,  630,  630,  630,   95,  630,
      568,  630,  567,   95,  189,  546,  546,  630,   91,   95,
       91,   91,   91,  630,   95,  189,  547,  189,  630,  630,
      189,  630,  189,   95,   91,  630,   91,   91,   91,  189,
      568,  567,   95,  189,   91,  630,   91,   91,   91,  630,
       91,  547,   91,   91,   91,  189,  630,  189,  630,  575,

       91,  630,   91,   91,   91,  630,   95,   91,  189,   91,
       91,   91,   91,  630,   91,   91,   91,   91,  630,   91,
       91,   91,   95,   91,  630,   91,   91,   91,  630,  575,
      630,  630,   95,  630,  579,  630,  630,   91,   95,   91,
       91,   91,  630,  630,  630,  630,  580,  630,   95,   91,
      630,   91,   91,   91,   91,   95,   91,   91,   91,   91,
       95,   91,   91,   91,  579,   95,  630,  630,  630,  581,
       91,   95,   91,   91,   91,  580,  630,  630,  630,   91,
      630,   91,   91,   91,  583,   95,   91,  582,   91,   91,
       91,   91,  630,   91,   91,   91,  630,   95,  630,  581,

      630,  630,   95,  630,  484,  485,  484,   95,   91,  398,
       91,   91,   91,  630,  583,  584,  582,  585,   95,   91,
      630,   91,   91,   91,  586,  630,  630,   95,  487,   91,
      630,   91,   91,   91,   95,  630,  630,  630,   91,   95,
       91,   91,   91,  488,  584,   91,  585,   91,   91,   91,
      630,  630,  630,  586,  630,  630,   95,  630,  487,  593,
       91,  630,   91,   91,   91,  630,  630,   95,  630,  594,
      630,  630,   91,  488,   91,   91,   91,   95,   91,  630,
       91,   91,   91,  485,  485,  485,   95,  630,  482,  593,
      630,  630,   91,   95,   91,   91,   91,  595,   91,  594,

       91,   91,   91,  630,  630,  630,  630,  540,   95,   91,
      630,   91,   91,   91,   91,  630,   91,   91,   91,  630,
       95,  630,  541,  630,  630,  630,   95,  595,  630,  614,
      615,  614,  630,  630,  398,  630,  630,  540,  630,  630,
       95,  630,  630,  601,  630,  630,   95,  630,  616,  630,
      630,  630,  541,  617,  615,  615,  615,   95,  630,  482,
      630,  630,   95,  630,  614,  615,  614,  630,  618,  398,
      630,  630,  601,  619,  630,  615,  615,  615,  620,  630,
      482,  630,  630,  617,  630,  614,  615,  614,  617,  630,
      398,  630,  630,  621,  630,  615,  615,  615,  618,  620,

      482,  630,  630,  618,  630,  630,  630,  630,  620,  617,
      630,  630,  630,  630,  621,  630,  630,  630,  617,  620,
      630,  630,  630,  621,  618,  630,  630,  630,  630,  620,
      630,  630,  630,  618,  621,  630,  630,  630,  630,  617,
      630,  630,  630,  630,  621,  630,  630,  630,  630,  620,
      630,  630,  630,  630,  618,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  621,   56,   56,   56,   56,   56,
       56,   56,   56,   59,   59,   59,   59,   59,   59,   59,
       59,   64,   64,   64,   64,   64,   64,   64,   64,   92,
      630,   92,   92,   92,   92,  155,  155,  155,  159,  630,

      159,  630,  159,  159,  159,  159,  162,  630,  162,  162,
      162,  162,  162,  162,  165,  630,  165,  165,  165,  165,
      165,  165,  173,  173,  287,  287,  630,  287,    7,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630
    } ;

static const flex_int16_t yy_chk[4711] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,   14,    3,    4,    9,  607,    9,   13,
       13,   13,  398,   14,   13,   22,   22,   26,   26,   26,

       14,   28,   28,   53,   53,   64,   13,   13,   61,   64,
       61,   30,  443,   30,   30,   30,   58,   37,  277,   37,
       37,   37,   62,   14,   62,   77,   77,   78,   78,   31,
       14,   31,   31,   31,  156,  156,  182,  182,   58,    9,
       24,  443,   24,   24,   48,   30,   48,   48,   48,  165,
       30,  171,   24,   24,   24,  171,   80,   24,   80,   30,
       24,   80,   80,   78,   31,   37,   24,   24,   58,   24,
      187,  187,   48,   91,   31,   30,   90,   31,   24,   30,
      278,  278,   24,   24,   24,   35,  171,   24,   86,   35,
       24,   71,   48,   35,   31,   24,   24,  168,   24,   35,

       67,  168,   48,   31,   32,   35,   32,   32,   32,  163,
      163,  163,  281,  168,  168,   35,  171,  178,  178,   35,
       66,   66,   66,   35,  282,   32,   32,   32,   32,   35,
      280,  280,   32,   32,   35,   63,   32,   66,   66,   32,
      299,  299,  281,   32,   32,   32,   36,  172,   36,   36,
       36,  172,   32,  178,  282,   32,   32,   32,   32,  177,
      444,  177,   32,   32,  177,  177,   32,  304,  304,   32,
      309,  309,   32,   32,   32,   33,  170,   33,   33,   33,
      170,   36,  172,   38,   52,   38,   38,   38,  180,  180,
      444,   39,  170,  170,   36,   39,   33,  390,  390,   39,

       33,   65,   65,   65,   33,   39,   65,  415,  415,   38,
       33,   36,  172,  305,  305,   51,  284,   38,   65,   65,
      284,   39,   38,   33,  180,   39,   33,  479,  479,   39,
       33,   38,  284,  284,   33,   39,  480,   50,  480,   38,
       33,   34,   40,   34,   34,   34,   40,   38,  393,  305,
       40,   38,  393,   41,  446,   23,   40,   41,  307,  307,
       84,   41,   34,   84,  393,  393,   40,   41,  414,  414,
       84,   21,   40,   34,   19,   34,   40,  422,  422,   34,
       40,  497,  497,   41,  446,   34,   40,   41,   18,   34,
       84,   41,   34,   84,  307,   40,   10,   41,  181,   84,

      181,  181,  510,   34,  414,   34,    7,   43,   34,   43,
       43,   43,    6,  422,   34,   42,    5,   42,   42,   42,
      512,   44,  483,   44,   44,   44,  483,    0,   43,  538,
      538,   49,  510,   49,   49,   49,  181,   42,  483,  483,
       46,   42,   46,   46,   46,   43,   44,    0,   43,    0,
      512,   42,    0,   42,  190,   43,  190,  394,   43,  190,
      190,  394,  513,   42,  445,  514,   49,   42,   46,   44,
      394,   42,  394,    0,   43,   46,   44,   43,   46,   49,
      445,   42,   42,   45,   45,  539,  539,   45,   46,    0,
       45,   45,  513,    0,  445,  514,   49,   45,   46,  166,

      166,  166,   45,   45,  166,   46,    0,   46,   92,  445,
       92,   92,   92,   45,   45,  569,  569,   45,   75,   75,
       45,   45,   93,  166,   93,   93,   93,   45,   75,   75,
       75,   45,   45,   47,  540,   47,   47,   47,  166,  541,
        0,   94,   75,   94,   94,   94,   93,  553,   96,  554,
       96,   96,   96,  166,   75,  576,   92,  486,   75,   75,
       75,  486,   47,  556,  540,   47,    0,   47,  166,  541,
       93,   75,   47,  486,  486,   98,   93,  553,   98,  554,
       98,   47,  577,   96,  576,   98,  285,  285,  285,   94,
        0,  285,   47,  556,    0,   47,   96,   47,  570,  570,

      591,   47,   68,   68,   68,   98,    0,   68,   98,  578,
       98,    0,  577,   96,   98,  590,   68,  599,   68,   68,
       68,   68,  286,  286,  286,    0,   68,  286,   99,  591,
       99,   99,   99,  100,  604,  100,  100,  100,    0,  578,
       97,   68,   97,   97,   97,  590,  102,  599,  102,  102,
      102,  587,  587,  608,  608,  118,   68,  118,  118,  118,
      302,  100,  302,   99,  604,  302,  302,  102,  603,  603,
      603,   68,   85,   99,   85,   85,   99,    0,   97,  542,
       97,  100,   97,  542,   85,   85,   85,  118,   97,   85,
      620,  100,   85,   99,  102,  542,  542,  102,   85,   85,

      487,   85,   99,  118,  487,  611,  611,   97,  605,   97,
       85,   97,  605,    0,   85,   85,   85,  118,    0,   85,
      620,  101,   85,  101,  101,  101,  605,   85,   85,  103,
       85,  103,  103,  103,  104,  487,  104,  104,  104,  619,
      619,    0,  101,  101,  105,  621,  105,  105,  105,  107,
        0,  107,  107,  107,    0,  104,    0,  111,    0,  111,
      111,  111,    0,  103,    0,  487,  105,    0,  104,  101,
        0,  108,  101,  101,  108,  621,  108,  103,  105,  625,
      625,  108,  104,    0,  109,  104,  109,  109,  109,    0,
      111,    0,  105,  103,  107,    0,  105,  107,  104,    0,

        0,  108,    0,    0,  108,  111,  108,    0,  105,  106,
      108,  106,  106,  106,    0,  110,    0,  110,  110,  110,
      111,    0,    0,  107,  109,    0,  114,    0,  114,  114,
      114,  106,  109,    0,  391,  391,  391,  106,  110,  391,
        0,    0,  112,  106,  112,  112,  112,    0,  113,  106,
      113,  113,  113,  109,    0,    0,  115,  106,  115,  115,
      115,  106,    0,  110,  417,  114,  417,  106,  110,  417,
      417,  113,    0,  106,  114,    0,    0,    0,  106,    0,
      115,    0,  116,  112,  116,  116,  116,    0,    0,  117,
      112,  117,  117,  117,  114,  389,  113,  389,  389,  389,

        0,  113,    0,  116,  115,  119,    0,  119,  119,  119,
      115,  120,  112,  120,  120,  120,    0,  121,  117,  121,
      121,  121,  122,    0,  122,  122,  122,    0,    0,    0,
      116,    0,  123,  116,  392,  392,  392,  117,  123,  392,
        0,    0,  488,  119,  123,  120,  488,  543,  117,    0,
      123,  543,  125,  119,  125,  125,  125,  121,    0,  120,
        0,    0,  123,  543,  543,  121,    0,    0,  123,    0,
      122,    0,  119,    0,  123,  120,    0,  488,  124,  123,
      124,  124,  124,  125,    0,  126,  121,  126,  126,  126,
      127,    0,  127,  127,  127,    0,    0,    0,    0,  128,

      125,  128,  128,  128,    0,    0,  129,  488,  129,  129,
      129,    0,  124,  125,  132,    0,  132,  132,  132,  126,
      126,    0,    0,  128,    0,    0,  124,    0,  129,  129,
        0,    0,  130,  126,  130,  130,  130,  131,  127,  131,
      131,  131,  124,    0,  132,    0,    0,  128,    0,  126,
      126,    0,    0,  128,  129,  396,  396,  396,  129,  129,
      396,  133,  132,  133,  133,  133,    0,  134,  617,  134,
      134,  134,  617,    0,  132,  130,  130,  131,    0,  136,
      130,  136,  136,  136,    0,  131,  135,    0,  135,  135,
      135,  397,  397,  397,  137,    0,  397,  138,  137,  138,

      138,  138,  137,  617,  130,  130,  131,  134,  137,  133,
      140,  135,  140,  140,  140,  134,    0,  136,    0,  138,
      544,  544,  544,    0,  137,  544,    0,  136,  137,    0,
        0,  573,  137,  617,  135,  573,  134,    0,  137,    0,
      141,  135,  141,  141,  141,  138,  136,  573,  573,  138,
      139,    0,  139,  139,  139,  140,    0,  618,  140,  142,
        0,  618,  143,  142,  143,  143,  143,  142,    0,    0,
        0,  139,  141,  142,  139,    0,  147,  144,  147,  147,
      147,  144,    0,  139,  140,  144,    0,    0,  141,  142,
      139,  144,  618,  142,  144,    0,  143,  142,  139,    0,

        0,  139,  141,  142,  139,    0,    0,  144,    0,    0,
      143,  144,    0,  139,  145,  144,  145,  145,  145,  139,
        0,  144,  618,  144,  147,  146,  143,  146,  146,  146,
      148,    0,  148,  148,  148,  149,  145,  149,  149,  149,
      150,    0,  150,  150,  150,  151,    0,  151,  151,  151,
      146,    0,    0,  152,    0,  152,  152,  152,  167,  167,
      167,  153,  145,  153,  153,  153,  145,    0,    0,  149,
      606,  148,    0,  146,  606,  150,    0,    0,  148,    0,
      146,  152,  167,  149,    0,  151,  606,  606,  150,    0,
      153,    0,  154,  151,  154,  154,  154,  167,    0,  149,

      148,  152,    0,    0,  155,  150,  155,  155,  155,  153,
        0,  152,  167,    0,  151,  164,  164,  164,    0,    0,
      153,  545,  545,  545,    0,    0,  545,  167,    0,  164,
      154,  164,  164,  164,  164,    0,    0,    0,    0,  164,
      154,  169,  169,  169,    0,    0,  169,    0,  571,  571,
      571,    0,  155,  571,  164,  169,    0,  169,  173,  154,
      169,  173,    0,  194,    0,  169,  194,  174,  173,  164,
      173,    0,  198,  194,  198,  198,  198,    0,    0,  173,
      169,    0,  174,    0,  164,  174,    0,    0,  173,    0,
        0,  173,  174,  194,  174,  169,  194,  173,    0,  173,

        0,    0,  194,  174,  198,    0,  175,  175,    0,    0,
      169,    0,  174,    0,    0,  174,  175,  175,  175,    0,
      198,  174,    0,  174,    0,  179,  179,    0,  183,  183,
      175,    0,    0,    0,  198,  179,  179,  179,  183,    0,
      183,  197,  175,  197,  197,  197,  175,  175,  175,  179,
        0,  199,  183,  199,  199,  199,    0,    0,    0,  175,
        0,  179,  197,    0,  183,  179,  179,  179,  183,  200,
      183,  200,  200,  200,    0,    0,  199,    0,  179,    0,
      201,  183,  201,  201,  201,  572,  572,  572,    0,  197,
      572,    0,  197,  202,  200,  202,  202,  202,    0,  199,

      204,  201,  204,  204,  204,  203,  199,  203,  203,  203,
      205,    0,  205,  205,  205,    0,  206,  200,  206,  206,
      206,  589,  589,  589,  200,  202,  589,    0,  201,    0,
      203,  201,    0,    0,    0,  204,  207,  206,  207,  207,
      207,  202,  208,    0,  208,  208,  208,    0,  204,    0,
      205,    0,    0,  203,    0,  202,    0,    0,  205,  209,
      203,  209,  209,  209,  206,  204,  210,  206,  210,  210,
      210,    0,    0,    0,  208,    0,  207,    0,  602,  205,
        0,    0,  602,  211,  207,  211,  211,  211,    0,  212,
      208,  212,  212,  212,  602,  602,  602,  209,    0,  213,

        0,  213,  213,  213,  208,  207,  210,  209,    0,  214,
        0,  214,  214,  214,  210,  215,  212,  215,  215,  215,
        0,  216,  211,  216,  216,  216,  209,    0,  610,  213,
        0,  211,  610,    0,    0,  210,    0,  212,    0,  217,
        0,  217,  217,  217,  610,  610,  212,  213,  214,  214,
      218,  211,  218,  218,  218,    0,  216,  214,  616,  213,
      215,    0,  616,  215,    0,    0,  217,    0,  219,  216,
      219,  219,  219,    0,  616,  616,    0,  214,  214,  220,
        0,  220,  220,  220,    0,    0,  216,  217,  218,  215,
      221,    0,  221,  221,  221,    0,  217,  222,  218,  222,

      222,  222,    0,  223,  219,  223,  223,  223,  224,    0,
      224,  224,  224,  220,    0,    0,  219,  218,  225,  622,
      225,  225,  225,  622,  221,  222,    0,  220,  223,  227,
        0,  227,  227,  227,  219,  622,  622,  224,  221,  596,
      596,  596,    0,  220,  596,  222,  226,    0,  226,  226,
      226,  223,    0,    0,  221,  222,  224,  227,  223,  228,
        0,  228,  228,  228,    0,    0,  225,  224,  226,  229,
      229,    0,  229,  229,  229,    0,  230,  227,  230,  230,
      230,    0,    0,    0,  228,    0,  231,  227,  231,  231,
      231,    0,    0,  232,  226,  232,  232,  232,  226,  233,

        0,  233,  233,  233,    0,    0,  234,  228,  234,  234,
      234,  623,  623,  623,  228,  230,  623,  235,  229,  235,
      235,  235,    0,    0,  230,    0,  231,    0,    0,  234,
        0,    0,  232,  236,  231,  236,  236,  236,  624,  624,
      624,  232,    0,  624,  230,    0,  237,  233,  237,  237,
      237,    0,  235,    0,  234,  231,    0,    0,  236,  234,
      238,  232,  238,  238,  238,  235,  239,    0,  239,  239,
      239,  237,  240,    0,  240,  240,  240,    0,    0,    0,
        0,  236,  235,  241,    0,  241,  241,  241,  236,    0,
        0,  239,    0,    0,  237,  238,    0,    0,    0,  240,

      242,  237,  242,  242,  242,    0,    0,  243,  238,  243,
      243,  243,    0,  244,  239,  244,  244,  244,    0,  241,
      240,  239,  626,  626,  626,  238,    0,  626,  243,  240,
      245,  241,  245,  245,  245,    0,  246,    0,  246,  246,
      246,  291,    0,    0,  291,  244,    0,    0,  242,  241,
      249,  291,  249,  249,  249,  243,    0,    0,  243,    0,
      247,  244,  247,  247,  247,  248,    0,  248,  248,  248,
        0,  291,    0,    0,  291,  244,  246,    0,  245,  249,
      291,    0,    0,  250,  246,  250,  250,  250,  247,  251,
      248,  251,  251,  251,    0,  627,  627,  627,  249,  252,

      627,  252,  252,  252,    0,  246,    0,    0,  247,  249,
      251,    0,    0,  248,    0,  250,    0,    0,  247,  253,
      248,  253,  253,  253,  254,    0,  254,  254,  254,    0,
      255,  250,  255,  255,  255,    0,    0,  251,    0,    0,
      251,  252,    0,    0,    0,  250,  256,  252,  256,  256,
      256,    0,    0,    0,  255,    0,  254,    0,  257,  253,
      257,  257,  257,    0,    0,    0,    0,  253,    0,    0,
      252,    0,  254,    0,    0,  256,    0,  258,  255,  258,
      258,  258,    0,    0,  255,    0,  254,  259,  253,  259,
      259,  259,    0,    0,  256,  260,    0,  260,  260,  260,

      261,    0,  261,  261,  261,  256,  257,  262,    0,  262,
      262,  262,  263,    0,  263,  263,  263,    0,  258,    0,
      260,    0,    0,    0,    0,  258,    0,  259,  264,    0,
      264,  264,  264,    0,    0,  259,  283,    0,  261,  263,
      283,    0,    0,  260,    0,  262,    0,  258,  261,  283,
      260,  283,  283,  283,    0,  262,  259,    0,    0,  265,
      263,  265,  265,  265,    0,    0,    0,  261,  264,  263,
        0,    0,    0,    0,  262,  266,  264,  266,  266,  266,
      267,    0,  267,  267,  267,  268,    0,  268,  268,  268,
      269,    0,  269,  269,  269,  265,  271,  264,  271,  271,

      271,  270,    0,  270,  270,  270,    0,  265,    0,  267,
        0,  266,  272,    0,  272,  272,  272,  597,  597,  597,
        0,  267,  597,  266,  269,  265,  270,  274,  267,  274,
      274,  274,    0,  268,  597,  597,  271,    0,  269,  267,
        0,  266,    0,    0,  271,    0,  272,    0,    0,  270,
      267,    0,    0,    0,  269,  273,  270,  273,  273,  273,
      272,    0,  274,    0,  275,  271,  275,  275,  275,  276,
        0,  276,  276,  276,    0,  274,  272,  287,    0,    0,
      287,  279,  279,  279,  273,    0,    0,  287,    0,  287,
        0,    0,  274,    0,    0,  279,  275,  279,  287,  292,

      279,    0,  292,  273,    0,  279,  293,  287,    0,  292,
      287,  292,  275,    0,  273,    0,  287,  276,  287,    0,
      279,  293,    0,    0,  293,    0,  275,    0,    0,  292,
      298,  293,  292,  293,  297,  279,    0,  297,  292,    0,
      292,    0,  293,    0,  297,  298,    0,    0,  298,    0,
      279,  293,    0,    0,  293,  298,    0,  298,  300,  300,
      293,    0,  293,    0,  297,    0,  298,  297,  300,    0,
      300,  405,    0,  297,  405,  298,    0,    0,  298,  301,
      301,  405,  300,    0,  298,    0,  298,    0,    0,  301,
      301,  301,    0,    0,  300,    0,    0,    0,  300,    0,

      300,  405,    0,  301,  405,    0,  303,  303,    0,    0,
      405,  300,    0,  306,  306,  301,  303,  303,  303,  301,
      301,  301,    0,  306,    0,  306,    0,    0,  308,  308,
      303,  314,  301,  314,  314,  314,    0,  306,  308,  308,
      308,  316,  303,  316,  316,  316,  303,  303,  303,  306,
      310,  310,  308,  306,  317,  306,  317,  317,  317,  303,
      310,    0,  310,  314,  308,    0,  306,  316,  308,  308,
      308,    0,    0,  315,  310,  315,  315,  315,    0,  314,
        0,  308,  598,  598,  598,    0,  310,  598,    0,  316,
      310,    0,  310,  314,    0,    0,    0,  316,  315,  598,

      598,    0,  317,  310,  318,    0,  318,  318,  318,  319,
        0,  319,  319,  319,  320,    0,  320,  320,  320,    0,
        0,  315,  321,    0,  321,  321,  321,    0,  315,    0,
      322,    0,  322,  322,  322,  323,  318,  323,  323,  323,
      324,    0,  324,  324,  324,  325,    0,  325,  325,  325,
        0,    0,  318,    0,  321,  322,  326,  319,  326,  326,
      326,    0,  320,    0,    0,  324,  318,    0,    0,    0,
      321,    0,  327,  323,  327,  327,  327,  328,  322,  328,
      328,  328,    0,  323,  321,  322,    0,  329,  324,  329,
      329,  329,    0,  325,  330,  324,  330,  330,  330,    0,

        0,    0,  323,  331,  326,  331,  331,  331,  332,    0,
      332,  332,  332,    0,    0,  333,  328,  333,  333,  333,
      327,    0,    0,    0,    0,  328,  334,    0,  334,  334,
      334,    0,    0,    0,    0,  329,    0,  332,    0,    0,
        0,    0,  330,  331,  335,  328,  335,  335,  335,    0,
      336,  331,  336,  336,  336,  333,  332,  337,    0,  337,
      337,  337,    0,  333,  334,    0,  338,  332,  338,  338,
      338,    0,  331,  339,  334,  339,  339,  339,    0,    0,
        0,    0,  337,  340,  333,  340,  340,  340,    0,    0,
        0,    0,  335,  334,    0,    0,    0,    0,  336,  341,

      339,  341,  341,  341,    0,  337,  338,  342,    0,  342,
      342,  342,  337,  343,  338,  343,  343,  343,  340,  346,
      344,  339,  344,  344,  344,  345,    0,  345,  345,  345,
      339,  340,    0,    0,  348,  338,  348,  348,  348,  347,
      342,  347,  347,  347,    0,  343,  346,  341,  340,  346,
      412,    0,    0,  412,  345,  342,    0,    0,    0,  346,
      412,  343,    0,  346,  347,    0,    0,    0,  344,    0,
      342,    0,    0,  345,    0,  343,  346,    0,    0,  346,
      412,    0,  348,  412,  345,    0,    0,  347,  346,  412,
        0,    0,  346,  349,  347,  349,  349,  349,  350,    0,

      350,  350,  350,  351,    0,  351,  351,  351,    0,  352,
        0,  352,  352,  352,    0,    0,    0,  353,  349,  353,
      353,  353,  354,    0,  354,  354,  354,  355,    0,  355,
      355,  355,  356,    0,  356,  356,  356,    0,  350,    0,
        0,  349,    0,    0,  353,    0,  350,  352,  349,    0,
      357,  351,  357,  357,  357,    0,  358,  352,  358,  358,
      358,    0,  354,    0,    0,  353,    0,  350,    0,  359,
      354,  359,  359,  359,  353,  355,  352,    0,    0,  360,
      356,  360,  360,  360,  361,    0,  361,  361,  361,    0,
      359,  354,    0,    0,    0,  358,    0,    0,  357,  362,

        0,  362,  362,  362,  358,  363,    0,  363,  363,  363,
        0,    0,  364,  361,  364,  364,  364,  359,    0,    0,
      359,    0,  362,    0,  358,    0,  365,  360,  365,  365,
      365,    0,  361,  366,    0,  366,  366,  366,    0,    0,
      363,    0,  367,  361,  367,  367,  367,  362,    0,    0,
        0,  364,  362,  363,  366,    0,    0,    0,    0,  365,
      364,    0,  368,    0,  368,  368,  368,  367,    0,  369,
      363,  369,  369,  369,  365,  370,    0,  370,  370,  370,
      364,  366,    0,  373,  366,  373,  373,  373,    0,  365,
      367,  368,  371,    0,  371,  371,  371,  367,    0,  372,

        0,  372,  372,  372,  369,    0,  373,    0,  370,    0,
      368,    0,  374,    0,  374,  374,  374,  369,    0,    0,
        0,  368,    0,  370,  372,  375,    0,  375,  375,  375,
      371,  373,    0,    0,  369,    0,  373,  374,  370,  376,
      371,  376,  376,  376,    0,    0,    0,  372,  377,    0,
      377,  377,  377,    0,  372,    0,    0,    0,    0,  371,
      374,    0,    0,    0,    0,  375,  378,  374,  378,  378,
      378,  376,  379,  375,  379,  379,  379,  377,  380,    0,
      380,  380,  380,    0,    0,    0,  381,  376,  381,  381,
      381,    0,    0,    0,  375,  382,  377,  382,  382,  382,

      383,  376,  383,  383,  383,    0,    0,  377,    0,  381,
        0,    0,  380,  384,  378,  384,  384,  384,    0,  385,
      379,  385,  385,  385,    0,  386,  380,  386,  386,  386,
        0,    0,    0,  387,  381,  387,  387,  387,  384,  381,
        0,    0,  380,  382,    0,    0,  385,  388,  383,  388,
      388,  388,    0,    0,  413,  413,    0,  386,  395,  395,
      395,  384,    0,  395,  413,    0,  413,  385,  384,    0,
        0,  387,  388,  386,    0,    0,  385,  395,  413,  416,
      416,  387,  395,    0,    0,    0,    0,  386,    0,  416,
      413,  416,    0,    0,  413,  388,  413,  395,  418,  418,

      387,    0,  388,  416,    0,    0,    0,  413,  418,  418,
      418,    0,  395,  419,  419,  416,    0,    0,    0,  416,
        0,  416,  418,  419,  419,  419,  423,  395,  423,  423,
      423,    0,  416,    0,  418,  420,  420,  419,  418,  418,
      418,    0,    0,    0,    0,  420,  420,  420,    0,  419,
        0,  418,    0,  419,  419,  419,    0,  421,  421,  420,
      425,    0,  425,  425,  425,  423,  419,  421,    0,  421,
        0,  420,    0,    0,  423,  420,  420,  420,    0,    0,
      424,  421,  424,  424,  424,    0,    0,  426,  420,  426,
      426,  426,    0,  421,  423,    0,    0,  421,    0,  421,

      427,  424,  427,  427,  427,    0,    0,    0,  425,  428,
      421,  428,  428,  428,  429,    0,  429,  429,  429,  430,
        0,  430,  430,  430,    0,    0,    0,    0,  424,    0,
      431,  424,  431,  431,  431,  426,  432,    0,  432,  432,
      432,  433,    0,  433,  433,  433,    0,  434,  427,  434,
      434,  434,  435,    0,  435,  435,  435,  428,    0,    0,
        0,  436,  429,  436,  436,  436,  437,  430,  437,  437,
      437,    0,  434,    0,    0,  433,    0,  438,  431,  438,
      438,  438,    0,  440,  432,  440,  440,  440,    0,  433,
        0,    0,  435,    0,  439,  434,  439,  439,  439,    0,

      435,    0,  434,    0,  440,  433,    0,    0,  441,  436,
      441,  441,  441,    0,  437,    0,    0,    0,    0,    0,
      442,  435,  442,  442,  442,  438,  447,    0,  447,  447,
      447,  440,  439,  441,  440,  448,    0,  448,  448,  448,
        0,  449,  439,  449,  449,  449,  442,    0,  450,    0,
      450,  450,  450,    0,    0,  451,  441,  451,  451,  451,
        0,  439,    0,  441,    0,    0,    0,    0,  442,  452,
      449,  452,  452,  452,  447,    0,  442,  450,    0,    0,
      451,    0,    0,  448,  453,    0,  453,  453,  453,  449,
      454,    0,  454,  454,  454,  456,  450,  456,  456,  456,

      449,    0,  455,  451,  455,  455,  455,  450,    0,  453,
      451,  457,    0,  457,  457,  457,    0,  452,    0,  458,
        0,  458,  458,  458,    0,    0,    0,    0,    0,  454,
        0,    0,  453,    0,    0,  456,  455,    0,  454,  453,
        0,    0,    0,  456,  458,  457,    0,    0,    0,  459,
      455,  459,  459,  459,    0,    0,    0,    0,  454,  457,
        0,    0,    0,    0,  456,    0,  455,  458,    0,  460,
      459,  460,  460,  460,  458,  457,  461,    0,  461,  461,
      461,    0,  462,    0,  462,  462,  462,    0,  463,    0,
      463,  463,  463,    0,    0,    0,    0,  459,    0,  461,

      459,    0,    0,    0,    0,  462,    0,    0,  464,  460,
      464,  464,  464,    0,    0,    0,  465,  460,  465,  465,
      465,    0,  463,  466,  461,  466,  466,  466,    0,  461,
      462,    0,    0,    0,    0,  462,  463,  467,  460,  467,
      467,  467,  468,    0,  468,  468,  468,    0,    0,    0,
      465,  469,  463,  469,  469,  469,  464,  470,    0,  470,
      470,  470,    0,    0,  465,  471,  468,  471,  471,  471,
        0,  466,  475,    0,  475,  475,  475,  467,    0,    0,
      465,    0,  470,    0,    0,  467,    0,    0,  471,  472,
      468,  472,  472,  472,    0,    0,  468,    0,    0,  469,

      473,    0,  473,  473,  473,  470,  467,  474,    0,  474,
      474,  474,  470,  471,    0,    0,  472,    0,  471,  476,
      475,  476,  476,  476,    0,  477,    0,  477,  477,  477,
        0,    0,    0,    0,  474,    0,    0,  472,    0,  478,
      473,  478,  478,  478,    0,    0,  472,    0,  473,    0,
        0,  481,  481,  481,    0,  474,  481,  484,  484,  484,
        0,    0,  484,    0,  474,  477,    0,  476,    0,  473,
      481,    0,    0,  477,    0,  481,    0,  485,  485,  485,
        0,  484,  485,  495,  495,    0,    0,  478,  496,  496,
      481,    0,    0,  495,  477,  495,  484,    0,  496,    0,

      496,  485,    0,  498,  498,  481,  502,  495,  502,  502,
      502,  484,  496,  498,    0,  498,  485,    0,    0,  495,
      481,    0,    0,  495,  496,  495,  484,  498,  496,    0,
      496,  485,    0,    0,    0,    0,  495,  499,  499,  498,
      502,  496,    0,  498,    0,  498,  485,  499,  499,  499,
        0,    0,  500,  500,  502,  503,  498,  503,  503,  503,
        0,  499,  500,  500,  500,  501,    0,  501,  501,  501,
      502,    0,    0,  499,    0,    0,  500,  499,  499,  499,
      504,    0,  504,  504,  504,    0,    0,    0,  500,    0,
      499,    0,  500,  500,  500,  505,  503,  505,  505,  505,

      501,    0,    0,  503,  506,  500,  506,  506,  506,    0,
        0,    0,    0,  501,  507,    0,  507,  507,  507,  508,
        0,  508,  508,  508,    0,  503,    0,    0,  504,  509,
      501,  509,  509,  509,  515,    0,  515,  515,  515,    0,
        0,    0,    0,  505,  506,  516,  507,  516,  516,  516,
        0,    0,  506,  517,    0,  517,  517,  517,    0,    0,
        0,  518,  507,  518,  518,  518,    0,  508,  519,  515,
      519,  519,  519,  506,    0,    0,  507,  509,    0,    0,
        0,    0,  515,    0,  520,  516,  520,  520,  520,    0,
        0,  517,  521,  516,  521,  521,  521,    0,    0,  515,

      522,  517,  522,  522,  522,    0,    0,  519,    0,  518,
        0,  520,    0,    0,  516,  523,  519,  523,  523,  523,
      517,  522,  524,    0,  524,  524,  524,  525,    0,  525,
      525,  525,  520,    0,    0,    0,  519,    0,    0,    0,
      521,  520,    0,  526,    0,  526,  526,  526,  522,    0,
        0,  522,  525,  527,    0,  527,  527,  527,    0,    0,
      524,    0,  528,  523,  528,  528,  528,    0,    0,  529,
      524,  529,  529,  529,  530,  525,  530,  530,  530,    0,
        0,    0,  525,  526,  531,    0,  531,  531,  531,  524,
        0,  526,    0,  532,  528,  532,  532,  532,    0,    0,

      533,  527,  533,  533,  533,  534,    0,  534,  534,  534,
      528,  535,  526,  535,  535,  535,  537,  529,  537,  537,
      537,    0,  530,    0,  528,  536,    0,  536,  536,  536,
      546,  546,  531,    0,  548,    0,  548,  548,  548,    0,
      546,  532,  546,    0,    0,    0,    0,    0,  533,    0,
      536,    0,  535,  534,  546,  547,  547,    0,  549,  535,
      549,  549,  549,    0,  537,  547,  546,  547,    0,    0,
      546,    0,  546,  536,  550,    0,  550,  550,  550,  547,
      536,  535,  548,  546,  551,    0,  551,  551,  551,    0,
      552,  547,  552,  552,  552,  547,    0,  547,    0,  550,

      557,    0,  557,  557,  557,    0,  549,  558,  547,  558,
      558,  558,  559,    0,  559,  559,  559,  560,    0,  560,
      560,  560,  550,  561,    0,  561,  561,  561,    0,  550,
        0,    0,  551,    0,  557,    0,    0,  562,  552,  562,
      562,  562,    0,    0,    0,    0,  558,    0,  557,  563,
        0,  563,  563,  563,  564,  558,  564,  564,  564,  565,
      559,  565,  565,  565,  557,  560,    0,    0,    0,  562,
      566,  561,  566,  566,  566,  558,    0,    0,    0,  567,
        0,  567,  567,  567,  565,  562,  568,  563,  568,  568,
      568,  575,    0,  575,  575,  575,    0,  563,    0,  562,

        0,    0,  564,    0,  574,  574,  574,  565,  579,  574,
      579,  579,  579,    0,  565,  566,  563,  567,  566,  580,
        0,  580,  580,  580,  568,    0,    0,  567,  574,  581,
        0,  581,  581,  581,  568,    0,    0,    0,  582,  575,
      582,  582,  582,  574,  566,  583,  567,  583,  583,  583,
        0,    0,    0,  568,    0,    0,  579,    0,  574,  582,
      584,    0,  584,  584,  584,    0,    0,  580,    0,  583,
        0,    0,  585,  574,  585,  585,  585,  581,  586,    0,
      586,  586,  586,  588,  588,  588,  582,    0,  588,  582,
        0,    0,  594,  583,  594,  594,  594,  585,  593,  583,

      593,  593,  593,    0,    0,    0,    0,  588,  584,  595,
        0,  595,  595,  595,  601,    0,  601,  601,  601,    0,
      585,    0,  588,    0,    0,    0,  586,  585,    0,  612,
      612,  612,    0,    0,  612,    0,    0,  588,    0,    0,
      594,    0,    0,  593,    0,    0,  593,    0,  612,    0,
        0,    0,  588,  612,  613,  613,  613,  595,    0,  613,
        0,    0,  601,    0,  614,  614,  614,    0,  612,  614,
        0,    0,  593,  613,    0,  615,  615,  615,  613,    0,
      615,    0,    0,  612,    0,  628,  628,  628,  614,    0,
      628,    0,    0,  613,    0,  629,  629,  629,  612,  615,

      629,    0,    0,  614,    0,    0,    0,    0,  613,  628,
        0,    0,    0,    0,  615,    0,    0,    0,  614,  629,
        0,    0,    0,  613,  628,    0,    0,    0,    0,  615,
        0,    0,    0,  614,  629,    0,    0,    0,    0,  628,
        0,    0,    0,    0,  615,    0,    0,    0,    0,  629,
        0,    0,    0,    0,  628,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  629,  631,  631,  631,  631,  631,
      631,  631,  631,  632,  632,  632,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  633,  633,  633,  634,
        0,  634,  634,  634,  634,  635,  635,  635,  636,    0,

      636,    0,  636,  636,  636,  636,  637,    0,  637,  637,
      637,  637,  637,  637,  638,    0,  638,  638,  638,  638,
      638,  638,  639,  639,  640,  640,    0,  640,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[158] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define YY_NO_UNISTD_H 1
#line 8 "lexer.l"
    #include <string>
    #include <iostream>
    #include <regex>
    #include "../compiler/utils.hpp"
    #include "../parser/grammar.tab.h"
    #define YY_DECL int yylex()


    bool endsWith(const std::string & str, const std::string & suffix);
    void removeUnderline(std::string * str);
    void removeUnderline(char * str);

    void printDateTimeLiteral(DateTime& datetime);
#line 1738 "lexer.flex.cpp"

#line 1740 "lexer.flex.cpp"

#define INITIAL 0
#define STRING 1
#define COMMENT 2

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 39 "lexer.l"



#line 43 "lexer.l"
    std::string strLiteral;
    std::string comment;
    char charValue;
    long long intValue;
    double doubleValue;
    DateTime * datetime;

    int tempIntLiteral;
    int dateOrTimePositionIndex;
    bool boolLiteral;



#line 1974 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 631 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 630 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 56 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return AND_ALSO; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 57 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return BYTE_KW; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 58 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CDATE_KW; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CINTEGER_KW; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CONST_KW; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CSINGLE_KW; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CULONG_KW; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return ELSE_KW; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return EXIT_KW; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return IN_KW; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return IS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 67 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return LIKE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 68 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return MOD; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return MYBASE_KW; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return NEW_KW; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return OR;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return READONLY_KW; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 73 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return SINGLE_KW; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 74 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return STRING_KW; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 75 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return THEN_KW; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 76 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return ULONG_KW; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 77 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return AS_KW; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 78 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return BYVAL_KW; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 79 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CBOOL_KW; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 80 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CDOUBLE_KW; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 81 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CLASS_KW; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 82 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CONTINUE_KW; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 83 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CSTRING_KW; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 84 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CUSHORT_KW; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 85 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return DO_KW; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 86 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return ELSEIF_KW; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 87 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return ERASE_KW; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 88 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return FUNCTION_KW; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 89 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return IF_KW; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 90 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return INHERITS_KW;  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return ISNOT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 92 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return LONG_KW; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 93 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return MYCLASS_KW;  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 94 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return NEXT_KW; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 95 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return OR_ELSE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return PARAMARRAY_KW; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return PROTECTED_KW; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 98 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return REDIM_KW; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 99 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return RETURN_KW; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return STATIC_KW; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return STRUCT_KW; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return USHORT_KW;  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return BOOLEAN_KW; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 104 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CALL_KW; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CBYTE_KW; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CLONG_KW; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 107 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CSBYTE_KW;  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 108 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CTYPE_KW; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return DATE_KW; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return DOUBLE_KW; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return END_KW; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return END_FUNCTION; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return END_SELECT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return END_IF; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return END_SUB; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 116 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return END_WHILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return INTEGER_KW; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return LOOP_KW; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return NOT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return OBJECT_KW; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return PUBLIC_KW; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return SBYTE_KW; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 123 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return SHARED_KW; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 124 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return STEP_KW; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return SUB_KW; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return TO_KW; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return WHILE_KW; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 128 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return AND; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 129 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return BYREF_KW; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CASE_KW; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 131 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CCHAR_KW; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 132 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CHAR_KW; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 133 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return COBJECT_KW; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 134 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CSHORT_KW; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 135 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return CUINTEGER_KW; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 136 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return DECIMAL_KW; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 137 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return DIM_KW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 138 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return EACH_KW; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 139 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return FOR_KW; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return GOTO_KW; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return ME_KW; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return OF_KW; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return OPTIONAL_KW; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return PRIVATE_KW; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return SELECT_KW; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return SHORT_KW; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return STOP_KW; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return UINTEGER_KW; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 149 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return XOR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 "lexer.l"
{ debug_print("Found keyword : %s\n", yytext); return UNTIL_KW; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 152 "lexer.l"
{ debug_print("Found nothing literal\n"); return NOTHING; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 153 "lexer.l"
{ debug_print("Found boolean literal : %s\n", yytext); yylval.Bool = true; return BOOL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 154 "lexer.l"
{ debug_print("Found boolean literal : %s\n", yytext); yylval.Bool = false; return BOOL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "lexer.l"
{debug_print("Found a XOR operator: %s\n", yytext); return '^'; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "lexer.l"
{debug_print("Found a MUL operator: %s\n", yytext); return '*'; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "lexer.l"
{debug_print("Found a FLOOR_DIV operator: %s\n", yytext); return '\\'; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "lexer.l"
{debug_print("Found a DIV operator: %s\n", yytext); return '/'; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "lexer.l"
{debug_print("Found a PLUS operator: %s\n", yytext); return '+'; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "lexer.l"
{debug_print("Found a MINUS operator: %s\n", yytext); return '-'; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "lexer.l"
{ debug_print("Found an ASSIGNMENT operator: %s\n", yytext); return '='; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "lexer.l"
{debug_print("Found a XOR_ASSIGNMENT operator: %s\n", yytext); return EXP_ASSIGN; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "lexer.l"
{debug_print("Found a MUL_ASSIGNMENT operator: %s\n", yytext); return MUL_ASSIGN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "lexer.l"
{debug_print("Found a ADD_ASSIGNMENT operator: %s\n", yytext); return ADD_ASSIGN; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "lexer.l"
{debug_print("Found a SUB_ASSIGNMENT operator: %s\n", yytext); return SUB_ASSIGN; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "lexer.l"
{debug_print("Found a LESS_EQUAL to operator: %s\n", yytext); return LEQ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "lexer.l"
{debug_print("Found a LESS operator: %s\n", yytext); return '<'; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "lexer.l"
{debug_print("Found a GREATER operator: %s\n", yytext); return '>'; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "lexer.l"
{debug_print("Found a GREATER_EQUAL to operator: %s\n", yytext); return GEQ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "lexer.l"
{debug_print("Found a NOT_EQUAL to operator: %s\n", yytext); return NEQ; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "lexer.l"
{debug_print("Found a STR_CONCAT operator: %s\n", yytext); return '&'; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "lexer.l"
{debug_print("Found a STR_CONCAT_ASSIGNMENT operator: %s\n", yytext); return STRCAT_ASSIGN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "lexer.l"
{debug_print("Found a RSHIFT operator: %s\n", yytext); return RSHIFT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "lexer.l"
{debug_print("Found a LSHIFT operator: %s\n", yytext); return LSHIFT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "lexer.l"
{debug_print("Found a LSHIFT_ASSIGNMENT operator: %s\n", yytext); return LSHIFT_ASSIGN; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "lexer.l"
{debug_print("Found a RSHIFT_ASSIGNMENT operator: %s\n", yytext); return RSHIFT_ASSIGN; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "lexer.l"
{ debug_print("Found an FLOOR_DIV_ASSIGNMENT operator: %s\n", yytext); return FLOORDIV_ASSIGN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "lexer.l"
{debug_print("Found a DIV_ASSIGNMENT operator: %s\n", yytext); return DIV_ASSIGN; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 181 "lexer.l"
{BEGIN(COMMENT); comment.clear(); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "lexer.l"
{comment += yytext;}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 183 "lexer.l"
{debug_print("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 184 "lexer.l"
{debug_print("Found a comment: %s\n", comment.c_str()); BEGIN(INITIAL);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "lexer.l"
{BEGIN(STRING); strLiteral.clear();}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "lexer.l"
{strLiteral += yytext;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "lexer.l"
{strLiteral += "\"";}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 189 "lexer.l"
{debug_print("Error: String literal wasn't closed\n"); yyterminate();}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 190 "lexer.l"
{
    debug_print("Error: String literal wasn't closed at line %d\n", yylineno - 1); 
    if (!DEBUG) {
        yyterminate();
    }
    else {
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 199 "lexer.l"
{
    if (strLiteral.length() == 1) {
        charValue = strLiteral.at(0);
        debug_print("Found a char literal: %s\n", strLiteral.c_str());
        BEGIN(INITIAL);
        yylval.Char = charValue;
        return CHAR;
    } else {
        debug_print("Error: character literal can have only one character, not string, line: %d\n", yylineno);
        if (!DEBUG) yyterminate();
    }
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 211 "lexer.l"
{debug_print("Found a string literal: %s\n", strLiteral.c_str()); yylval.Str = new std::string(strLiteral); BEGIN(INITIAL); return STRING; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 214 "lexer.l"
{
    debug_print("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 219 "lexer.l"
{
    debug_print("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 224 "lexer.l"
{
    debug_print("Error: invalid underscore character in number literal\n");
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 230 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = atoi(intLiteral); debug_print("Found a integer value: %d\n", intValue);
    yylval.Int = intValue;
    return INT;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 248 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 16);
    debug_print("Found a hex integer value: %d\n", intValue);
    yylval.Int = intValue;
    return INT;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 267 "lexer.l"
{
    char intLiteral[10000];
    std::string lexeme(yytext);

    if (endsWith(lexeme, "US") || endsWith(lexeme, "UI") || endsWith(lexeme, "UL")) {
        strncpy_s(intLiteral, yytext, strlen(yytext) - 2);
    } else if (endsWith(lexeme, "S") || endsWith(lexeme, "I") || endsWith(lexeme, "L")) {
        strncpy_s(intLiteral, yytext, strlen(yytext - 1));
    } else {
        strcpy_s(intLiteral, yytext);
    }

    removeUnderline(intLiteral);
    intValue = strtol(intLiteral + 2, NULL, 8);
    debug_print("Found a oct integer value: %d\n", intValue);
    yylval.Int = intValue;
    return INT;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 286 "lexer.l"
{
    std::string lexeme(yytext);
    removeUnderline(&lexeme);
    doubleValue = atof(lexeme.c_str());
    debug_print("Found floating point literal: %f\n", doubleValue);
    yylval.Float = doubleValue;
    return FLOAT;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 295 "lexer.l"
{
    char floatLiteral[10000];
    strncpy_s(floatLiteral, yytext, strlen(yytext) - 1);
    removeUnderline(floatLiteral);
    doubleValue = atof(floatLiteral);
    debug_print("Found floating point literal: %f\n", doubleValue);
    yylval.Float = doubleValue;
    return FLOAT;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 305 "lexer.l"
{
    debug_print("Invalid float literal: %s at line %d\n", yytext, yylineno);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 310 "lexer.l"
{
    std::regex date_regex(R"((\d{1,2})[\-\/](\d{1,2})[\-\/](\d{4}))");
    std::regex time_regex(R"((\d{1,2}):(\d{2})(:(\d{2}))?(\s*(AM|PM))?)");
    std::regex hour_regex(R"((\d{1,2})\s*(AM|PM))");

    std::smatch match;
    std::string text(yytext);

    Date * date = nullptr;
    Time * time = nullptr;

    if (std::regex_search(text, match, date_regex)) {
        date = new Date();
        date->day = std::stoi(match[2].str());
        date->month = std::stoi(match[1].str());
        date->year = std::stoi(match[3].str());
    }

    if (std::regex_search(text, match, hour_regex)) {
        time = new Time();
        time->hour = std::stoi(match[1].str());

        if (match[2].str() == "AM") {
            time->format = AM;
        }
        else if (match[2].str() == "PM") {
            time->format = PM;
        }
    }

    if (std::regex_search(text, match, time_regex)) {
        time = new Time();
        time->hour = std::stoi(match[1].str());
        time->minute = std::stoi(match[2].str());
        time->second = match[4].matched ? std::stoi(match[4].str()) : 0;

        if (match[6].matched) {
            if (match[6].str() == "AM") {
                time->format = AM;
            }
            else if (match[6].str() == "PM") {
                time->format = PM;
            }
        }
    }


    datetime = new DateTime();
    datetime->date = date;
    datetime->time = time;
    debug_print("Found a datetime literal: \n");
    printDateTimeLiteral(*datetime);
    yylval.DateTime = datetime;
    return DATETIME;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 366 "lexer.l"
{
    debug_print("Invalid datetime literal: %s\n", yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 371 "lexer.l"
{
    debug_print("Datetime literal wasn't closed: %s\n", yytext);
    if (!DEBUG) yyterminate();
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 376 "lexer.l"
{ debug_print("Found a separator left parenthesis: %s\n", yytext); return '(';}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 377 "lexer.l"
{debug_print("Found a separator right parenthesis: %s\n", yytext); return ')';}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 378 "lexer.l"
{debug_print("Found a separator left curly brace: %s\n", yytext); return '{';}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 379 "lexer.l"
{ debug_print("Found a separator right curly brace: %s\n", yytext); return '}';}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 380 "lexer.l"
{debug_print("Found a separator question mark: %s\n", yytext); return '?';}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 381 "lexer.l"
{debug_print("Found a separator point: %s\n", yytext); return '.';}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 382 "lexer.l"
{debug_print("Found a separator exclamation mark: %s\n", yytext); return '!'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 383 "lexer.l"
{ debug_print("Found a separator comma: %s\n", yytext); return ','; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 384 "lexer.l"
{debug_print("Found a separator colon: %s\n", yytext); return ':'; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 386 "lexer.l"
{
    debug_print("Found a identifier: %s\n", yytext);
    yylval.Id = new std::string(yytext);
    return ID;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 392 "lexer.l"
{}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 393 "lexer.l"
{debug_print("Found a line continuation: %s\n", yytext);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 394 "lexer.l"
{debug_print("Found end of line %d\n\n", yylineno - 1); return ENDL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 395 "lexer.l"
{debug_print("File ended\n"); yyterminate();}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 397 "lexer.l"
ECHO;
	YY_BREAK
#line 2999 "lexer.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 631 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 631 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 630);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 397 "lexer.l"


void removeUnderline(std::string* str) {
    if (str == nullptr) {
        return; 
    }
    str->erase(std::remove(str->begin(), str->end(), '_'), str->end());
}

void removeUnderline(char* str) {
    if (str == nullptr) {
        return; 
    }

    char* writePtr = str;
    char* readPtr = str;

    while (*readPtr != '\0') {
        if (*readPtr != '_') {
            *writePtr = *readPtr;
            writePtr++;
        }
        readPtr++;
    }

    *writePtr = '\0';
}


bool endsWith(const std::string& str, const std::string& suffix)
{
    return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
}

void printDateTimeLiteral(DateTime & datetime) {
    if (datetime.date != nullptr) {
        debug_print("Month: %d\n", datetime.date->month);
        debug_print("Day: %d\n", datetime.date->day);
        debug_print("Year: %d\n", datetime.date->year);
    }
    if (datetime.time != nullptr) {
        debug_print("Hour: %d\n", datetime.time->hour);
        debug_print("Minute: %d\n", datetime.time->minute);
        debug_print("Second: %d\n", datetime.time->second);
        debug_print("Time format: ");
        if (datetime.time->format == AM) {
            debug_print("AM\n");
        }
        else if (datetime.time->format == PM) {
            debug_print("PM\n");
        }
        else {
            debug_print("24-hour format\n");
        }
    }
}

void runTests() {
    DEBUG = true;
    const char* files[] = {
        "lexer/tests/lexer_comment_test.vb",
        "lexer/tests/lexer_literal_test.vb",
        "lexer/tests/lexer_string_test.vb",
        "lexer/tests/lexer_identifier_test.vb",
        "lexer/tests/lexer_datetime_test.vb",
        "lexer/tests/lexer_program1_test.vb",
        "lexer/tests/lexer_program2_test.vb",
        "lexer/tests/lexer_program3_test.vb",
    };
    int numFiles = sizeof(files) / sizeof(files[0]);
    for (int i = 0; i < numFiles; i++) {
        fopen_s(&yyin, files[i], "r");
        debug_print("Processing file: %s\n", files[i]);
        yylex();
        fclose(yyin);
        BEGIN(INITIAL);
        yylineno = 1;
    }
}


/*
TODO List:
+ Комментарии (Шашков)
+ Строки и символьные константы (Шашков)
+ Вещественные числа (Шашков)
+ Идентификаторы (Шашков)
+ Продолжение строк (Шашков)
+ Целые числа с обозначением типа и системы счисления (Шашков)
+ Ошибки (номер строки, ошибочные символы) (Шашков)
+ Мелкие улучшения (Шашков)

+ Часть тестов (Микулина)
+ Логические значения (Микулина)
+ Дата и время (Микулина)
+ Зарезервированные слова, модификаторы (Микулина)
+ Скобки и управляющие символы (Микулина)
*/
